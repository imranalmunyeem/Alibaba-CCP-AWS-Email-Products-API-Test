{
	"info": {
		"_postman_id": "7de7e2c4-13d7-4ae1-b975-a563717f15d0",
		"name": "Tests API demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CCP ROTW",
			"item": [
				{
					"name": "1 - Get Configurations",
					"item": [
						{
							"name": "Start CCP ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var cloud = pm.iterationData.get(\"cloud\");\r",
											"\r",
											"if(cloud !== \"aws\"){\r",
											"    pm.test.skip( function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"   postman.setNextRequest(\"Exit CCP ROTW Tests\");   \r",
											"}                                                                                     \r",
											"\r",
											"\r",
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
											"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
											"            }        \r",
											"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "getFormCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
											"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
											"            }        \r",
											"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "getFooterCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].code).not.eql(null);   \r",
											"            pm.expect(jsonData[0].countries > 0); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
											"            }        \r",
											"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"footer",
										"country",
										"{{brand}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAppConfiguration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"App configuration exists for the brand: \" + jsonData.brand.name, function () {   \r",
											"            pm.expect(jsonData.brand.shortName).eql(brand);   \r",
											"            pm.expect(jsonData.app.landingPage).not.eql(null); \r",
											"            pm.expect(jsonData.assetsPaths.appPath).not.eql(null);                            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/application/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"application",
										"{{brand}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2 - Login and check  user details",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var email = pm.iterationData.get(\"email\");",
											"",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken); ",
											"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
											"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"/*",
											"// For data persistence for the regsiter endpoint, create new accounts",
											"const moment = require('moment');",
											"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
											"",
											"var email = pm.environment.get(\"newAccountEmail\");",
											"var lastname = pm.environment.get(\"newAccountLastname\");",
											"",
											"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
											"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
											"*/",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var email = pm.iterationData.get(\"email\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var country = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer isConnected",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/connected",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"connected"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Current Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
											"",
											"pm.test('Current customer Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
											"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
											"            pm.expect(jsonData.uid).not.eql(null); ",
											"            pm.expect(jsonData.optIn).not.eql(null); ",
											"            pm.expect(jsonData.country).not.eql(null);      ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3 - Update Customer Informations",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const loginSchema = JSON.parse(pm.environment.get(\"schemaLogin\"));",
											"",
											"pm.test('Login response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(loginSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            pm.expect(jsonData.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonData.token);",
											"            pm.globals.set(\"ccp-token\",jsonData.ccpToken);             ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var emailUserToUpdate = pm.iterationData.get(\"emailUserToUpdate\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{emailUserToUpdate}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand1",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"Customer updated \", function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var emailUserToUpdate = pm.iterationData.get(\"emailUserToUpdate\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var customerNumberOfUserToUpdate = pm.iterationData.get(\"customerNumberOfUserToUpdate\");\r",
											"var uidUserToUpdate = pm.iterationData.get(\"uidUserToUpdate\");\r",
											"\r",
											"const moment = require('moment');\r",
											"var  timestamp  = moment().format(\"DD_MM_YYYY__hh_mm_ss\");\r",
											"pm.environment.set(\"timestamp\", timestamp);\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerNumber\": {{customerNumberOfUserToUpdate}},\n  \"uid\": \"{{uidUserToUpdate}}\",\n  \"email\": \"{{emailUserToUpdate}}\",\n  \"gender\": \"{{gender}}\",\n  \"title\": \"{{title}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"lastName2\": \"{{timestamp}}\",    \n  \"optIn\": true,\n  \"country\": \"{{countryfooter}}\",\n  \"language\": \"{{language}}\"\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change OptIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optIn\"), function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var optIn = pm.iterationData.get(\"optIn\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{optIn}}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"optin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4 - Check Customer Products",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");",
											"pm.environment.set(\"userMail\", userMail);",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token); ",
											"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
											"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"/*",
											"// For data persistence for the regsiter endpoint, create new accounts",
											"const moment = require('moment');",
											"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
											"",
											"var email = pm.environment.get(\"newAccountEmail\");",
											"var lastname = pm.environment.get(\"newAccountLastname\");",
											"",
											"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
											"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
											"*/",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var email = pm.iterationData.get(\"email\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var country = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Product By Serial Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"   ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json();     ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
											"            pm.expect(jsonData[0].serial).not.eql(null);            ",
											"            var EQP_UID = jsonData[0].uid;",
											"            var WAR_UID = jsonData[0].warranty.uid; ",
											"            pm.environment.set(\"EQP_UID\",EQP_UID);",
											"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"        pm.test(\"Fail expected document\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"serial\");",
											"        }); ",
											"    }",
											"    return; ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "Mbk4]7]DfUD%xC]b",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "serial",
										"type": "text",
										"value": "{{serial}}"
									},
									{
										"key": "ccp-login-token",
										"type": "text",
										"value": "{{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product"
									],
									"query": [
										{
											"key": "serial",
											"value": "{{serial}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"var preregCount;",
											"try {",
											"    jsonData = pm.response.json(); ",
											"    preregCount = jsonData.length",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const productsSchema = JSON.parse(pm.environment.get(\"schemaProducts\"));",
											"",
											"pm.test('Products Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(productsSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"Customer products: \" + preregCount, function () {            ",
											"            // Check the first item ",
											"            pm.expect(jsonData[0].uid).not.eql(null); ",
											"            pm.expect(jsonData[0].eligibilityStatus).not.eql(null);    ",
											"            pm.expect(jsonData[0].extendable).not.eql(null); ",
											"            // Check the last item ",
											"            if(preregCount>1){",
											"                pm.expect(jsonData[preregCount - 1].uid).not.eql(null); ",
											"                pm.expect(jsonData[preregCount - 1].eligibilityStatus).not.eql(null);    ",
											"                pm.expect(jsonData[preregCount - 1].extendable).not.eql(null);",
											"            }                                  ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"        pm.test(\"Fail expected document\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"200\");",
											"        }); ",
											"    }",
											"    return; ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "ccpToken={{ccp-token}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "ccpToken = eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..MHzr4IeoBj_oKOYJ.C8LL97kTe11tKrVO_oBjrdf1zaAntyBhJNUZxbU2_ITTC_mIlXa51TTMPfWCRrHKEQFQVMJ0u6mnekVKYWqPPYtQ08jlEQAn_hkbMX4GJKTAqZPg3XUYHdjv7Lq-ePmJ28vcpVaV_fTmhyPj33WWeFHFZK-6kcLosRpL6a3er0Xh3fixYL9Gy-pE0r1a277ulXxG5JfXBBw1Vo7aWeonl_r_PnTKqa9YcW6Yl0H5uQ7NgrEkor-U8iFbvbxzz1PVKHaG0OgHIMQDs3MvLfl_wdfwVwcxIVqtvzNiIQLOn99dVCHxAHR0EPmE3NxzxSyRRm8_NlzB_QpVAM-oxcd22mYfpSPvkVD-3brVLtn14PeEwX5VboMUwg.e6CZS-wi0Oh2sPMRIrqn6Q",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEquipment}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"customer",
										"products"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product By Uid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var uid = pm.iterationData.get(\"uid\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"var EQP_UID = pm.environment.get(\"EQP_UID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{uid}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product",
										"{{uid}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Exit CCP ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var cloud = pm.iterationData.get(\"cloud\");",
											"if(cloud !== \"aws\"){",
											"    pm.test.skip(function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} ",
											"else{",
											"    pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "CCP China",
			"item": [
				{
					"name": "1 - Get Configurations",
					"item": [
						{
							"name": "Start CN API Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var cloud = pm.iterationData.get(\"cloud\");\r",
											"if(cloud === \"aws\"){\r",
											"    pm.test.skip( function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"   postman.setNextRequest(\"Exit CN Api Tests\");\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "getFormCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
											"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
											"            }        \r",
											"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "getFooterCountries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].code).not.eql(null);   \r",
											"            pm.expect(jsonData[0].countries > 0); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
											"            }        \r",
											"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"footer",
										"country",
										"{{brand}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAppConfiguration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"App configuration exists for the brand: \" + jsonData.brand.name, function () {   \r",
											"            pm.expect(jsonData.brand.shortName).eql(brand);   \r",
											"            pm.expect(jsonData.app.landingPage).not.eql(null); \r",
											"            pm.expect(jsonData.assetsPaths.appPath).not.eql(null);                            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/application/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"application",
										"{{brand}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2 - Check Login Options",
					"item": [
						{
							"name": "Login By Email & Password (CN)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email = pm.iterationData.get(\"email\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");\r",
											"pm.environment.set(\"userMail\", userMail);\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Phone & Password (CN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "phone",
											"value": "{{phoneNumberWithAreaCode}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3 - Reseting Password",
					"item": [
						{
							"name": "Login With Phone & Password (CN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
											"//pm.environment.set(\"encodedphone\",encodedphone);\r",
											"\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "phone",
											"value": "{{phoneNumberWithAreaCode}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Forget Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 3 seconds before next request.\");\r",
											"        }, 10000);\r",
											"        postman.setNextRequest(\"Retrieve Reseting  Email  Token\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var email = pm.iterationData.get(\"email\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{email}}\",\n\t\"callbackUrl\":\"/profile/create-password\",\n\t\"language\":\"{{language}}\"\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password/forget?country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"password",
										"forget"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4 - Modify OptIn",
					"item": [
						{
							"name": "Login User OptOut",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var emailUserOptOut = pm.iterationData.get(\"emailUserOptOut\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"    console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"}, 2000);\r",
											"pm.test('Status received is ' + pm.response.code, function () {    \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var emailUserOptOut = pm.iterationData.get(\"emailUserOptOut\");\r",
											"\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose email: \" + emailUserOptOut + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{emailUserOptOut}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change To OptIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optIn\"), function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var optIn = pm.iterationData.get(\"optIn\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{optIn}}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"optin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check If OptOut was modified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"/*",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
											"",
											"pm.test('Current customer Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"*/",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
											"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
											"            pm.expect(jsonData.uid).not.eql(null); ",
											"            pm.expect(jsonData.optIn).eql(true); ",
											"            pm.expect(jsonData.country).not.eql(null);      ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "en-US,en;q=0.9"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change To OptOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optOut\"), function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var optOut = pm.iterationData.get(\"optOut\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{optOut}} "
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"optin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check If OptOut was saved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"/*",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
											"",
											"pm.test('Current customer Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"*/",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
											"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
											"            pm.expect(jsonData.uid).not.eql(null); ",
											"            pm.expect(jsonData.optIn).eql(false); ",
											"            pm.expect(jsonData.country).not.eql(null);      ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "en-US,en;q=0.9"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "5 - Search product",
					"item": [
						{
							"name": "Login By Email And Password (CN)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email = pm.iterationData.get(\"email\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");\r",
											"pm.environment.set(\"userMail\", userMail);\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Product By Serial Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var serial = pm.iterationData.get(\"serial\");",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json();     ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
											"            pm.expect(jsonData[0].serial).not.eql(null);            ",
											"            var EQP_UID = jsonData[0].uid;",
											"            var WAR_UID = jsonData[0].warranty.uid; ",
											"            pm.environment.set(\"EQP_UID\",EQP_UID);",
											"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"        pm.test(\"Fail expected document\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"serial\");",
											"        }); ",
											"    }",
											"    return; ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "serial",
										"value": "{{serial}}",
										"type": "text"
									},
									{
										"key": "ccp-login-token",
										"value": "{{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEquipment}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product"
									],
									"query": [
										{
											"key": "serial",
											"value": "{{serial}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"var productsCount;",
											"try {",
											"    jsonData = pm.response.json(); ",
											"    productsCount = jsonData.length",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"/*",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const productsSchema = JSON.parse(pm.environment.get(\"schemaProducts\"));",
											"",
											"pm.test('Products Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(productsSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"*/",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"Customer products: \" + productsCount, function () {            ",
											"            // Check the first item ",
											"            pm.expect(jsonData[0].uid).not.eql(null); ",
											"            pm.expect(jsonData[0].eligibilityStatus).not.eql(null);    ",
											"            pm.expect(jsonData[0].extendable).not.eql(null); ",
											"            // Check the last item ",
											"            if(productsCount>1){",
											"                pm.expect(jsonData[productsCount - 1].uid).not.eql(null); ",
											"                pm.expect(jsonData[productsCount - 1].eligibilityStatus).not.eql(null);    ",
											"                pm.expect(jsonData[productsCount - 1].extendable).not.eql(null);",
											"            }                                  ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"        pm.test(\"Fail expected document\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"200\");",
											"        }); ",
											"    }",
											"    return; ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEquipment}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"customer",
										"products"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Exit CN Api Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var cloud = pm.iterationData.get(\"cloud\");",
											"if(cloud !== \"alibaba\"){",
											"    pm.test.skip('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"} ",
											"else{",
											"    pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "ECS",
			"item": [
				{
					"name": "0 - Initialize Data",
					"item": [
						{
							"name": "Start eCS ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecsActivated = pm.iterationData.get(\"ecsActivated\");\r",
											"\r",
											"if(!ecsActivated){\r",
											"    pm.test.skip( function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    postman.setNextRequest(\"Exit eCS ROTW Tests\");\r",
											"}                                                                                     \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get eCS  Configuration & Initialize Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Initialize needed environments varaiables\r",
											"\r",
											"pm.environment.set(\"sceOrderIdWithPaymentDone\",\"\"); \r",
											"pm.environment.set(\"statusInRegistration\",\"0001\"); \r",
											"pm.environment.set(\"statusInDiagnosis\",\"0008\"); \r",
											"pm.environment.set(\"statusWaitForApproval\",\"0002\"); \r",
											"pm.environment.set(\"statusCostEstimateDeclined\",\"0009\"); \r",
											"pm.environment.set(\"statusCostEstimateAccepted\",\"0011\"); \r",
											"pm.environment.set(\"statusInRepair\",\"0003\"); \r",
											"pm.environment.set(\"statusWaitingForCollection\",\"0004\"); \r",
											"pm.environment.set(\"statusWaitForPayment\",\"0012\"); \r",
											"pm.environment.set(\"statusToBeShipped\",\"0013\"); \r",
											"pm.environment.set(\"skipTest\",false); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 - Check Configurations",
					"item": [
						{
							"name": "Get Form Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
											"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
											"            }        \r",
											"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Footer Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].code).not.eql(null);   \r",
											"            pm.expect(jsonData[0].countries > 0); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
											"            }        \r",
											"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"footer",
										"country",
										"{{brand}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ServiceOrder Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The service order configuration exists for the brand: \" + brand, function () {   \r",
											"              \r",
											"            pm.expect(jsonData.ecsOnlines).not.eql(null); \r",
											"            pm.expect(jsonData.ecsBoutique).not.eql(null);\r",
											"            pm.expect(jsonData.productFamilies).not.eql(null);\r",
											"            pm.expect(jsonData.howServicesAreMadeUrl).not.eql(null);\r",
											"            pm.expect(jsonData.howServicesAreMadeConfigs).not.eql(null);\r",
											"                            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3 - Search preregistration",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email_main_user\");",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email_main_user = pm.iterationData.get(\"email_main_userg\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
											"",
											"pm.environment.set(\"preregistrationId\", preregistrationId);",
											"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email_main_user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Preregistration by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const preRegSchema = JSON.parse(pm.environment.get(\"schemaPreRegistration\"));\r",
											"/*\r",
											"pm.test('Pre-registration Json response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(preRegSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Pre-registration Id \" + pm.environment.get(\"preregistrationId\") + \" is present\", function () {   \r",
											"            pm.expect(jsonData.identifier).not.eql(null);   \r",
											"            pm.expect(jsonData.productType).not.eql(null); \r",
											"            pm.expect(jsonData.customerNumber).not.eql(null); \r",
											"            pm.expect(jsonData.status).not.eql(null);      \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}/{{preregistrationId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"preregistration",
										"{{brand}}",
										"{{preregistrationId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all preregistrations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var preregCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    preregCount = jsonData.length\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"preregistrationCountCol\", preregCount); \r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Pre-registration list contains: \" + preregCount + \" pre-registrations\", function () {            \r",
											"            // Check the first item \r",
											"            pm.expect(jsonData[0].identifier).not.eql(null); \r",
											"            pm.expect(jsonData[0].customerNumber).not.eql(null);    \r",
											"            pm.expect(jsonData[0].status).not.eql(null); \r",
											"            // Check the last item \r",
											"            if(preregCount>1){\r",
											"                pm.expect(jsonData[preregCount - 1].identifier).not.eql(null); \r",
											"                pm.expect(jsonData[preregCount - 1].customerNumber).not.eql(null);    \r",
											"                pm.expect(jsonData[preregCount - 1].status).not.eql(null);\r",
											"            }                                  \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"preregistration",
										"{{brand}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List of all documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var documentsCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    documentsCount = jsonData.length;\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The preregistration documents list contains \" + documentsCount + \"file(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
											"            \r",
											"            pm.expect(jsonData[0].name).not.eql(null);   \r",
											"            pm.expect(jsonData[0].size).not.eql(null);   \r",
											"            pm.expect(jsonData[0].type).not.eql(null);             \r",
											"            console.log(jsonData[0].name);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"document",
										"{{brand}}",
										"{{preregistrationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Document by preregistration id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The document of the preregistration whose identifier is: \" + pm.iterationData.get(\"preregistrationId\") + \" exists\", function () {   \r",
											"            pm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
											"            let headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
											"            pm.expect(headerContentDisposition).to.include(\"filename=\");             \r",
											"            pm.expect(headerContentDisposition).to.include(\".pdf\");            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}/preregistration",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"document",
										"{{brand}}",
										"{{preregistrationId}}",
										"preregistration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4 - Check Service Order Details and Documents",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email_main_user\");",
											"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
											"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
											"",
											"",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email_main_user = pm.iterationData.get(\"email_main_user\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
											"",
											"pm.environment.set(\"preregistrationId\", preregistrationId);",
											"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email_main_user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "getServiceOrderConfigurationByBrand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Service Orders for a given customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service-Order list contains: \"  + jsonData.length + \" service-order(s)\", function () {    \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].identifier).not.eql(null);              \r",
											"            pm.expect(jsonData[0].createDate).not.eql(null);   \r",
											"            pm.expect(jsonData[0].serialNumber).not.eql(null); \r",
											"            pm.expect(jsonData[0].productTitle).not.eql(null);   \r",
											"            pm.expect(jsonData[0].status).not.eql(null);  \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].identifier).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].createDate).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].serialNumber).not.eql(null); \r",
											"                pm.expect(jsonData[jsonData.length-1].productTitle).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].status).not.eql(null);\r",
											"            }        \r",
											"            console.log(jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search ServiceOrder By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson; \r",
											"try {\r",
											"    responseJson = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"/*\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
											"\r",
											"pm.test('Service Order Json response body Schema is valid', function () {\r",
											"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
											"            pm.response.to.not.be.error;            \r",
											"            pm.response.to.not.have.jsonBody('error');\r",
											"            \r",
											"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
											"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);             \r",
											"            pm.expect(responseJson.serialNumber).not.eql(null);   \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var encoddedEmail = pm.environment.get(\"encoddedEmail\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/search/{{serviceOrderId}}?websiteCountry={{countryfooter}}&email={{encoddedEmail}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}",
										"search",
										"{{serviceOrderId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "email",
											"value": "{{encoddedEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Service Order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson; \r",
											"try {\r",
											"    responseJson = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"/*\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
											"\r",
											"pm.test('Service Order Json response body Schema is valid', function () {\r",
											"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
											"            pm.response.to.not.be.error;            \r",
											"            pm.response.to.not.have.jsonBody('error');\r",
											"            \r",
											"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
											"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);  \r",
											"            //pm.expect(responseJson.preregistrationId).to.eql(pm.environment.get(\"preregistrationId\")); \r",
											"            //pm.expect(responseJson.preregistrationId).not.eql(null); \r",
											"            //pm.expect(responseJson.requestDate).not.eql(null); \r",
											"            pm.expect(responseJson.boutiqueCode).not.eql(null); \r",
											"            pm.expect(responseJson.serialNumber).not.eql(null); \r",
											"            //pm.expect(responseJson.warrantDate).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.costEstimateNumber).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.costEstimateNumber).to.be.a(\"number\");\r",
											"            pm.expect(responseJson.estimate.status).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.estimateLines[0]).not.eql(null); \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"\r",
											"var serviceOrserId = pm.iterationData.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}",
										"{{serviceOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display the List of all documents of the service order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var documentsCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    documentsCount = jsonData.length\r",
											"    \r",
											"    if (responseCode.code !== 200) {\r",
											"        try {        \r",
											"            jsonMessage = JSON.parse(responseBody.message);  \r",
											"            console.log(jsonMessage);      \r",
											"        }\r",
											"        catch(e) {\r",
											"            console.log(e);\r",
											"        }\r",
											"        return;\r",
											"    }\r",
											"    else {\r",
											"        try {    \r",
											"            pm.test(\"Service order contains \"  + documentsCount + \"document(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
											"                \r",
											"                pm.expect(jsonData[0].name).not.eql(null);  \r",
											"                pm.expect(jsonData[0].size).not.eql(null); \r",
											"                pm.expect(jsonData[0].type).not.eql(null);  \r",
											"            });   \r",
											"        }\r",
											"        catch(e) {\r",
											"            console.log(e);     \r",
											"            pm.test(\"Fail expected document\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\".pdf\");\r",
											"            });       \r",
											"        }\r",
											"        return; \r",
											"    }\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{serviceOrderId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"document",
										"{{brand}}",
										"{{serviceOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBoutiqueInformation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var boutiqueCode = pm.iterationData.get(\"boutiqueCode\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The boutique  with code \" + jsonData.code + \" is \" + jsonData.label + \", \" + jsonData.address.address + \", \" + jsonData.address.state + \", \" + jsonData.address.country , function () {   \r",
											"            pm.expect(jsonData.label).not.eql(null);   \r",
											"            pm.expect(jsonData.code).eql(pm.iterationData.get(\"boutiqueCode\"));             \r",
											"            pm.expect(jsonData.address.country).eql(pm.iterationData.get(\"countryfooter\"));    \r",
											"            pm.expect(jsonData.address.address).not.eql(null);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "boutiqueCode",
											"value": "{{boutiqueCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/boutique/{{brand}}/{{boutiqueCode}}?websiteCountry={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"boutique",
										"{{brand}}",
										"{{boutiqueCode}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getServiceOrderWorkflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 5 seconds before next request.\");\r",
											"    },3000); \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order workflow with current status: \" + jsonData.current.status + \" exists\", function () {  \r",
											"            //pm.response.to.not.be.error;            \r",
											"            //pm.response.to.not.have.jsonBody('error');  \r",
											"\r",
											"            pm.expect(jsonData.current.status).not.eql(null);          \r",
											"            pm.expect(jsonData.current.subStep).not.eql(null); \r",
											"            pm.expect(jsonData.current.mainStep).not.eql(null); \r",
											"\r",
											"            if (jsonData.future.length > 1)            {\r",
											"                pm.expect(jsonData.future[0].mainStep).not.eql(null);   \r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                pm.expect(jsonData.future.status).not.eql(null);   \r",
											"            } \r",
											"            if (jsonData.past.length > 1)\r",
											"            {\r",
											"                pm.expect(jsonData.past[0].status).not.eql(null);          \r",
											"                pm.expect(jsonData.past[0].subStep).not.eql(null); \r",
											"                pm.expect(jsonData.past[0].mainStep).not.eql(null);\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                pm.expect(jsonData.past.status).not.eql(null);          \r",
											"                pm.expect(jsonData.past.subStep).not.eql(null); \r",
											"                pm.expect(jsonData.past.mainStep).not.eql(null); \r",
											"            }            \r",
											"\r",
											"            //pm.expect(jsonData.serviceOrder.boutiqueCode).not.eql(null); \r",
											"            pm.expect(jsonData.serviceOrder.createDate).not.eql(null);  \r",
											"            pm.expect(jsonData.serviceOrder.identifier).not.eql(null); \r",
											"            //pm.expect(jsonData.serviceOrder.serialNumber).not.eql(null);                   \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/ecs-workflow/v1/workflow/{{brand}}/{{serviceOrderId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"ecs-workflow",
										"v1",
										"workflow",
										"{{brand}}",
										"{{serviceOrderId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Exit eCS ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecsActivated = pm.iterationData.get(\"ecsActivated\");",
											"",
											"if(!ecsActivated){",
											"    pm.test.skip( function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"} ",
											"else{",
											"    pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "preregistrationCountCol",
			"value": 3
		}
	]
}