{
	"info": {
		"_postman_id": "e7b7fdca-feb4-46dc-9d7b-cdc68af99728",
		"name": "001-ecs-aws-api-automation-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "000 - Initialize Data",
			"item": [
				{
					"name": "Get eCS  Configuration & Initialize Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Initialize needed environments varaiables\r",
									"\r",
									"pm.environment.set(\"sceOrderIdWithPaymentDone\",\"\"); \r",
									"pm.environment.set(\"statusInRegistration\",\"0001\"); \r",
									"pm.environment.set(\"statusInDiagnosis\",\"0008\"); \r",
									"pm.environment.set(\"statusWaitForApproval\",\"0002\"); \r",
									"pm.environment.set(\"statusCostEstimateDeclined\",\"0009\"); \r",
									"pm.environment.set(\"statusCostEstimateAccepted\",\"0011\"); \r",
									"pm.environment.set(\"statusInRepair\",\"0003\"); \r",
									"pm.environment.set(\"statusWaitingForCollection\",\"0004\"); \r",
									"pm.environment.set(\"statusWaitForPayment\",\"0012\"); \r",
									"pm.environment.set(\"statusToBeShipped\",\"0013\"); \r",
									"pm.environment.set(\"skipTest\",false); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
									"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthConfiguration}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"service-order",
								"{{brand}}",
								"{{websiteCountry}}"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "001 - Check Configurations",
			"item": [
				{
					"name": "Get Form Countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
									"            pm.expect(jsonData.length > 0);   \r",
									"            // Check the first item       \r",
									"            pm.expect(jsonData[0].name).not.eql(null);              \r",
									"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
									"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
									"            \r",
									"            // Check the last item  \r",
									"            if(jsonData.length>1){\r",
									"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
									"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
									"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
									"            }        \r",
									"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthConfiguration}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"form",
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Footer Countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
									"            pm.expect(jsonData.length > 0);   \r",
									"            // Check the first item       \r",
									"            pm.expect(jsonData[0].name).not.eql(null);              \r",
									"            pm.expect(jsonData[0].code).not.eql(null);   \r",
									"            pm.expect(jsonData[0].countries > 0); \r",
									"            \r",
									"            // Check the last item  \r",
									"            if(jsonData.length>1){\r",
									"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
									"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
									"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
									"            }        \r",
									"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{BasicAuthConfiguration}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"footer",
								"country",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Region Countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthConfiguration}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/region",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"form",
								"region"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regions Per Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthConfiguration}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country/{{countryfooter}}/region?language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"form",
								"country",
								"{{countryfooter}}",
								"region"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ServiceOrder Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var brand = pm.iterationData.get(\"brand\");\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"The service order configuration exists for the brand: \" + brand, function () {   \r",
									"              \r",
									"            pm.expect(jsonData.ecsOnlines).not.eql(null); \r",
									"            pm.expect(jsonData.ecsBoutique).not.eql(null);\r",
									"            pm.expect(jsonData.productFamilies).not.eql(null);\r",
									"            pm.expect(jsonData.howServicesAreMadeUrl).not.eql(null);\r",
									"            pm.expect(jsonData.howServicesAreMadeConfigs).not.eql(null);\r",
									"                            \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
									"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{BasicAuthConfiguration}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"service-order",
								"{{brand}}",
								"{{websiteCountry}}"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "002 - Search preregistration",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"email_main_user\");",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_userg\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Preregistration by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
									"\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const preRegSchema = JSON.parse(pm.environment.get(\"schemaPreRegistration\"));\r",
									"/*\r",
									"pm.test('Pre-registration Json response body Schema is valid', function() {\r",
									"    pm.expect(jsonValidator.validate(preRegSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Pre-registration Id \" + pm.environment.get(\"preregistrationId\") + \" is present\", function () {   \r",
									"            pm.expect(jsonData.identifier).not.eql(null);   \r",
									"            pm.expect(jsonData.productType).not.eql(null); \r",
									"            pm.expect(jsonData.customerNumber).not.eql(null); \r",
									"            pm.expect(jsonData.status).not.eql(null);      \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}/{{preregistrationId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"preregistration",
								"{{brand}}",
								"{{preregistrationId}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all preregistrations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var preregCount;\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"    preregCount = jsonData.length\r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"preregistrationCountCol\", preregCount); \r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Pre-registration list contains: \" + preregCount + \" pre-registrations\", function () {            \r",
									"            // Check the first item \r",
									"            pm.expect(jsonData[0].identifier).not.eql(null); \r",
									"            pm.expect(jsonData[0].customerNumber).not.eql(null);    \r",
									"            pm.expect(jsonData[0].status).not.eql(null); \r",
									"            // Check the last item \r",
									"            if(preregCount>1){\r",
									"                pm.expect(jsonData[preregCount - 1].identifier).not.eql(null); \r",
									"                pm.expect(jsonData[preregCount - 1].customerNumber).not.eql(null);    \r",
									"                pm.expect(jsonData[preregCount - 1].status).not.eql(null);\r",
									"            }                                  \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"preregistration",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var documentsCount;\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"    documentsCount = jsonData.length;\r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"The preregistration documents list contains \" + documentsCount + \"file(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
									"            \r",
									"            pm.expect(jsonData[0].name).not.eql(null);   \r",
									"            pm.expect(jsonData[0].size).not.eql(null);   \r",
									"            pm.expect(jsonData[0].type).not.eql(null);             \r",
									"            console.log(jsonData[0].name);             \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
									"var brand = pm.iterationData.get(\"brand\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"document",
								"{{brand}}",
								"{{preregistrationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Document by preregistration id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"The document of the preregistration whose identifier is: \" + pm.iterationData.get(\"preregistrationId\") + \" exists\", function () {   \r",
									"            pm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
									"            let headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
									"            pm.expect(headerContentDisposition).to.include(\"filename=\");             \r",
									"            pm.expect(headerContentDisposition).to.include(\".pdf\");            \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
									"var brand = pm.iterationData.get(\"brand\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}/preregistration",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"document",
								"{{brand}}",
								"{{preregistrationId}}",
								"preregistration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "003 - Create Preregistration",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"emailUser_UsedForPreregistrationCreation\");",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUser_UsedForPreregistrationCreation = pm.iterationData.get(\"emailUser_UsedForPreregistrationCreation\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"",
									"",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_UsedForPreregistrationCreation}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pre-registration Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();\r",
									"\r",
									"pm.globals.get(\"ccp-token\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"\r",
									"var customerPreregNumber = pm.iterationData.get(\"customerPreregNumber\");\r",
									"var firstName = pm.iterationData.get(\"firstName\");\r",
									"var lastName = pm.iterationData.get(\"lastName\");\r",
									"var city = pm.iterationData.get(\"city\");\r",
									"var district = pm.iterationData.get(\"district\");\r",
									"var address = pm.iterationData.get(\"address\");\r",
									"var productType = pm.iterationData.get(\"productType\");\r",
									"var serial = pm.iterationData.get(\"serial\");\r",
									"var yearOfPurchase = pm.iterationData.get(\"yearOfPurchase\");\r",
									"var repairOrder = pm.iterationData.get(\"repairOrder\");\r",
									"var preregStatus = \"string\";\r",
									"\r",
									"var kitNeeded = false;\r",
									"var isSameAddress = true;\r",
									"\r",
									"pm.variables.set(\"current_timestamp\", current_timestamp.toISOString());\r",
									"pm.variables.set(\"kitNeeded\", kitNeeded);\r",
									"pm.variables.set(\"isSameAddress\", isSameAddress);\r",
									"pm.variables.set(\"preregStatus\", preregStatus);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"\r",
									"if (responseCode.code === 201) {\r",
									"    try {        \r",
									"        //var UriLocation = pm.response.headers.get(\"Location\");\r",
									"        var UriLocation = pm.response.headers.get(\"location\");\r",
									"        //const lastPreRegId = UriLocation.split('?')[0].split(':')[1].split('/')[7]; \r",
									"        const lastPreRegId = UriLocation;\r",
									"        \r",
									"\r",
									"        pm.test(\"Pre-registration created, Id: \" + lastPreRegId + \"; creation date: \" + pm.response.headers.get(\"Date\"), function () {   \r",
									"            pm.expect(lastPreRegId).not.eql(null);   \r",
									"            console.log(lastPreRegId);         \r",
									"            pm.environment.set(\"lastPreregistrationId\", lastPreRegId);\r",
									"            pm.expect(pm.environment.get(\"lastPreregistrationId\")).not.eql(null);                         \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"createDate\": \"{{current_timestamp}}\",\n  \"customerNumber\": \"{{customerPreregNumber}}\",\n  \"description\": \"Testing Pre-registration creation\",\n  \"fileSize\": 0,\n  \"identifier\": 0,\n  \"isSameAddress\": {{isSameAddress}},\n  \"isServiceKitNeeded\": {{kitNeeded}},\n  \"productType\": \"{{productType}}\",\n  \"repairOrder\": \"{{repairOrder}}\",\n  \"requestDate\": \"{{current_timestamp}}\",\n  \"serialNumber\": \"{{serial}}\",\n  \"status\": \"{{preregStatus}}\",\n  \"updateDate\": \"{{current_timestamp}}\", \n  \"deliveryBillingAddress\": {\n    \"label\": \"\",\n    \"title\": \"Mr\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"province\": \"Province\",\n    \"city\": \"{{city}}\",\n    \"district\": \"{{district}}\",\n    \"address\": \"{{address}}\",\n    \"country\": \"{{countryfooter}}\"\n  },\n  \"serviceKitAddress\": {\n    \"label\": \"string\",\n    \"title\": \"string\",\n    \"lastName\": \"string\",\n    \"firstName\": \"string\",\n    \"province\": \"string\",\n    \"city\": \"string\",\n    \"district\": \"string\",\n    \"address\": \"string\",\n    \"country\": \"{{countryfooter}}\"\n  }  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}?websiteCountry={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"preregistration",
								"{{brand}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find new created Pre-registration by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const preRegSchema = JSON.parse(pm.collectionVariables.get(\"schemaPreRegistration\"));\r",
									"\r",
									"pm.test('Pre-registration Json response body Schema is valid', function() {\r",
									"    pm.expect(jsonValidator.validate(preRegSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"The last Pre-registration created whose Id: \" + pm.environment.get(\"lastPreregistrationId\") + \" is present\", function () {   \r",
									"            pm.expect(jsonData.identifier).not.eql(null);   \r",
									"            pm.expect(jsonData.productType).not.eql(null); \r",
									"            pm.expect(jsonData.customerNumber).not.eql(null); \r",
									"            pm.expect(jsonData.status).not.eql(null);      \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}/{{lastPreregistrationId}}?websiteCountry={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"preregistration",
								"{{brand}}",
								"{{lastPreregistrationId}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the new pre-registration in the List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var preregCount;\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"    preregCount = JSON.parse(responseBody).length; \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"var previousPreregCount = pm.environment.set(\"preregistrationCount\");\r",
									"var lastPreregCreated = pm.environment.get(\"lastPreregistrationId\");\r",
									"\r",
									"pm.environment.set(\"preregistrationCount\", preregCount); \r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Pre-registration list contains: \" + preregCount + \" pre-registrations\", function () {              \r",
									"            pm.expect(preregCount == previousPreregCount + 1);\r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}\r",
									"\r",
									"function _isContains(json, keyname, value) {\r",
									" return Object.keys(json).some(key => {\r",
									"        return typeof json[key] === 'object' ? \r",
									"        _isContains(json[key], keyname, value) : key === keyname && json[key] === value;\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"pre-registration",
								"v1",
								"preregistration",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "004 - Manage Addresses",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var emailUser_ToManageAdresses = pm.iterationData.get(\"emailUser_ToManageAdresses\");",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + emailUser_ToManageAdresses + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);                        ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUser_ToManageAdresses = pm.iterationData.get(\"emailUser_ToManageAdresses\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var country = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_ToManageAdresses}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Addresses List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"var numberAddress;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"    numberAddress = jsonData.length;\r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Addresses list contains: \" + jsonData.length + \" address(s)\", function () {\r",
									"            pm.expect(jsonData[jsonData.length - 1].id).not.eql(null);  \r",
									"            pm.expect(jsonData[jsonData.length - 1].customerNumber).not.eql(null); \r",
									"            pm.environment.set(\"numberAddress\", jsonData.length);  \r",
									"            pm.environment.set(\"addressId\", jsonData[jsonData.length - 1].id);\r",
									"        });\r",
									"        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-token}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses?country={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								}
							]
						},
						"description": "Get list of addresses"
					},
					"response": []
				},
				{
					"name": "getAddress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var addressId = pm.environment.get(\"addressId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();    \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"var addressId = pm.environment.get(\"addressId\");\r",
									"var country = pm.iterationData.get(\"countryfooter\");\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Address  which id is: \" + jsonData.id + \" found\", function () {\r",
									"            pm.expect(jsonData.id).eql(addressId);  \r",
									"            pm.expect(jsonData.country).eql(country);\r",
									"        });        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses/{{addressId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "suggestAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();    \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Address suggested: \" + jsonData[0].streetNumber + \" \" + jsonData[0].streetName + \" \" + jsonData[0].zipCode + \" \"  + jsonData[0].city + \" \" + jsonData[0].country + \" \", function () {\r",
									"            pm.expect(jsonData[0].zipCode).not.eql(null);\r",
									"            pm.expect(jsonData[0].city).not.eql(null);\r",
									"            pm.expect(jsonData[0].country).not.eql(null);\r",
									"            pm.expect(jsonData[0].streetNumber).not.eql(null);\r",
									"            pm.expect(jsonData[0].streetName).not.eql(null);\r",
									"        });        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"country\": \"{{countryfooter}}\",\r\n    \"zipCode\": \"{{postCode}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses/suggestion",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses",
								"suggestion"
							]
						},
						"description": "EC1A 7DH, EC1M 7AA, EC1Y 8AA -> london,\r\nEH1 2JN, EH1 1PD  -> Edinburgh,\r\nL7 5NF  -> Liverpool"
					},
					"response": []
				},
				{
					"name": "validateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();    \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Address validated: \" + jsonData[0].streetNumber + \" \" + jsonData[0].streetName + \" \" + jsonData[0].zipCode + \" \"  + jsonData[0].city + \" \" + jsonData[0].country + \" \", function () {\r",
									"            pm.expect(jsonData[0].zipCode).not.eql(null);\r",
									"            pm.expect(jsonData[0].city).not.eql(null);\r",
									"            pm.expect(jsonData[0].country).not.eql(null);\r",
									"            pm.expect(jsonData[0].streetNumber).not.eql(null);\r",
									"            pm.expect(jsonData[0].streetName).not.eql(null);\r",
									"        });        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{LoginToken}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"country\": \"{{countryfooter}}\",\r\n    \"zipCode\": \"{{postCode}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses/validation",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses",
								"validation"
							]
						},
						"description": "EC1A 7DH, EC1M 7AA, EC1Y 8AA -> london,\r\nEH1 2JN, EH1 1PD  -> Edinburgh,\r\nL7 5NF  -> Liverpool"
					},
					"response": []
				},
				{
					"name": "Update Address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var  timestamp  = moment().format(\"DD_MM_YYYY__hh_mm_ss\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"pm.variables.set(\"additionalAddressInfo\", timestamp); \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "ccp-login-token={{ccp-login-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{addressId}}\",\n  \"label\": \"Main\",\n  \"title\": \"{{title}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"localFirstName\": null,\n  \"lastName\": \"{{lastName}}\",\n  \"localLastName\": null,\n  \"localFullName\": null,\n  \"companyName\": null,\n  \"townChomeBanchiBango\": null,\n  \"streetNumber\": \"569\",\n  \"streetName\": \"5th Ave\",\n  \"additionalInformation\": \"{{additionalAddressInfo}}\",\n  \"building\": null,\n  \"flatFloorBlock\": null,\n  \"district\": \"New York\",\n  \"stateCode\": \"NY\",\n  \"stateName\": null,\n  \"jurisdictionCode\": \"NY1001700\",\n  \"poBox\": null,\n  \"zipCode\": \"{{postCode}}\",\n  \"city\": \"{{city}}\",\n  \"country\": \"{{countryfooter}}\",\n  \"phoneNumber\": \"{{phoneNumber}}\",\n  \"mobileNumber\": null,\n  \"boutiqueCode\": \"{{boutiqueCode}}\",\n  \"defaultAddress\": false,\n  \"websiteCountry\": \"{{countryfooter}}\"\n}"
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses/{{addressId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses",
								"{{addressId}}"
							]
						},
						"description": "Add new address"
					},
					"response": []
				},
				{
					"name": "Add New Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"const moment = require('moment');\r",
									"var  timestamp  = moment().format(\"DD_MM_YYYY__hh_mm_ss\");\r",
									"\r",
									"pm.variables.set(\"additionalAddressInfo\", timestamp);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "ccp-login-token={{ccp-login-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"label\": null,\n  \"title\": \"0001\",\n  \"firstName\": \"{{firstName}}\",\n  \"localFirstName\": null,\n  \"lastName\": \"{{lastName}}\",\n  \"localLastName\": null,\n  \"localFullName\": null,\n  \"companyName\": null,\n  \"townChomeBanchiBango\": null,\n  \"streetNumber\": \"1\",\n  \"streetName\": \"{{address}}\",\n  \"additionalInformation\": \"{{additionalAddressInfo}}\",\n  \"building\": null,\n  \"flatFloorBlock\": null,\n  \"district\": null,\n  \"stateCode\": null,\n  \"stateName\": null,\n  \"jurisdictionCode\": null,\n  \"poBox\": null,\n  \"zipCode\": \"{{postCode}}\",\n  \"city\": \"{{city}}\",\n  \"country\": \"{{countryfooter}}\",\n  \"phoneNumber\": \"{{phoneNumber}}\",\n  \"mobileNumber\": null,\n  \"boutiqueCode\": \"{{boutiqueCode}}\",\n  \"defaultAddress\": false\n}"
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses"
							]
						},
						"description": "Add new address"
					},
					"response": []
				},
				{
					"name": "Check that the new address was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"var numberAddress;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"    numberAddress = jsonData.length;\r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Addresses list contains: \" + jsonData.length + \" address(s)\", function () {\r",
									"            pm.expect(jsonData[jsonData.length - 1].id).not.eql(null);\r",
									"            pm.expect(jsonData.length).eql(pm.environment.get(\"numberAddress\") + 1); \r",
									"            pm.environment.set(\"numberAddress\", jsonData.length);  \r",
									"            pm.environment.set(\"addressId\", jsonData[jsonData.length - 1].id);\r",
									"        });        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var country = pm.iterationData.get(\"countryfooter\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "ccp-login-token={{ccp-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses?country={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								}
							]
						},
						"description": "Get list of addresses"
					},
					"response": []
				},
				{
					"name": "Delete Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var addressId = pm.environment.get(\"addressId\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "ccp-login-token={{ccp-login-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses/{{addressId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses",
								"{{addressId}}"
							]
						},
						"description": "Add new address"
					},
					"response": []
				},
				{
					"name": "Check that the address is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData;\r",
									"var numberAddress;\r",
									"var addressId = pm.environment.get(\"addressId\");\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"    numberAddress = jsonData.length;\r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {\r",
									"        jsonMessage = JSON.parse(responseBody.message);\r",
									"        console.log(jsonMessage);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    try {\r",
									"        pm.test(\"Address wich id: \" + addressId + \" was deleted.\" + \" Addresses list contains: \" + jsonData.length + \" address(s)\", function () {\r",
									"            for (i = 0; i<jsonData.length;i++)\r",
									"            {\r",
									"                if(jsonData[i].id == addressId){\r",
									"                    pm.expect(jsonData[i].id).eql(null);\r",
									"                    return false;\r",
									"                }                    \r",
									"            }\r",
									"        });\r",
									"        \r",
									"    }\r",
									"    catch (e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-token}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/addresses?country={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"addresses"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								}
							]
						},
						"description": "Get list of addresses"
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "005 - Check Service Order Details and Documents",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"email_main_user\");",
									"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "getServiceOrderConfigurationByBrand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
									"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
									"pm.globals.get(\"ccp-login-token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthConfiguration}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"configuration",
								"v1",
								"configuration",
								"service-order",
								"{{brand}}",
								"{{websiteCountry}}"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Service Orders for a given customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service-Order list contains: \"  + jsonData.length + \" service-order(s)\", function () {    \r",
									"            // Check the first item       \r",
									"            pm.expect(jsonData[0].identifier).not.eql(null);              \r",
									"            pm.expect(jsonData[0].createDate).not.eql(null);   \r",
									"            pm.expect(jsonData[0].serialNumber).not.eql(null); \r",
									"            pm.expect(jsonData[0].productTitle).not.eql(null);   \r",
									"            pm.expect(jsonData[0].status).not.eql(null);  \r",
									"            // Check the last item  \r",
									"            if(jsonData.length>1){\r",
									"                pm.expect(jsonData[jsonData.length-1].identifier).not.eql(null);              \r",
									"                pm.expect(jsonData[jsonData.length-1].createDate).not.eql(null);   \r",
									"                pm.expect(jsonData[jsonData.length-1].serialNumber).not.eql(null); \r",
									"                pm.expect(jsonData[jsonData.length-1].productTitle).not.eql(null);   \r",
									"                pm.expect(jsonData[jsonData.length-1].status).not.eql(null);\r",
									"            }        \r",
									"            console.log(jsonData.length);             \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search ServiceOrder By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
									"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);             \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null);   \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var encoddedEmail = pm.environment.get(\"encoddedEmail\");\r",
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/search/{{serviceOrderId}}?websiteCountry={{countryfooter}}&email={{encoddedEmail}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"search",
								"{{serviceOrderId}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								},
								{
									"key": "email",
									"value": "{{encoddedEmail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
									"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);  \r",
									"            //pm.expect(responseJson.preregistrationId).to.eql(pm.environment.get(\"preregistrationId\")); \r",
									"            //pm.expect(responseJson.preregistrationId).not.eql(null); \r",
									"            //pm.expect(responseJson.requestDate).not.eql(null); \r",
									"            pm.expect(responseJson.boutiqueCode).not.eql(null); \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null); \r",
									"            //pm.expect(responseJson.warrantDate).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).to.be.a(\"number\");\r",
									"            pm.expect(responseJson.estimate.status).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.estimateLines[0]).not.eql(null); \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrserId = pm.iterationData.get(\"serviceOrderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the List of all documents of the service order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var documentsCount;\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"    documentsCount = jsonData.length\r",
									"    \r",
									"    if (responseCode.code !== 200) {\r",
									"        try {        \r",
									"            jsonMessage = JSON.parse(responseBody.message);  \r",
									"            console.log(jsonMessage);      \r",
									"        }\r",
									"        catch(e) {\r",
									"            console.log(e);\r",
									"        }\r",
									"        return;\r",
									"    }\r",
									"    else {\r",
									"        try {    \r",
									"            pm.test(\"Service order contains \"  + documentsCount + \"document(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
									"                \r",
									"                pm.expect(jsonData[0].name).not.eql(null);  \r",
									"                pm.expect(jsonData[0].size).not.eql(null); \r",
									"                pm.expect(jsonData[0].type).not.eql(null);  \r",
									"            });   \r",
									"        }\r",
									"        catch(e) {\r",
									"            console.log(e);     \r",
									"            pm.test(\"Fail expected document\", function () {\r",
									"                pm.expect(pm.response.text()).to.include(\".pdf\");\r",
									"            });       \r",
									"        }\r",
									"        return; \r",
									"    }\r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"serviceOrderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{serviceOrderId}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"document",
								"{{brand}}",
								"{{serviceOrderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "006 - Get Service Order Workflow",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"email_main_user\");",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBoutiqueInformation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var boutiqueCode = pm.iterationData.get(\"boutiqueCode\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"The boutique  with code \" + jsonData.code + \" is \" + jsonData.label + \", \" + jsonData.address.address + \", \" + jsonData.address.state + \", \" + jsonData.address.country , function () {   \r",
									"            pm.expect(jsonData.label).not.eql(null);   \r",
									"            pm.expect(jsonData.code).eql(pm.iterationData.get(\"boutiqueCode\"));             \r",
									"            pm.expect(jsonData.address.country).eql(pm.iterationData.get(\"countryfooter\"));    \r",
									"            pm.expect(jsonData.address.address).not.eql(null);             \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "boutiqueCode",
									"value": "{{boutiqueCode}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/boutique/{{brand}}/{{boutiqueCode}}?websiteCountry={{countryfooter}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"boutique",
								"{{brand}}",
								"{{boutiqueCode}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getServiceOrderWorkflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    setTimeout(function(){\r",
									"        console.log(\"Sleeping for 5 seconds before next request.\");\r",
									"    },3000); \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order workflow with current status: \" + jsonData.current.status + \" exists\", function () {  \r",
									"            //pm.response.to.not.be.error;            \r",
									"            //pm.response.to.not.have.jsonBody('error');  \r",
									"\r",
									"            pm.expect(jsonData.current.status).not.eql(null);          \r",
									"            pm.expect(jsonData.current.subStep).not.eql(null); \r",
									"            pm.expect(jsonData.current.mainStep).not.eql(null); \r",
									"\r",
									"            if (jsonData.future.length > 1)            {\r",
									"                pm.expect(jsonData.future[0].mainStep).not.eql(null);   \r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                pm.expect(jsonData.future.status).not.eql(null);   \r",
									"            } \r",
									"            if (jsonData.past.length > 1)\r",
									"            {\r",
									"                pm.expect(jsonData.past[0].status).not.eql(null);          \r",
									"                pm.expect(jsonData.past[0].subStep).not.eql(null); \r",
									"                pm.expect(jsonData.past[0].mainStep).not.eql(null);\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                pm.expect(jsonData.past.status).not.eql(null);          \r",
									"                pm.expect(jsonData.past.subStep).not.eql(null); \r",
									"                pm.expect(jsonData.past.mainStep).not.eql(null); \r",
									"            }            \r",
									"\r",
									"            //pm.expect(jsonData.serviceOrder.boutiqueCode).not.eql(null); \r",
									"            pm.expect(jsonData.serviceOrder.createDate).not.eql(null);  \r",
									"            pm.expect(jsonData.serviceOrder.identifier).not.eql(null); \r",
									"            //pm.expect(jsonData.serviceOrder.serialNumber).not.eql(null);                   \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"var language = pm.iterationData.get(\"language\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-login-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/ecs-workflow/v1/workflow/{{brand}}/{{serviceOrderId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"ecs-workflow",
								"v1",
								"workflow",
								"{{brand}}",
								"{{serviceOrderId}}"
							],
							"query": [
								{
									"key": "websiteCountry",
									"value": "{{countryfooter}}"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requests for eCS preregistration"
		},
		{
			"name": "007 - Check Service Order with Registration Status",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"eemail_main_user\");",
									"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First In Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusInRegistration = pm.environment.get(\"statusInRegistration\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order In Registration found with status: \" + statusInRegistration, function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusInRegistration){\r",
									"            pm.environment.set(\"serviceOrderInRegistration\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID & check its details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderInRegistration\") + \" In Registration is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            pm.expect(responseJson.identifier).eql(pm.environment.get(\"serviceOrderInRegistration\"));  \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null);          \r",
									"            pm.expect(responseJson.typeOfSite).not.eql(null); \r",
									"            pm.expect(responseJson.productTitle).not.eql(null); \r",
									"            pm.expect(responseJson.createDate).not.eql(null); \r",
									"                       \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderInRegistration = pm.environment.get(\"serviceOrderInRegistration\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderInRegistration}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderInRegistration}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "008 - Check Service Order In Diagnosis",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"eemail_main_user\");",
									"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First In Diagnosis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusInDiagnosis = pm.environment.get(\"statusInDiagnosis\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order In Diagnosis found\", function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusInDiagnosis){\r",
									"            pm.environment.set(\"serviceOrderInDiagnosis\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID & check its details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderInDiagnosis\") + \" In Diagnosis is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            pm.expect(responseJson.identifier).eql(pm.environment.get(\"serviceOrderInDiagnosis\"));  \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null);          \r",
									"            pm.expect(responseJson.typeOfSite).not.eql(null); \r",
									"            pm.expect(responseJson.productTitle).not.eql(null); \r",
									"            pm.expect(responseJson.createDate).not.eql(null); \r",
									"                       \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderInDiagnosis = pm.environment.get(\"serviceOrderInDiagnosis\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderInDiagnosis}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderInDiagnosis}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "009 - Decline Cost Estimate WAIT_FOR_APPROVAL",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"emailUser_ToDeclineCostEstimate\");",
									"var encoddedEmail = pm.iterationData.get(\"emailUser_ToDeclineCostEstimate\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUserSceOrder = pm.iterationData.get(\"emailUserSceOrder\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_ToDeclineCostEstimate}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First WAIT_FOR_APPROVAL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusWaitForApproval = pm.environment.get(\"statusWaitForApproval\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order with cost estimate to accept is ready to be activated\", function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusWaitForApproval){\r",
									"            pm.environment.set(\"serviceOrderIdWithReadyCostEstimate\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\"));            \r",
									"            //pm.expect(responseJson.preregistrationId).to.eql(pm.environment.get(\"preregistrationId\")); \r",
									"            //pm.expect(responseJson.preregistrationId).not.eql(null); \r",
									"            //pm.expect(responseJson.requestDate).not.eql(null); \r",
									"            pm.expect(responseJson.boutiqueCode).not.eql(null); \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null); \r",
									"            //pm.expect(responseJson.warrantDate).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).to.be.a(\"number\");\r",
									"            pm.expect(responseJson.estimate.status).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.estimateLines[0]).not.eql(null); \r",
									"            \r",
									"            pm.environment.set(\"costEstimateNumber\", responseJson.estimate.costEstimateNumber);  \r",
									"            pm.environment.set(\"amountNet\", responseJson.estimate.estimateLines[0].amountNet);  \r",
									"            pm.environment.set(\"amountTax\", responseJson.estimate.estimateLines[0].amountTax);  \r",
									"            pm.environment.set(\"lineNumber\", responseJson.estimate.estimateLines[0].lineNumber); \r",
									"            \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find cost estimate document by service order id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {            \r",
									"        pm.test(\"Cost Estimate document found\", function () {\r",
									"            pm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
									"            let headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
									"            pm.expect(headerContentDisposition).to.include(\"filename=\");  \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}/estimate",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"document",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}",
								"estimate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decline Cost Estimate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");\r",
									"\r",
									"pm.test('Cost estimate declined: ' + serviceOrderIdWithReadyCostEstimate, function () {\r",
									"    setTimeout(function(){\r",
									"                    console.log(\"Sleeping for 10 seconds before next request.\");\r",
									"            }, 10000);\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");\r",
									"var costEstimateNumber = pm.environment.get(\"costEstimateNumber\");\r",
									"var lineNumber = pm.environment.get(\"lineNumberr\");\r",
									"var amountNet = pm.environment.get(\"amountNet\");\r",
									"var amountTax = pm.environment.get(\"amountTax\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"costEstimateNumber\":{{costEstimateNumber}},\r\n  \"status\": \"REJECTED\",\r\n  \"estimateLines\": [\r\n    {\r\n      \"lineNumber\": {{lineNumber}},\r\n        \"description\": \"Battery service\",\r\n        \"amountNet\": {{amountNet}},\r\n        \"amountTax\": {{amountTax}},\r\n        \"status\": \"REJECTED\",\r\n        \"type\": \"MANDATORY\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/cost-estimate/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"cost-estimate",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that Cost Estimate was Rejected &  Status was updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"var statusCostEstimateDeclined = pm.environment.get(\"statusCostEstimateDeclined\");\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\"));            \r",
									"            pm.expect(responseJson.status).eql(statusCostEstimateDeclined); \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderIdWithReadyCostEstimatet = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "010 - Accept Cost Estimate WAIT_FOR_APPROVAL",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"emailUser_ToAcceptCostEstimate\");",
									"var encoddedEmail = pm.iterationData.get(\"emailUser_ToAcceptCostEstimate\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUser_ToAcceptCostEstimate = pm.iterationData.get(\"emailUser_ToAcceptCostEstimate\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_ToAcceptCostEstimate}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First WAIT_FOR_APPROVAL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusWaitForApproval = pm.environment.get(\"statusWaitForApproval\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order with cost estimate to accept is ready to be activated\", function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusWaitForApproval){\r",
									"            pm.environment.set(\"serviceOrderIdWithReadyCostEstimate\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\"));            \r",
									"            //pm.expect(responseJson.preregistrationId).to.eql(pm.environment.get(\"preregistrationId\")); \r",
									"            //pm.expect(responseJson.preregistrationId).not.eql(null); \r",
									"            //pm.expect(responseJson.requestDate).not.eql(null); \r",
									"            pm.expect(responseJson.boutiqueCode).not.eql(null); \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null); \r",
									"            //pm.expect(responseJson.warrantDate).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.costEstimateNumber).to.be.a(\"number\");\r",
									"            pm.expect(responseJson.estimate.status).not.eql(null); \r",
									"            pm.expect(responseJson.estimate.estimateLines[0]).not.eql(null); \r",
									"            \r",
									"            pm.environment.set(\"costEstimateNumber\", responseJson.estimate.costEstimateNumber);  \r",
									"            pm.environment.set(\"amountNet\", responseJson.estimate.estimateLines[0].amountNet);  \r",
									"            pm.environment.set(\"amountTax\", responseJson.estimate.estimateLines[0].amountTax);  \r",
									"            pm.environment.set(\"lineNumber\", responseJson.estimate.estimateLines[0].lineNumber); \r",
									"            pm.environment.set(\"currency\", responseJson.estimate.currency); \r",
									"            pm.environment.set(\"descriptionEstimatelines\", responseJson.estimate.estimateLines[0].description);\r",
									"            pm.environment.set(\"typeEstimatelines\", responseJson.estimate.estimateLines[0].type);  \r",
									"            pm.environment.set(\"categoryEstimatelines\", responseJson.estimate.estimateLines[0].category);              \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find cost estimate document by service order id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {            \r",
									"        pm.test(\"Cost Estimate document found\", function () {\r",
									"            pm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
									"            let headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
									"            pm.expect(headerContentDisposition).to.include(\"filename=\");  \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}/estimate",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"document",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}",
								"estimate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Cost Estimate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");\r",
									"\r",
									"pm.test('Cost estimate accepted: ' + serviceOrderIdWithReadyCostEstimate, function () {\r",
									"    setTimeout(function(){\r",
									"         console.log(\"Sleeping for 10 seconds before next request.\");\r",
									"    }, 10000);\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");\r",
									"var costEstimateNumber = pm.environment.get(\"costEstimateNumber\");\r",
									"var lineNumber = pm.environment.get(\"lineNumberr\");\r",
									"var amountNet = pm.environment.get(\"amountNet\");\r",
									"var amountTax = pm.environment.get(\"amountTax\");\r",
									"var descriptionEstimatelines = pm.environment.get(\"descriptionEstimatelines\");\r",
									"var typeEstimatelines = pm.environment.get(\"typeEstimatelines\");\r",
									"var currency = pm.environment.get(\"currency\");\r",
									"var categoryEstimatelines = pm.environment.get(\"categoryEstimatelines\");\r",
									"pm.variables.set(\"currency\", currency);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"estimateLines\": [\r\n    {\r\n      \"lineNumber\": {{lineNumber}},\r\n      \"description\": \"{{descriptionEstimatelines}}\",\r\n      \"amountNet\": {{amountNet}},\r\n      \"amountTax\": {{amountTax}},\r\n      \"status\": \"ACCEPTED\",\r\n      \"type\": \"{{typeEstimatelines}}\",\r\n      \"category\": \"{{categoryEstimatelines}}\",\r\n      \"discounts\": [],\r\n      \"subEstimateLines\": [],\r\n      \"subOptions\": []\r\n    }\r\n  ],\r\n  \"currency\": \"{{currency}}\",\r\n  \"costEstimateNumber\": {{costEstimateNumber}},\r\n  \"status\": \"ACCEPTED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/cost-estimate/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"cost-estimate",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check That  Cost Estimate was Accepted & the Status updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"var statusCostEstimateAccepted = pm.environment.get(\"statusCostEstimateAccepted\");\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\"));            \r",
									"            pm.expect(responseJson.status).eql(statusCostEstimateAccepted); \r",
									"            \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderIdWithReadyCostEstimate = pm.environment.get(\"serviceOrderIdWithReadyCostEstimate\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWithReadyCostEstimate}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWithReadyCostEstimate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "011 - Check Service Order In Repair",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"eemail_main_user\");",
									"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First In Repair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusInRepair = pm.environment.get(\"statusInRepair\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order In Repair found with status: \" + statusInRepair, function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusInRepair){\r",
									"            pm.environment.set(\"serviceOrderInRepair\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID & check its details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"/*\r",
									"const Ajv = require('ajv');\r",
									"const jsonValidator = new Ajv({logger: console});\r",
									"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
									"\r",
									"pm.test('Service Order Json response body Schema is valid', function () {\r",
									"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
									"});\r",
									"*/\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderInRepair\") + \" In Repair is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            pm.expect(responseJson.identifier).eql(pm.environment.get(\"serviceOrderInRepair\"));  \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null);          \r",
									"            pm.expect(responseJson.typeOfSite).not.eql(null); \r",
									"            pm.expect(responseJson.productTitle).not.eql(null); \r",
									"            pm.expect(responseJson.createDate).not.eql(null); \r",
									"                       \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderInRepair = pm.environment.get(\"serviceOrderInRepair\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderInRepair}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderInRepair}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "012 - Check Service Order Waiting For Collection",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"eemail_main_user\");",
									"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
									"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
									"",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var email_main_user = pm.iterationData.get(\"email_main_user\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
									"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
									"",
									"pm.environment.set(\"preregistrationId\", preregistrationId);",
									"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{email_main_user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First Waiting for collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusWaitingForCollection = pm.environment.get(\"statusWaitingForCollection\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err);\r",
									"}\r",
									"pm.test(\"Service order In Registration found with status: \" + statusWaitingForCollection, function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusWaitingForCollection){\r",
									"            pm.environment.set(\"serviceOrderWaitingForCollection\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                    \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID & check its details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderWaitingForCollection\") + \" In Registration is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            pm.expect(responseJson.identifier).eql(pm.environment.get(\"serviceOrderWaitingForCollection\"));  \r",
									"            pm.expect(responseJson.serialNumber).not.eql(null);          \r",
									"            pm.expect(responseJson.typeOfSite).not.eql(null); \r",
									"            pm.expect(responseJson.productTitle).not.eql(null); \r",
									"            pm.expect(responseJson.createDate).not.eql(null); \r",
									"                       \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderWaitinngForCollection = pm.environment.get(\"serviceOrderWaitinngForCollection\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderWaitingForCollection}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderWaitingForCollection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "013 - Create Payment and check payment documents",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"emailUser_UsedForPayment\");",
									"var isPaymentActivated = pm.iterationData.get(\"isPaymentActivated\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var country = pm.iterationData.get(\"countryfooter\");",
									"var environment = pm.iterationData.get(\"environment\");",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken); ",
									"",
									"            if(!isPaymentActivated){",
									"                console.log(\"The payment is not activated for the brand: \" + brand + \", \" + \"country: \" + country +  \", \" +  \"environment: \" + environment);",
									"                postman.setNextRequest(\"Logout-User-with-SO-Wait-For-Payment\");",
									"            }            ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUser_UsedForPayment = pm.iterationData.get(\"emailUser_UsedForPayment\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_UsedForPayment}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Orders & Get First WAIT_FOR_PAYMENT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusWaitForPayment = pm.environment.get(\"statusWaitForPayment\");\r",
									"var jsonData; \r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order wait for payment is avalable to be done\", function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusWaitForPayment){\r",
									"            pm.environment.set(\"serviceOrderIdWaitForPayment\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                  \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"var totalAmount = \"0.0\" ;\r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWaitForPayment\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.environment.set(\"costEstimateNumber\", responseJson.estimate.costEstimateNumber);  \r",
									"            pm.environment.set(\"amountNet\", responseJson.estimate.estimateLines[0].amountNet);  \r",
									"            pm.environment.set(\"amountTax\", responseJson.estimate.estimateLines[0].amountTax);  \r",
									"            pm.environment.set(\"lineNumber\", responseJson.estimate.estimateLines[0].lineNumber); \r",
									"            totalAmount = Number(pm.environment.get(\"amountNet\")) + Number(pm.environment.get(\"amountTax\"));\r",
									"            pm.environment.set(\"totalAmount\",totalAmount);  \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var serviceOrderIdWaitForPayment = pm.environment.get(\"serviceOrderIdWaitForPayment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWaitForPayment}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWaitForPayment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var serviceOrderIdWaitForPayment = pm.environment.get(\"serviceOrderIdWaitForPayment\");\r",
									"var creditCardType = pm.iterationData.get(\"creditCardType\");\r",
									"var swsePaymentReturnCode = pm.iterationData.get(\"swsePaymentReturnCode\");\r",
									"var paymentErrors = pm.iterationData.get(\"paymentErrors\");\r",
									"\r",
									"try {\r",
									"    jsonData = pm.response.json();     \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test.skip(\"Payment created \", function () {  \r",
									"            pm.expect(jsonData.errors).eql(paymentErrors);           \r",
									"            pm.expect(jsonData.swseReturnCode).eql(swsePaymentReturnCode);  \r",
									"            pm.expect(jsonData.paymentRequest.serviceOrderNumber).eql(serviceOrderIdWaitForPayment);\r",
									"            pm.expect(jsonData.cardDetails.creditCardType).eql(creditCardType);  \r",
									"            setTimeout(function(){\r",
									"                console.log(\"Sleeping for 10 seconds before next request.\");\r",
									"            }, 10000);        \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Env. varaiables\r",
									"//var serviceOrderIdWaitForPayment = pm.environment.get(\"serviceOrderIdWaitForPayment\");\r",
									"var statusWaitForPayment = pm.environment.get(\"statusWaitForPayment\");\r",
									"var totalAmount = pm.environment.get(\"totalAmount\");\r",
									"\r",
									"// data drive varaiables\r",
									"var currency = pm.iterationData.get(\"currency\");\r",
									"var creditCardType = pm.environment.get(\"creditCardType\");\r",
									"var creditCardNumber = pm.iterationData.get(\"creditCardNumber\");\r",
									"var expirationDate = pm.iterationData.get(\"expirationDate\");\r",
									"var createDateCard = pm.iterationData.get(\"createDateCard\");\r",
									"var deliveryType = pm.iterationData.get(\"deliveryType\");\r",
									"var cvvCode = pm.iterationData.get(\"cvvCode\");\r",
									"var nameOnCard = pm.iterationData.get(\"nameOnCard\");\r",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
									"var brand = pm.iterationData.get(\"brand\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"createDate\": \"{{createDateCard}}\",\n  \"serviceOrderNumber\": \"{{serviceOrderIdWaitForPayment}}\",\n  \"country\": \"{{countryfooter}}\",\n  \"language\": \"{{language}}\",\n  \"cardDetails\": {\n    \"creditCardNumber\": \"{{creditCardNumber}}\",\n    \"expirationDate\": \"{{expirationDate}}\",\n    \"cvvCode\": \"{{cvvCode}}\",\n    \"nameOnCard\": \"{{nameOnCard}}\",\n    \"creditCardType\": \"{{creditCardType}}\"\n  },\n  \"orderDetails\": {\n    \"orderStatus\": \"{{statusWaitForPayment}}\",\n    \"totalAmount\": \"{{totalAmount}}\",\n    \"deliveryType\": \"{{deliveryType}}\",\n    \"currency\": \"{{currency}}\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{ServerModifier}}/payment-order/v1/payment-order/{{brand}}/card",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"payment-order",
								"v1",
								"payment-order",
								"{{brand}}",
								"card"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that payment was done & the Status was updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson; \r",
									"var statusToBeShipped = pm.environment.get(\"statusToBeShipped\");\r",
									"try {\r",
									"    responseJson = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test.skip(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderIdWaitForPayment\") + \" is present\", function () {  \r",
									"            pm.response.to.not.be.error;            \r",
									"            pm.response.to.not.have.jsonBody('error');\r",
									"            \r",
									"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderIdWaitForPayment\"));\r",
									"            pm.expect(responseJson.status).eql(statusToBeShipped); \r",
									"        });          \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									"\r",
									"var brand = pm.iterationData.get(\"brand\");\r",
									"var serviceOrderIdWaitForPayment = pm.environment.get(\"serviceOrderIdWaitForPayment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-login-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderIdWaitForPayment}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}",
								"{{serviceOrderIdWaitForPayment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout-User-with-SO-Wait-For-Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "014 - Check Payment details & documents (ServiceOrder status  To Be Shiped)",
			"item": [
				{
					"name": "Login  user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var userMail = pm.iterationData.get(\"emailUserWithPaymentDone\");",
									"var isPaymentActivated = pm.iterationData.get(\"isPaymentActivated\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var country = pm.iterationData.get(\"countryfooter\");",
									"var environment = pm.iterationData.get(\"environment\");",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);   ",
									"",
									"            if(!isPaymentActivated){",
									"                console.log(\"The payment is not activated for the brand: \" + brand + \", \" + \"country: \" + country +  \", \" +  \"environment: \" + environment);",
									"                postman.setNextRequest(\"Logout-User-with-SO-To-Be-Shipped\");",
									"            }           ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var emailUser_ProductToBeShipped = pm.iterationData.get(\"emailUser_ProductToBeShipped\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var countryfooter = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{emailUser_ProductToBeShipped}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Service Order With a Payment Done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");\r",
									"pm.globals.get(\"ccp-login-token\");\r",
									"pm.globals.get(\"ccp-token\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var statusToBeShipped = pm.environment.get(\"statusToBeShipped\");\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"pm.test(\"Service order wait for payment is avalable to be done\", function () {     \r",
									"    for (i = 0; i<jsonData.length;i++)\r",
									"    {\r",
									"        if(jsonData[i].status == statusToBeShipped){\r",
									"            pm.environment.set(\"sceOrderIdWithPaymentDone\", jsonData[i].identifier);\r",
									"            console.log(jsonData[i].identifier); \r",
									"            return jsonData[i].identifier;\r",
									"        }                  \r",
									"    }                       \r",
									" });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthEcs}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"service-order",
								"{{brand}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find letter document by service order id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Letter document found\", function () {  \r",
									"\tpm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
									"\tlet headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
									"\tpm.expect(headerContentDisposition).to.include(\"filename=Letter\"); \r",
									"}); \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var sceOrdId = pm.environment.get(\"sceOrderIdWithPaymentDone\");\r",
									"pm.variables.set(\"sceOrdId\", sceOrdId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{sceOrdId}}/letter",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"document",
								"{{brand}}",
								"{{sceOrdId}}",
								"letter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find invoice document by service order id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Invoice document found\", function () {  \r",
									"\tpm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
									"\tlet headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
									"\tpm.expect(headerContentDisposition).to.include(\"filename=Invoice\"); \r",
									"}); \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var sceOrdId = pm.environment.get(\"sceOrderIdWithPaymentDone\");\r",
									"pm.variables.set(\"sceOrdId\", sceOrdId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{sceOrdId}}/invoice",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"service-order",
								"v1",
								"document",
								"{{brand}}",
								"{{sceOrdId}}",
								"invoice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Service Order's Shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var sceOrdId = pm.iterationData.get(\"sceOrderIdWithPaymentDone\");\r",
									"pm.variables.set(\"sceOrdId\", sceOrdId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthEcs}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/api/service-order/service-order/{{sceOrdId}}/shipping-address",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"api",
								"service-order",
								"service-order",
								"{{sceOrdId}}",
								"shipping-address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout-User-with-SO-To-Be-Shipped",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.set(\"ccp-login-token\", null);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "zu;[t8sKY?hssR8F",
									"type": "string"
								},
								{
									"key": "username",
									"value": "internal",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-login-token={{ccp-login-token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "popImage",
			"value": "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",
			"disabled": true
		},
		{
			"key": "equipmentUid",
			"value": "43008f05-1f4f-4deb-97c0-10fd29d40cbe",
			"disabled": true
		},
		{
			"key": "email",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "countryfooter",
			"value": "US",
			"disabled": true
		},
		{
			"key": "language",
			"value": "en-us",
			"disabled": true
		},
		{
			"key": "password",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "optIn",
			"value": "true",
			"disabled": true
		},
		{
			"key": "callbackUrl",
			"value": "/portfolio/success",
			"disabled": true
		},
		{
			"key": "titleNew",
			"value": "MR",
			"disabled": true
		},
		{
			"key": "firstnameNew",
			"value": "Test",
			"disabled": true
		},
		{
			"key": "lastnameNew",
			"value": "Test Automation 9008",
			"disabled": true
		},
		{
			"key": "lastname2New",
			"value": "Api",
			"disabled": true
		},
		{
			"key": "emailNew",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "optInNew",
			"value": "true",
			"disabled": true
		},
		{
			"key": "passwordNew",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "countryofresidenceNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "weblanguageNew",
			"value": "en",
			"disabled": true
		},
		{
			"key": "genderNew",
			"value": "0001",
			"disabled": true
		},
		{
			"key": "countryfooterNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "lastNameNew",
			"value": "Test Automation 9006",
			"disabled": true
		},
		{
			"key": "emailTokenConfirmation",
			"value": "767c2e3e-1cf3-4548-8c21-21eb3d468694",
			"disabled": true
		},
		{
			"key": "schemaLogin",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"token\": {\n      \"type\": \"string\"\n    },\n    \"ccpToken\": {\n      \"type\": \"string\"\n    },\n    \"expiresIn\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"token\",\n    \"ccpToken\",\n    \"expiresIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaCurrentCustomer",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"uid\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"phoneNumber\": {\n      \"type\": \"string\"\n    },\n    \"gender\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"country\": {\n      \"type\": \"string\"\n    },\n    \"language\": {\n      \"type\": \"string\"\n    },\n    \"creationDate\": {\n      \"type\": \"string\"\n    },\n    \"optIn\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"customerNumber\",\n    \"uid\",\n    \"email\",    \n    \"gender\",\n    \"title\",\n    \"firstName\",\n    \"lastName\",\n    \"country\",\n    \"language\",\n    \"creationDate\",\n    \"optIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaPreRegistration",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productType\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"isServiceKitNeeded\": {\n      \"type\": \"boolean\"\n    },\n    \"isSameAddress\": {\n      \"type\": \"boolean\"\n    },\n    \"deliveryBillingAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"serviceKitAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"requestDate\": {\n      \"type\": \"null\"\n    },\n    \"repairOrder\": {\n      \"type\": \"null\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"updateDate\": {\n      \"type\": \"string\"\n    },\n    \"fileSize\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"serialNumber\",\n    \"productType\",\n    \"productTitle\",\n    \"customerNumber\",\n    \"description\",\n    \"status\",\n    \"isServiceKitNeeded\",\n    \"isSameAddress\",\n    \"deliveryBillingAddress\",\n    \"serviceKitAddress\",\n    \"requestDate\",\n    \"repairOrder\",\n    \"createDate\",\n    \"updateDate\",\n    \"fileSize\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaServiceOrder",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"shipExpectedDate\": {\n      \"type\": \"null\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"typeOfSite\": {\n      \"type\": \"string\"\n    },\n    \"preregistrationId\": {\n      \"type\": \"null\"\n    },\n    \"customerNumber\": {\n      \"type\": \"null\"\n    },\n    \"billingRequestNumber\": {\n      \"type\": \"null\"\n    },\n    \"requestDate\": {\n      \"type\": \"string\"\n    },\n    \"warrantyDate\": {\n      \"type\": \"null\"\n    },\n    \"warrantyType\": {\n      \"type\": \"null\"\n    },\n    \"boutiqueCode\": {\n      \"type\": \"string\"\n    },\n    \"billingRequests\": {\n      \"type\": \"null\"\n    },\n    \"estimate\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"costEstimateNumber\": {\n          \"type\": \"integer\"\n        },\n        \"status\": {\n          \"type\": \"string\"\n        },\n        \"currency\": {\n          \"type\": \"string\"\n        },\n        \"orderReason\": {\n          \"type\": \"string\"\n        },\n        \"estimateLines\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"lineNumber\": {\n                  \"type\": \"integer\"\n                },\n                \"description\": {\n                  \"type\": \"string\"\n                },\n                \"amountNet\": {\n                  \"type\": \"number\"\n                },\n                \"amountTax\": {\n                  \"type\": \"number\"\n                },\n                \"status\": {\n                  \"type\": \"null\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"lineNumber\",\n                \"description\",\n                \"amountNet\",\n                \"amountTax\",\n                \"status\",\n                \"type\"\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"costEstimateNumber\",\n        \"status\",\n        \"currency\",\n        \"orderReason\",\n        \"estimateLines\"\n      ]\n    },\n    \"currency\": {\n      \"type\": \"null\"\n    },\n    \"validityPeriod\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"createDate\",\n    \"serialNumber\",\n    \"productTitle\",\n    \"shipExpectedDate\",\n    \"status\",\n    \"typeOfSite\",\n    \"preregistrationId\",\n    \"customerNumber\",\n    \"billingRequestNumber\",\n    \"requestDate\",\n    \"warrantyDate\",\n    \"warrantyType\",\n    \"boutiqueCode\",\n    \"billingRequests\",\n    \"estimate\",\n    \"currency\",\n    \"validityPeriod\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "emailUserPrereg",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "emailUserServiceOrder",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "preregistrationIdCol",
			"value": "13364543781",
			"disabled": true
		},
		{
			"key": "serviceOrderIdCol",
			"value": "11965360",
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": 1,
			"disabled": true
		},
		{
			"key": "emailNewUser",
			"value": "ric.uat.car%2BTestAutomation9007%40hotmail.com",
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": 1,
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": 1,
			"disabled": true
		},
		{
			"key": "brand",
			"value": "car"
		},
		{
			"key": "preregistrationCountCol",
			"value": 2
		}
	]
}