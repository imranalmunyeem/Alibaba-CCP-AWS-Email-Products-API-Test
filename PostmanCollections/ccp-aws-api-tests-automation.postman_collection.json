{
	"info": {
		"_postman_id": "0bd9a470-3e19-4f06-aac9-dd11458bf7d3",
		"name": "002-ccp-aws-api-tests CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - High risks tests",
			"item": [
				{
					"name": "1.1 - Customer Microservice",
					"item": [
						{
							"name": "1.1.1 - Login and check  user details",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var email = pm.iterationData.get(\"email\");",
													"",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken); ",
													"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
													"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"/*",
													"// For data persistence for the regsiter endpoint, create new accounts",
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
													"",
													"var email = pm.environment.get(\"newAccountEmail\");",
													"var lastname = pm.environment.get(\"newAccountLastname\");",
													"",
													"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
													"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
													"*/",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var email = pm.iterationData.get(\"email\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var country = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Customer isConnected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-token={{ccp-token}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/connected",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"connected"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Current Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
													"",
													"pm.test('Current customer Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
													"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
													"            pm.expect(jsonData.uid).not.eql(null); ",
													"            pm.expect(jsonData.optIn).not.eql(null); ",
													"            pm.expect(jsonData.country).not.eql(null);      ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1.1.2 - Update Customer Informations",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var email = pm.iterationData.get(\"email\");",
													"",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken); ",
													"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
													"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"/*",
													"// For data persistence for the regsiter endpoint, create new accounts",
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
													"",
													"var email = pm.environment.get(\"newAccountEmail\");",
													"var lastname = pm.environment.get(\"newAccountLastname\");",
													"",
													"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
													"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
													"*/",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var emailUserToUpdate = pm.iterationData.get(\"emailUserToUpdate\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var country = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{emailUserToUpdate}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Current Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"firstNameUserToUpdate\", jsonData.firstName);",
													"    pm.environment.set(\"lastNameUserToUpdate\", jsonData.lastName); ",
													"});",
													"",
													"",
													"",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
													"",
													"pm.test('Current customer Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
													"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
													"            pm.expect(jsonData.uid).not.eql(null); ",
													"            pm.expect(jsonData.optIn).not.eql(null); ",
													"            pm.expect(jsonData.country).not.eql(null);                 ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (responseCode.code == 200) {\r",
													"    try {        \r",
													"        pm.test(\"Customer updated \", function () {   \r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
													"        });          \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var emailUserToUpdate = pm.environment.get(\"emailUserToUpdate\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var customerNumberOfUserToUpdate = pm.iterationData.get(\"customerNumberOfUserToUpdate\");\r",
													"var uidUserToUpdate = pm.iterationData.get(\"uidUserToUpdate\");\r",
													"\r",
													"const moment = require('moment');\r",
													"var  timestamp  = moment().format(\"DD_MM_YYYY__hh_mm_ss\");\r",
													"pm.environment.set(\"timestamp\", timestamp);\r",
													"\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"customerNumber\": {{customerNumberOfUserToUpdate}},\n  \"uid\": \"{{uidUserToUpdate}}\",\n  \"email\": \"{{emailUserToUpdate}}\",\n  \"gender\": \"{{gender}}\",\n  \"title\": \"{{title}}\",\n  \"firstName\": \"{{firstNameUserToUpdate}}\",\n  \"firstName2\": \"\",\n  \"lastName\": \"{{lastNameUserToUpdate}}\",\n  \"lastName2\": \"{{timestamp}}\",      \n  \"optIn\": true,\n  \"country\": \"{{countryfooter}}\",\n  \"language\": \"{{language}}\",\n  \"phoneNumberCountry\": \"{{countryfooter}}\",\n  \"phoneNumber\": \"\"\n}"
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change OptIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (responseCode.code == 200) {\r",
													"    try {        \r",
													"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optIn\"), function () {   \r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
													"        });          \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var optIn = pm.iterationData.get(\"optIn\");\r",
													"\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{optIn}}"
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"optin"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch Customer Country",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"token\":  \"{{ccp-login-token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/newcountry?newCountry=FR&language=fr&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"newcountry"
											],
											"query": [
												{
													"key": "newCountry",
													"value": "FR"
												},
												{
													"key": "language",
													"value": "fr"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1.1.3 - Create New Account",
							"item": [
								{
									"name": "Register New Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"mmss\");",
													"var idRandom = _.random(10, 99);",
													"//var  timestamp  = moment().format(\"DD_MM_YYYY__kk_mm_ss\");",
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"var environment = pm.iterationData.get(\"environment\");",
													"var standardEmail =  pm.iterationData.get(\"newAccountEmail\");",
													"var newAccountTitle = pm.iterationData.get(\"newAccountTitle\");",
													"var newAccountFirstname = pm.iterationData.get(\"newAccountFirstname\");",
													"var standardName = pm.iterationData.get(\"newAccountLastname\");",
													"var newAccountLastname2 = pm.iterationData.get(\"newAccountLastname2\");",
													"var newAccountpassword = pm.iterationData.get(\"newAccountpassword\");",
													"var newAccountcountryofresidence = pm.iterationData.get(\"newAccountcountryofresidence\");",
													"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");",
													"var newAccountGender = pm.iterationData.get(\"newAccountGender\");",
													"var newAccountCountryfooter = pm.iterationData.get(\"newAccountCountryfooter\");",
													"var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");",
													"var callbackUrAccountCreation = pm.environment.get(\"callbackUrAccountCreation\");",
													"var env;",
													"",
													"switch (environment) {",
													"  case \"quality\":",
													"    env = \"q\"; ",
													"    break;",
													"  case \"quality2\":",
													"    env = \"q\"; ",
													"    break;",
													"  case \"preprod\":",
													"    env = \"p\"; ",
													"    break;",
													"  case \"preprod2\":",
													"    env = \"p\";",
													"    break;  ",
													"  case \"dev\":",
													"    env = \"d\";",
													"    break; ",
													"  default:",
													"    tests[\"Sorry, No environment designed\"];",
													"}",
													"",
													"pm.environment.set(\"newAccountEmailCreated\", standardEmail.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter.toLowerCase()).replace(\"random\",idRandom));",
													"pm.environment.set(\"newAccountLastnameCreated\", standardName.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter.toLowerCase()).replace(\"random\",idRandom));",
													"",
													"var newAccountEmailCreated = pm.environment.get(\"newAccountEmailCreated\");",
													"var newAccountLastnameCreated = pm.environment.get(\"newAccountLastnameCreated\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var skipTest = true;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    setTimeout(function(){",
													"        console.log(\"Sleeping for 10 seconds before next request.\");",
													"    }, 10000);    ",
													"    skipTest = false;",
													"    pm.environment.set(\"skipTest\", skipTest);",
													"});",
													"",
													"",
													"if (responseCode.code == 200) {",
													"    try {        ",
													"        pm.test(\"New Account: \" + pm.environment.get(\"newAccountLastnameCreated\") + \" is created.\", function (){",
													"            var skipTest = true;",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);    ",
													"            //Update User data ",
													"            pm.environment.set(\"lastAccountCreatedEmail\", pm.environment.get(\"newAccountEmailCreated\")); ",
													"            var skipTest = false;",
													"            pm.environment.set(\"skipTest\", skipTest);",
													"            setTimeout(function(){",
													"                    console.log(\"Sleeping for 3 seconds before next request.\");",
													"            }, 15000);",
													"        });         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else{",
													"   console.log(\"Failed to create the New Account.\"); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"customerDetails\": {\n\t\t\"title\":\"{{newAccountTitle}}\",\n\t\t\"firstName\":\"{{newAccountFirstname}}\",\n\t\t\"lastName\":\"{{newAccountLastnameCreated}}\",\n\t\t\"lastName2\":\"{{newAccountLastname2}}\",\n\t\t\"email\":\"{{newAccountEmailCreated}}\",\n\t\t\"optIn\":{{newAccountOptIn}},\n\t\t\"password\":\"{{newAccountpassword}}\",\n\t\t\"country\":\"{{newAccountcountryofresidence}}\",\n\t\t\"language\":\"{{newAccountWeblanguage}}\",\n\t\t\"gender\":\"{{newAccountGender}}\"\n\t},\n\t\"callbackUrl\": \"{{callbackUrAccountCreation}}\",\n\t\"websiteCountry\" : \"{{newAccountCountryfooter}}\"\n}"
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer"
											]
										},
										"description": "register customer"
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "1.2 - Equipment Microservice",
					"item": [
						{
							"name": "1.2.1 - Extend Warranty",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");",
													"var userMail = pm.iterationData.get(\"email\");",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"/*",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const loginSchema = JSON.parse(pm.environment.get(\"schemaLogin\"));",
													"",
													"pm.test('Login response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(loginSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"*/",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
													"            pm.expect(jsonData.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonData.token);",
													"            pm.globals.set(\"ccp-token\",jsonData.ccpToken);             ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var email = pm.iterationData.get(\"email\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var countryfooter = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand1",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product by Serial",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"   ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"value": "{{serial}}",
												"type": "text"
											},
											{
												"key": "ccp-login-token",
												"value": "{{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer Products",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData; ",
													"var productsCount;",
													"try {",
													"    jsonData = pm.response.json(); ",
													"    productsCount = jsonData.length",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"/*",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const productsSchema = JSON.parse(pm.environment.get(\"schemaProducts\"));",
													"",
													"pm.test('Products Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(productsSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"*/",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"Customer products: \" + productsCount, function () {            ",
													"            // Check the first item ",
													"            pm.expect(jsonData[0].uid).not.eql(null); ",
													"            pm.expect(jsonData[0].eligibilityStatus).not.eql(null);    ",
													"            pm.expect(jsonData[0].extendable).not.eql(null); ",
													"            // Check the last item ",
													"            if(productsCount>1){",
													"                pm.expect(jsonData[productsCount - 1].uid).not.eql(null); ",
													"                pm.expect(jsonData[productsCount - 1].eligibilityStatus).not.eql(null);    ",
													"                pm.expect(jsonData[productsCount - 1].extendable).not.eql(null);",
													"            }                                  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"200\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccpToken={{ccp-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccpToken = eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..MHzr4IeoBj_oKOYJ.C8LL97kTe11tKrVO_oBjrdf1zaAntyBhJNUZxbU2_ITTC_mIlXa51TTMPfWCRrHKEQFQVMJ0u6mnekVKYWqPPYtQ08jlEQAn_hkbMX4GJKTAqZPg3XUYHdjv7Lq-ePmJ28vcpVaV_fTmhyPj33WWeFHFZK-6kcLosRpL6a3er0Xh3fixYL9Gy-pE0r1a277ulXxG5JfXBBw1Vo7aWeonl_r_PnTKqa9YcW6Yl0H5uQ7NgrEkor-U8iFbvbxzz1PVKHaG0OgHIMQDs3MvLfl_wdfwVwcxIVqtvzNiIQLOn99dVCHxAHR0EPmE3NxzxSyRRm8_NlzB_QpVAM-oxcd22mYfpSPvkVD-3brVLtn14PeEwX5VboMUwg.e6CZS-wi0Oh2sPMRIrqn6Q",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"customer",
												"products"
											],
											"query": [
												{
													"key": "language",
													"value": "{{language}}"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extend Warranty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);    ",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const extendWarrantySchema = JSON.parse(pm.environment.get(\"schemaExtendWarranty\"));",
													"",
													"pm.test('Extend warranry Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(extendWarrantySchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"Warranty is extended, the eligibility status is \" + jsonData.extensionRequestEligibilityStatus + \", extension request date: \" + jsonData.extensionRequestDate, function () {   ",
													"            pm.expect(jsonData.uid).not.eql(null);   ",
													"            pm.expect(jsonData.extensionRequestDate).not.eql(null); ",
													"            pm.expect(jsonData.extensionRequestEligibilityStatus).not.eql(null);                 ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													"var warUID = pm.variables.get(\"WAR_UID\");",
													"console.log(\"ccp-login-token\");",
													"console.log(\"WAR_UID\",warUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{WAR_UID}}/extend?giftReceiver=true",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{WAR_UID}}",
												"extend"
											],
											"query": [
												{
													"key": "giftReceiver",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1.2.2 - Upload Warranty Card For Sellout Product",
							"item": [
								{
									"name": "Login OptOut User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var userMail = pm.iterationData.get(\"emailUserOptOut\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const loginSchema = JSON.parse(pm.environment.get(\"schemaLogin\"));",
													"",
													"pm.test('Login response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(loginSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
													"            pm.expect(jsonData.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonData.token);",
													"            pm.globals.set(\"ccp-token\",jsonData.ccpToken);             ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var email = pm.iterationData.get(\"emailUserOPtOut\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var countryfooter = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{emailUserOptOut}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand1",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Warranty Card Picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");\r",
													"\r",
													"var sellOutEquipmentUid = pm.iterationData.get(\"sellOutEquipmentUid\");\r",
													"var popImage = pm.environment.get(\"popImage\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											},
											{
												"key": "Transfer-Encoding",
												"value": "chunked",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{popImage}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{sellOutEquipmentUid}}/proofofpurchase?country={{countryfooter}}&language={{language}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{sellOutEquipmentUid}}",
												"proofofpurchase"
											],
											"query": [
												{
													"key": "country",
													"value": "{{countryfooter}}"
												},
												{
													"key": "language",
													"value": "{{language}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "1.3 - Microservice POS",
					"item": [
						{
							"name": "1.3.1 - External extension request - Booster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaExternalExtension = JSON.parse(pm.environment.get(\"schemaExternalExtension\"));\r",
											"\r",
											"pm.test('External extension Request  response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(schemaExternalExtension, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthBooster}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"systemId\": 2,\r\n    \"posId\": \"PN/30/06JL/202016\",\r\n    \"brand\": \"{{brand}}\",\r\n    \"product\": {\r\n        \"reference\":\"CRWSTA0030\",\r\n        \"serial\":\"3170583299ZX\",\r\n        \"hash\":\"\",\r\n        \"isGift\": false\r\n    },\r\n    \"customer\": {\r\n        \"externalId\":\"1233000202\",\r\n        \"authGroup\":\"WWJL\",\r\n        \"title\":\"0002\",\r\n        \"gender\":\"0001\",\r\n        \"firstName\":\"Test\",\r\n        \"lastName\":\"Test\",\r\n        \"fullName\":\"\",\r\n        \"optIn\": true,\r\n        \"email\":\"\",\r\n        \"phoneNumber\":\"\",\r\n        \"country\":\"CH\",\r\n        \"language\":\"fr\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipmentpos/v1/extend",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipmentpos",
										"v1",
										"extend"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 - External extension request - Dare",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaExternalExtension = JSON.parse(pm.environment.get(\"schemaExternalExtension\"));\r",
											"\r",
											"pm.test('External extension Request  response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(schemaExternalExtension, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthDare}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"systemId\": 2,\r\n    \"posId\": \"PN/30/06JL/202016\",\r\n    \"brand\": \"{{brand}}\",\r\n    \"product\": {\r\n        \"reference\":\"CRWSTA0030\",\r\n        \"serial\":\"3170583299ZX\",\r\n        \"hash\":\"\",\r\n        \"isGift\": false\r\n    },\r\n    \"customer\": {\r\n        \"externalId\":\"1233000202\",\r\n        \"authGroup\":\"WWJL\",\r\n        \"title\":\"0002\",\r\n        \"gender\":\"0001\",\r\n        \"firstName\":\"Test\",\r\n        \"lastName\":\"Test\",\r\n        \"fullName\":\"\",\r\n        \"optIn\": true,\r\n        \"email\":\"\",\r\n        \"phoneNumber\":\"\",\r\n        \"country\":\"CH\",\r\n        \"language\":\"fr\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipmentpos/v1/extend",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipmentpos",
										"v1",
										"extend"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2 - Medium risks tests",
			"item": [
				{
					"name": "2.1 - Customer Microservice",
					"item": [
						{
							"name": "2.1.2 - Retrieve and Reset Password - User not connected",
							"item": [
								{
									"name": "Forget Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var skipTest = true;\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    setTimeout(function(){\r",
													"        console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"    }, 10000);\r",
													"    pm.response.to.have.status(200); \r",
													"    skipTest = false;  \r",
													"    pm.environment.set(\"skipTest\", skipTest);     \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");\r",
													"var email = pm.iterationData.get(\"email\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"{{email}}\",\n\t\"callbackUrl\":\"/profile/create-password\",\n\t\"language\":\"{{language}}\"\n}"
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password/forget?country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"password",
												"forget"
											],
											"query": [
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2.1.3 - Modify Password - User connected",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var email = pm.iterationData.get(\"email\");",
													"",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);  ",
													"            pm.environment.set(\"userMail\",email);           ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var email = pm.iterationData.get(\"email\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"newPassword\": \"Test1234\",\r\n \"oldPassword\": \"Test1234\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"password"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2.1.4 - Check Customer Portoflio",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var email = pm.iterationData.get(\"email\");",
													"",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);                        ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"/*",
													"// For data persistence for the regsiter endpoint, create new accounts",
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
													"",
													"var email = pm.environment.get(\"newAccountEmail\");",
													"var lastname = pm.environment.get(\"newAccountLastname\");",
													"",
													"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
													"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
													"*/",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var email = pm.iterationData.get(\"email\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var country = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product By Serial Number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"   ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"value": "{{serial}}",
												"type": "text"
											},
											{
												"key": "ccp-login-token",
												"value": "{{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer Portfolio BI With CustomerUid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var uidUserToAddProduct = pm.iterationData.get(\"uidUserToAddProduct\");\r",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/internal/customer/{{uid}}/collection/bi",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"internal",
												"customer",
												"{{uid}}",
												"collection",
												"bi"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer Portfolio BI With Customer IdentityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var identityId = pm.iterationData.get(\"identityId\");\r",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/internal/identity/{{identityId}}/collection/bi",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"internal",
												"identity",
												"{{identityId}}",
												"collection",
												"bi"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2.2 - Configurations Microservice",
					"item": [
						{
							"name": "2.2.1 - Country",
							"item": [
								{
									"name": "getFormCountries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); // This must be logging the error on console\r",
													"}\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
													"            pm.expect(jsonData.length > 0);   \r",
													"            // Check the first item       \r",
													"            pm.expect(jsonData[0].name).not.eql(null);              \r",
													"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
													"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
													"            \r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
													"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
													"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
													"            }        \r",
													"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"form",
												"country"
											]
										}
									},
									"response": []
								},
								{
									"name": "getFooterCountries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); // This must be logging the error on console\r",
													"}\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
													"            pm.expect(jsonData.length > 0);   \r",
													"            // Check the first item       \r",
													"            pm.expect(jsonData[0].name).not.eql(null);              \r",
													"            pm.expect(jsonData[0].code).not.eql(null);   \r",
													"            pm.expect(jsonData[0].countries > 0); \r",
													"            \r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
													"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
													"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
													"            }        \r",
													"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"footer",
												"country",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2.2.2 - Enrich",
							"item": [
								{
									"name": "SearchPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Enrich search path configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.fieldPathMap.PRODUCT_NAME).not.eql(null); \r",
													"            pm.expect(jsonData.fieldPathMap.COMMERCIAL_REFERENCE).not.eql(null); \r",
													"            pm.expect(jsonData.assetConfig.targetUrl).not.eql(null);                             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"//pm.globals.get(\"ccp-login-token\");\r",
													"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/search-path/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"search-path",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "2.2.3 - App configuration",
							"item": [
								{
									"name": "getAppConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"App configuration exists for the brand: \" + jsonData.brand.name, function () {   \r",
													"            pm.expect(jsonData.brand.shortName).eql(brand);   \r",
													"            pm.expect(jsonData.app.landingPage).not.eql(null); \r",
													"            pm.expect(jsonData.assetsPaths.appPath).not.eql(null);                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/application/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"application",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "2.2.4 - Image Manager",
							"item": [
								{
									"name": "getBrandImageConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Brand image configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.cropBottomPercent > 0); \r",
													"            pm.expect(jsonData.cropTopPercent > 0);                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/image-manager/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"image-manager",
												"{{brand}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "getDeviceConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Devices configuration exists for the brand: \" + jsonData.length + \" devices\", function () {   \r",
													"            pm.expect(jsonData[0].device).to.be.oneOf([\"desktop-large\", \"mobile\",\"email\", \"desktop\"]);     \r",
													"            pm.expect(jsonData[0].transformations[0].transformation).not.eql(null);\r",
													"            pm.expect(jsonData[0].transformations[0].height).not.eql(null);\r",
													"            //pm.expect(jsonData[0].transformations[0].extensions[0].extension).not.eql(null);  \r",
													"\r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].device).to.be.oneOf([\"desktop-large\", \"mobile\",\"email\", \"desktop\"]);            \r",
													"                pm.expect(jsonData[jsonData.length-1].transformations[0].transformation).not.eql(null); \r",
													"                pm.expect(jsonData[jsonData.length-1].transformations[0].height).not.eql(null);  \r",
													"                //pm.expect(jsonData[jsonData.length-1].transformations[0].extensions[0].extension).not.eql(null);                 \r",
													"            }                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/image-manager/devices",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"image-manager",
												"devices"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "2.2.5 - Warranty extension",
							"item": [
								{
									"name": "getWarrantyExtension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Warranty extension configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.warrantyExtensionEligibilityConfig).not.eql(null);\r",
													"            pm.expect(jsonData.timestamp).not.eql(null);                       \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/warranty-extension/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"warranty-extension",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "2.3 - Equipment Microservice",
					"item": [
						{
							"name": "2.3.1 - Check Products and Warranty",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");",
													"pm.environment.set(\"userMail\", userMail);",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.token); ",
													"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
													"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"/*",
													"// For data persistence for the regsiter endpoint, create new accounts",
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
													"",
													"var email = pm.environment.get(\"newAccountEmail\");",
													"var lastname = pm.environment.get(\"newAccountLastname\");",
													"",
													"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
													"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
													"*/",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var email = pm.iterationData.get(\"email\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var country = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product By Serial Number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"   ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Mbk4]7]DfUD%xC]b",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"type": "text",
												"value": "{{serial}}"
											},
											{
												"key": "ccp-login-token",
												"type": "text",
												"value": "{{ccp-login-token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Product By Uid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var equipmentUid = pm.iterationData.get(\"equipmentUid\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUid}}?country={{countryfooter}}&language={{language}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product",
												"{{equipmentUid}}"
											],
											"query": [
												{
													"key": "country",
													"value": "{{countryfooter}}"
												},
												{
													"key": "language",
													"value": "{{language}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Warranty By Uid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var uid = pm.iterationData.get(\"uid\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{WAR_UID}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{WAR_UID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2.4 - BI Gateway",
					"item": [
						{
							"name": "2.4.1 - Batch push to BI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicBiGateway}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/bi-adapter/v1/{{brand}}/process?from=2019-01-01&to=2020-01-01",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"bi-adapter",
										"v1",
										"{{brand}}",
										"process"
									],
									"query": [
										{
											"key": "from",
											"value": "2019-01-01"
										},
										{
											"key": "to",
											"value": "2020-01-01"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "3 - Low risks tests",
			"item": [
				{
					"name": "3.1 - Customer",
					"item": [
						{
							"name": "3.1 - Check Customer Collection",
							"item": [
								{
									"name": "Login internal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var emailUserToUpdate = pm.iterationData.get(\"emailUserToUpdate\");",
													"",
													"var jsonResponse; ",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {  ",
													"         pm.test(\"CCP token generated and the User whose email: \" + emailUserToUpdate + \" is logged-in.\", function () {",
													"            jsonResponse = JSON.parse(responseBody); ",
													"",
													"            pm.expect(jsonResponse.token).not.eql(null);",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
													"            ",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
													"            pm.globals.set(\"ccp-token\",jsonResponse.token); ",
													"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
													"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
													"        });  ",
													"         ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"/*",
													"// For data persistence for the regsiter endpoint, create new accounts",
													"const moment = require('moment');",
													"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
													"",
													"var email = pm.environment.get(\"newAccountEmail\");",
													"var lastname = pm.environment.get(\"newAccountLastname\");",
													"",
													"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
													"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
													"*/",
													"",
													"",
													"   ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var emailUserToUpdate = pm.iterationData.get(\"emailUserToUpdate\");",
													"var password = pm.iterationData.get(\"password\");",
													"var brand = pm.iterationData.get(\"brand\");",
													"var country = pm.iterationData.get(\"countryfooter\");",
													"var language = pm.iterationData.get(\"language\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{emailUserToUpdate}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Link Customer To Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "equipmentUid",
													"value": "{{equipmentUidToAdd}}",
													"type": "text"
												},
												{
													"key": "giftReceiver",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"collection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer Products",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData; ",
													"var preregCount;",
													"try {",
													"    jsonData = pm.response.json(); ",
													"    preregCount = jsonData.length",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"/*",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const productsSchema = JSON.parse(pm.environment.get(\"schemaProducts\"));",
													"",
													"pm.test('Products Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(productsSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"*/",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"Customer products: \" + preregCount, function () {            ",
													"            // Check the first item ",
													"            pm.expect(jsonData[0].uid).not.eql(null); ",
													"            pm.expect(jsonData[0].eligibilityStatus).not.eql(null);    ",
													"            pm.expect(jsonData[0].extendable).not.eql(null); ",
													"            // Check the last item ",
													"            if(preregCount>1){",
													"                pm.expect(jsonData[preregCount - 1].uid).not.eql(null); ",
													"                pm.expect(jsonData[preregCount - 1].eligibilityStatus).not.eql(null);    ",
													"                pm.expect(jsonData[preregCount - 1].extendable).not.eql(null);",
													"            }                                  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"200\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccpToken={{ccp-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccpToken = eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..MHzr4IeoBj_oKOYJ.C8LL97kTe11tKrVO_oBjrdf1zaAntyBhJNUZxbU2_ITTC_mIlXa51TTMPfWCRrHKEQFQVMJ0u6mnekVKYWqPPYtQ08jlEQAn_hkbMX4GJKTAqZPg3XUYHdjv7Lq-ePmJ28vcpVaV_fTmhyPj33WWeFHFZK-6kcLosRpL6a3er0Xh3fixYL9Gy-pE0r1a277ulXxG5JfXBBw1Vo7aWeonl_r_PnTKqa9YcW6Yl0H5uQ7NgrEkor-U8iFbvbxzz1PVKHaG0OgHIMQDs3MvLfl_wdfwVwcxIVqtvzNiIQLOn99dVCHxAHR0EPmE3NxzxSyRRm8_NlzB_QpVAM-oxcd22mYfpSPvkVD-3brVLtn14PeEwX5VboMUwg.e6CZS-wi0Oh2sPMRIrqn6Q",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"customer",
												"products"
											],
											"query": [
												{
													"key": "language",
													"value": "{{language}}"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Product By Uid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json();     \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test.skip(\"Product with equipment Id: \" + equipmentUidToAdd + \" found\", function () {            \r",
													"            // Check the first item \r",
													"            pm.expect(jsonData.uid).not.eql(null);\r",
													"            pm.expect(jsonData.eligibilityStatus).not.eql(null);    \r",
													"            pm.expect(jsonData.extendable).not.eql(null);\r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"        pm.test.skip(\"Product with equipment Id: \" + equipmentUidToAdd + \" not found\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"200\");\r",
													"        }); \r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUidToAdd}}?country={{countryfooter}}&language={{language}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product",
												"{{equipmentUidToAdd}}"
											],
											"query": [
												{
													"key": "country",
													"value": "{{countryfooter}}"
												},
												{
													"key": "language",
													"value": "{{language}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"token\" :  \"{{ccp-login-token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}?gift=true",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"collection",
												"{{equipmentUidToAdd}}"
											],
											"query": [
												{
													"key": "gift",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Equipment From Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"collection",
												"{{equipmentUidToAdd}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check That Product Was Removed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData; ",
													"var productsCount;",
													"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");",
													"try {",
													"    jsonData = pm.response.json(); ",
													"    productsCount = jsonData.length",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"pm.test(\"Product removed from customer collection.\", function () {    ",
													"    if(productsCount > 0)",
													"    {",
													"        for(var i=0; i< jsonData.length; i++)",
													"        {",
													"            pm.expect(jsonData[i].uid).not.eql(equipmentUidToAdd);",
													"        }",
													"    }            ",
													"}); ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-token={{ccp-token}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"customer",
												"products"
											],
											"query": [
												{
													"key": "language",
													"value": "{{language}}"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "4 - E2E scenario",
			"item": [
				{
					"name": "Register New Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"var  timestamp  = moment().format(\"mmss\");",
									"var idRandom = _.random(10, 99);",
									"//var  timestamp  = moment().format(\"DD_MM_YYYY__kk_mm_ss\");",
									"",
									"var brand = pm.iterationData.get(\"brand\");",
									"var environment = pm.iterationData.get(\"environment\");",
									"var standardEmail =  pm.iterationData.get(\"newAccountEmail\");",
									"var newAccountTitle = pm.iterationData.get(\"newAccountTitle\");",
									"var newAccountFirstname = pm.iterationData.get(\"newAccountFirstname\");",
									"var standardName = pm.iterationData.get(\"newAccountLastname\");",
									"var newAccountLastname2 = pm.iterationData.get(\"newAccountLastname2\");",
									"var newAccountpassword = pm.iterationData.get(\"newAccountpassword\");",
									"var newAccountcountryofresidence = pm.iterationData.get(\"newAccountcountryofresidence\");",
									"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");",
									"var newAccountGender = pm.iterationData.get(\"newAccountGender\");",
									"var newAccountCountryfooter = pm.iterationData.get(\"newAccountCountryfooter\");",
									"var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");",
									"var callbackUrAccountCreation = pm.environment.get(\"callbackUrAccountCreation\");",
									"var env;",
									"",
									"switch (environment) {",
									"  case \"quality\":",
									"    env = \"q\"; ",
									"    break;",
									"  case \"quality2\":",
									"    env = \"q\"; ",
									"    break;",
									"  case \"preprod\":",
									"    env = \"p\"; ",
									"    break;",
									"  case \"preprod2\":",
									"    env = \"p\";",
									"    break; ",
									"  case \"dev\":",
									"    env = \"d\";",
									"    break; ",
									"  default:",
									"    tests[\"Sorry, No environment designed\"];",
									"}",
									"",
									"pm.environment.set(\"newAccountEmailCreated\", standardEmail.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter.toLowerCase()).replace(\"random\",idRandom));",
									"pm.environment.set(\"newAccountLastnameCreated\", standardName.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter.toLowerCase()).replace(\"random\",idRandom));",
									"",
									"var newAccountEmailCreated = pm.environment.get(\"newAccountEmailCreated\");",
									"var newAccountLastnameCreated = pm.environment.get(\"newAccountLastnameCreated\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var skipTest = true;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    setTimeout(function(){",
									"        console.log(\"Sleeping for 10 seconds before next request.\");",
									"    }, 10000);    ",
									"    skipTest = false;",
									"    pm.environment.set(\"skipTest\", skipTest);",
									"});",
									"",
									"",
									"if (responseCode.code == 200) {",
									"    try {        ",
									"        pm.test(\"New Account: \" + pm.environment.get(\"newAccountLastnameCreated\") + \" is created.\", function (){",
									"            var skipTest = true;",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);    ",
									"            //Update User data ",
									"            pm.environment.set(\"lastAccountCreatedEmail\", pm.environment.get(\"newAccountEmailCreated\")); ",
									"            var skipTest = false;",
									"            pm.environment.set(\"skipTest\", skipTest);",
									"            setTimeout(function(){",
									"                    console.log(\"Sleeping for 3 seconds before next request.\");",
									"            }, 15000);",
									"        });         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else{",
									"   console.log(\"Failed to create the New Account.\"); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{BasicAuthCustomer}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"customerDetails\": {\n\t\t\"title\":\"{{newAccountTitle}}\",\n\t\t\"firstName\":\"{{newAccountFirstname}}\",\n\t\t\"lastName\":\"{{newAccountLastnameCreated}}\",\n\t\t\"lastName2\":\"{{newAccountLastname2}}\",\n\t\t\"email\":\"{{newAccountEmailCreated}}\",\n\t\t\"optIn\":{{newAccountOptIn}},\n\t\t\"password\":\"{{newAccountpassword}}\",\n\t\t\"country\":\"{{newAccountcountryofresidence}}\",\n\t\t\"language\":\"{{newAccountWeblanguage}}\",\n\t\t\"gender\":\"{{newAccountGender}}\"\n\t},\n\t\"callbackUrl\": \"{{callbackUrAccountCreation}}\",\n\t\"websiteCountry\" : \"{{newAccountCountryfooter}}\"\n}"
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer"
							]
						},
						"description": "register customer"
					},
					"response": []
				}
			]
		},
		{
			"name": "5 - Email templates",
			"item": [
				{
					"name": "1 - Check Warranty_Extension_Successful Email Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\" xmlns:ns2=\"urn:esvc:ric:namespace:customer/1.0\" xmlns:ns4=\"urn:esvc:ric:namespace:notification/1.0\" xmlns:ns3=\"urn:esvc:ric:namespace:warranty/1.0\">\r\n    <Service>\r\n        <Template>urn:esvc:{{brand}}:email-template:Warranty_Extension_Successful/{{language}}_{{country}}</Template>\r\n        <XRef>1f6f8beb-db76-4f7d-8268-f487ab4f77bd</XRef>\r\n        <LogMessage></LogMessage>\r\n        <CallBackUrl></CallBackUrl>\r\n        <Delivery>\r\n            <Synchronous>Synchronous</Synchronous>\r\n        </Delivery>\r\n    </Service>\r\n    <Model>\r\n        <Head>\r\n            <From></From>\r\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\r\n        </Head>\r\n        <ns3:Warranty>\r\n            <ns3:Product>\r\n                <ns3:Description>Pink Gold, 39 mm, Manual-winding</ns3:Description>\r\n                <ns3:ImageUrl>https://s3.eu-central-1.amazonaws.com/ccp-quality-asset-products/JL/Q1/29/25/20/email/product.png</ns3:ImageUrl>\r\n                <ns3:Name>Master Ultra Thin 1907</ns3:Name>\r\n                <ns3:Reference>Q1292520</ns3:Reference>\r\n                <ns3:Serial>3080004</ns3:Serial>\r\n                <ns3:Type>WATCHES</ns3:Type>\r\n            </ns3:Product>\r\n            <ns3:EndDate>2019-05-31T00:00:00.000Z</ns3:EndDate>\r\n            <ns3:ExtensionEndDate>2025-05-31T00:00:00.000Z</ns3:ExtensionEndDate>\r\n            <ns3:ExtensionRequestDate>2019-07-31T08:04:19.898Z</ns3:ExtensionRequestDate>\r\n            <ns3:ExtensionStartDate>2019-06-01T00:00:00.000Z</ns3:ExtensionStartDate>\r\n            <ns3:StartDate>2017-06-01T00:00:00.000Z</ns3:StartDate>\r\n            <ns3:Uid>98bad131-97b4-4ab4-b58e-33a972832e8a</ns3:Uid>\r\n            <ns3:CallbackUrl>{{callbackUrl}}</ns3:CallbackUrl>\r\n        </ns3:Warranty>\r\n        <ns2:Customer>\r\n            <ns2:NameAndPhone>\r\n                <ns2:Gender>0001</ns2:Gender>\r\n                <ns2:Title>0001</ns2:Title>\r\n                <ns2:FirstName1>Kaoutar</ns2:FirstName1>\r\n                <ns2:LastName1>test</ns2:LastName1>\r\n            </ns2:NameAndPhone>\r\n            <ns2:CustomerNumber>10896426</ns2:CustomerNumber>\r\n            <ns2:AccountCreationDate>2019-03-26T15:38:01.000Z</ns2:AccountCreationDate>\r\n            <ns2:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns2:Email>\r\n            <ns2:WebsiteCountry>{{country}}</ns2:WebsiteCountry>\r\n            <ns2:PreferredLanguage>{{language}}</ns2:PreferredLanguage>\r\n            <ns2:ContactByBrand>true</ns2:ContactByBrand>\r\n            <ns2:NewsletterAccount>true</ns2:NewsletterAccount>\r\n        </ns2:Customer>\r\n    </Model>\r\n    <Attachments/>\r\n    <InlineImages/>\r\n    <History/>\r\n</Email>"
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Check Warranty_Extension_Under_Review Email Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\" xmlns:ns2=\"urn:esvc:ric:namespace:customer/1.0\" xmlns:ns4=\"urn:esvc:ric:namespace:notification/1.0\" xmlns:ns3=\"urn:esvc:ric:namespace:warranty/1.0\">\r\n    <Service>\r\n        <Template>urn:esvc:{{brand}}:email-template:Warranty_Extension_Under_Review/{{language}}_{{country}}</Template>\r\n        <XRef>1f6f8beb-db76-4f7d-8268-f487ab4f77bd</XRef>\r\n        <LogMessage></LogMessage>\r\n        <CallBackUrl></CallBackUrl>\r\n        <Delivery>\r\n            <Synchronous>Synchronous</Synchronous>\r\n        </Delivery>\r\n    </Service>\r\n    <Model>\r\n        <Head>\r\n            <From></From>\r\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\r\n        </Head>\r\n        <ns3:Warranty>\r\n            <ns3:Product>\r\n                <ns3:Description>Pink Gold, 39 mm, Manual-winding</ns3:Description>\r\n                <ns3:ImageUrl>https://s3.eu-central-1.amazonaws.com/ccp-quality-asset-products/JL/Q1/29/25/20/email/product.png</ns3:ImageUrl>\r\n                <ns3:Name>Master Ultra Thin 1907</ns3:Name>\r\n                <ns3:Reference>Q1292520</ns3:Reference>\r\n                <ns3:Serial>3080004</ns3:Serial>\r\n                <ns3:Type>WATCHES</ns3:Type>\r\n            </ns3:Product>\r\n            <ns3:EndDate>2019-05-31T00:00:00.000Z</ns3:EndDate>\r\n            <ns3:ExtensionEndDate>2025-05-31T00:00:00.000Z</ns3:ExtensionEndDate>\r\n            <ns3:ExtensionRequestDate>2019-07-31T08:04:19.898Z</ns3:ExtensionRequestDate>\r\n            <ns3:ExtensionStartDate>2019-06-01T00:00:00.000Z</ns3:ExtensionStartDate>\r\n            <ns3:StartDate>2017-06-01T00:00:00.000Z</ns3:StartDate>\r\n            <ns3:Uid>98bad131-97b4-4ab4-b58e-33a972832e8a</ns3:Uid>\r\n            <ns3:CallbackUrl>{{callbackUrl}}</ns3:CallbackUrl>\r\n        </ns3:Warranty>\r\n        <ns2:Customer>\r\n            <ns2:NameAndPhone>\r\n                <ns2:Gender>0001</ns2:Gender>\r\n                <ns2:Title>0001</ns2:Title>\r\n                <ns2:FirstName1>Kaoutar</ns2:FirstName1>\r\n                <ns2:LastName1>test</ns2:LastName1>\r\n            </ns2:NameAndPhone>\r\n            <ns2:CustomerNumber>10896426</ns2:CustomerNumber>\r\n            <ns2:AccountCreationDate>2019-03-26T15:38:01.000Z</ns2:AccountCreationDate>\r\n            <ns2:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns2:Email>\r\n            <ns2:WebsiteCountry>{{country}}</ns2:WebsiteCountry>\r\n            <ns2:PreferredLanguage>{{language}}</ns2:PreferredLanguage>\r\n            <ns2:ContactByBrand>true</ns2:ContactByBrand>\r\n            <ns2:NewsletterAccount>true</ns2:NewsletterAccount>\r\n        </ns2:Customer>\r\n    </Model>\r\n    <Attachments/>\r\n    <InlineImages/>\r\n    <History/>\r\n</Email>"
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Check Warranty_Extension_Rejected Email Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\" xmlns:ns2=\"urn:esvc:ric:namespace:customer/1.0\" xmlns:ns4=\"urn:esvc:ric:namespace:notification/1.0\" xmlns:ns3=\"urn:esvc:ric:namespace:warranty/1.0\">\r\n    <Service>\r\n        <Template>urn:esvc:{{brand}}:email-template:Warranty_Extension_Rejected/{{language}}_{{country}}</Template>\r\n        <XRef>1f6f8beb-db76-4f7d-8268-f487ab4f77bd</XRef>\r\n        <LogMessage></LogMessage>\r\n        <CallBackUrl></CallBackUrl>\r\n        <Delivery>\r\n            <Synchronous>Synchronous</Synchronous>\r\n        </Delivery>\r\n    </Service>\r\n    <Model>\r\n        <Head>\r\n            <From></From>\r\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\r\n        </Head>\r\n        <ns3:Warranty>\r\n            <ns3:Product>\r\n                <ns3:Description>Pink Gold, 39 mm, Manual-winding</ns3:Description>\r\n                <ns3:ImageUrl>https://s3.eu-central-1.amazonaws.com/ccp-quality-asset-products/JL/Q1/29/25/20/email/product.png</ns3:ImageUrl>\r\n                <ns3:Name>Master Ultra Thin 1907</ns3:Name>\r\n                <ns3:Reference>Q1292520</ns3:Reference>\r\n                <ns3:Serial>3080004</ns3:Serial>\r\n                <ns3:Type>WATCHES</ns3:Type>\r\n            </ns3:Product>\r\n            <ns3:EndDate>2019-05-31T00:00:00.000Z</ns3:EndDate>\r\n            <ns3:ExtensionEndDate>2025-05-31T00:00:00.000Z</ns3:ExtensionEndDate>\r\n            <ns3:ExtensionRequestDate>2019-07-31T08:04:19.898Z</ns3:ExtensionRequestDate>\r\n            <ns3:ExtensionStartDate>2019-06-01T00:00:00.000Z</ns3:ExtensionStartDate>\r\n            <ns3:StartDate>2017-06-01T00:00:00.000Z</ns3:StartDate>\r\n            <ns3:Uid>98bad131-97b4-4ab4-b58e-33a972832e8a</ns3:Uid>\r\n            <ns3:CallbackUrl>{{callbackUrl}}</ns3:CallbackUrl>\r\n        </ns3:Warranty>\r\n        <ns2:Customer>\r\n            <ns2:NameAndPhone>\r\n                <ns2:Gender>0001</ns2:Gender>\r\n                <ns2:Title>0001</ns2:Title>\r\n                <ns2:FirstName1>Kaoutar</ns2:FirstName1>\r\n                <ns2:LastName1>test</ns2:LastName1>\r\n            </ns2:NameAndPhone>\r\n            <ns2:CustomerNumber>10896426</ns2:CustomerNumber>\r\n            <ns2:AccountCreationDate>2019-03-26T15:38:01.000Z</ns2:AccountCreationDate>\r\n            <ns2:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns2:Email>\r\n            <ns2:WebsiteCountry>{{country}}</ns2:WebsiteCountry>\r\n            <ns2:PreferredLanguage>{{language}}</ns2:PreferredLanguage>\r\n            <ns2:ContactByBrand>true</ns2:ContactByBrand>\r\n            <ns2:NewsletterAccount>true</ns2:NewsletterAccount>\r\n        </ns2:Customer>\r\n    </Model>\r\n    <Attachments/>\r\n    <InlineImages/>\r\n    <History/>\r\n</Email>"
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Check Warranty_Extension_No_Sellout Email Templlate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\" xmlns:ns2=\"urn:esvc:ric:namespace:customer/1.0\" xmlns:ns4=\"urn:esvc:ric:namespace:notification/1.0\" xmlns:ns3=\"urn:esvc:ric:namespace:warranty/1.0\">\r\n    <Service>\r\n        <Template>urn:esvc:{{brand}}:email-template:Warranty_Extension_No_Sellout/{{language}}_{{country}}</Template>\r\n        <XRef>1f6f8beb-db76-4f7d-8268-f487ab4f77bd</XRef>\r\n        <LogMessage></LogMessage>\r\n        <CallBackUrl></CallBackUrl>\r\n        <Delivery>\r\n            <Synchronous>Synchronous</Synchronous>\r\n        </Delivery>\r\n    </Service>\r\n    <Model>\r\n        <Head>\r\n            <From></From>\r\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\r\n        </Head>\r\n        <ns3:Warranty>\r\n            <ns3:Product>\r\n                <ns3:Description>Pink Gold, 39 mm, Manual-winding</ns3:Description>\r\n                <ns3:ImageUrl>https://s3.eu-central-1.amazonaws.com/ccp-quality-asset-products/JL/Q1/29/25/20/email/product.png</ns3:ImageUrl>\r\n                <ns3:Name>Master Ultra Thin 1907</ns3:Name>\r\n                <ns3:Reference>Q1292520</ns3:Reference>\r\n                <ns3:Serial>3080004</ns3:Serial>\r\n                <ns3:Type>WATCHES</ns3:Type>\r\n            </ns3:Product>\r\n            <ns3:EndDate>2019-05-31T00:00:00.000Z</ns3:EndDate>\r\n            <ns3:ExtensionEndDate>2025-05-31T00:00:00.000Z</ns3:ExtensionEndDate>\r\n            <ns3:ExtensionRequestDate>2019-07-31T08:04:19.898Z</ns3:ExtensionRequestDate>\r\n            <ns3:ExtensionStartDate>2019-06-01T00:00:00.000Z</ns3:ExtensionStartDate>\r\n            <ns3:StartDate>2019-06-01T00:00:00.000Z</ns3:StartDate>\r\n            <ns3:Uid>98bad131-97b4-4ab4-b58e-33a972832e8a</ns3:Uid>\r\n            <ns3:CallbackUrl>{{callbackUrl}}</ns3:CallbackUrl>\r\n        </ns3:Warranty>\r\n        <ns2:Customer>\r\n            <ns2:NameAndPhone>\r\n                <ns2:Gender>0001</ns2:Gender>\r\n                <ns2:Title>0001</ns2:Title>\r\n                <ns2:FirstName1>Kaoutar</ns2:FirstName1>\r\n                <ns2:LastName1>test</ns2:LastName1>\r\n            </ns2:NameAndPhone>\r\n            <ns2:CustomerNumber>10896426</ns2:CustomerNumber>\r\n            <ns2:AccountCreationDate>2019-03-26T15:38:01.000Z</ns2:AccountCreationDate>\r\n            <ns2:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns2:Email>\r\n            <ns2:WebsiteCountry>{{country}}</ns2:WebsiteCountry>\r\n            <ns2:PreferredLanguage>{{language}}</ns2:PreferredLanguage>\r\n            <ns2:ContactByBrand>true</ns2:ContactByBrand>\r\n            <ns2:NewsletterAccount>true</ns2:NewsletterAccount>\r\n        </ns2:Customer>\r\n    </Model>\r\n    <Attachments/>\r\n    <InlineImages/>\r\n    <History/>\r\n</Email>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Check Confirm_Token Email Templlate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\">\n    <Service>\n        <Template>urn:esvc:{{brand}}:email-template:Confirm_Token/{{language}}_{{country}}</Template>\n        <XRef>5c11fe62-28f6-48e7-abad-01d94060be0c</XRef>\n        <LogMessage></LogMessage>\n        <CallBackUrl></CallBackUrl>\n        <Delivery>\n            <Synchronous>Synchronous</Synchronous>\n        </Delivery>\n    </Service>\n    <Model>\n        <Head>\n            <From></From>\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\n        </Head>\n        <ns1:Customer xmlns:ns1=\"urn:esvc:ric:namespace:customer/1.0\">\n            <ns1:NameAndPhone>\n                <ns1:Gender>0001</ns1:Gender>\n                <ns1:Title>0001</ns1:Title>\n                <ns1:FirstName1>Kaoutar</ns1:FirstName1>\n                <ns1:LastName1>test</ns1:LastName1>\n            </ns1:NameAndPhone>\n            <ns1:LegacyNumber>0030896885</ns1:LegacyNumber>\n            <ns1:CustomerNumber>10896426</ns1:CustomerNumber>\n            <ns1:AccountToken>\n                <ns1:Token>24210ffa-7376-4e67-ab02-e71256b66792</ns1:Token>\n                <ns1:Url>https://example.com/api/customer/customer/confirm?callbackUrl=%2Ffr%2Foptin%2Fsuccess%3Fserial%3D3403090</ns1:Url>\n                <ns1:Language>fr</ns1:Language>\n            </ns1:AccountToken>\n            <ns1:Password>4d7adb23-ac2a-40de-aedb-a86eb4754b40</ns1:Password>\n            <ns1:AccountCreationDate>2018-02-20T17:30:41.000Z</ns1:AccountCreationDate>\n            <ns1:AccountUpdateDate>2018-02-20T17:30:41.000Z</ns1:AccountUpdateDate>\n            <ns1:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns1:Email>\n            <ns1:WebsiteCountry>US</ns1:WebsiteCountry>\n            <ns1:PreferredLanguage>fr</ns1:PreferredLanguage>\n            <ns1:ContactByBrand>true</ns1:ContactByBrand>\n            <ns1:NewsletterAccount>false</ns1:NewsletterAccount>\n            <ns1:Informations>\n                <ns1:Information>\n                    <ns1:Characteristic>ZZORIGINSITE</ns1:Characteristic>\n                    <ns1:CharacteristicValue>101</ns1:CharacteristicValue>\n                </ns1:Information>\n                <ns1:Information>\n                    <ns1:Characteristic>ZZCLIENTNEWSLETTER</ns1:Characteristic>\n                    <ns1:CharacteristicValue>0</ns1:CharacteristicValue>\n                </ns1:Information>\n            </ns1:Informations>\n        </ns1:Customer>\n    </Model>\n    <Attachments/>\n    <InlineImages/>\n    <History>\n        <Event time=\"2020-04-23T06:42:27.685Z\" name=\"EMAIL_CREATED\">Confirm_Token - Customer: 10173286</Event>\n    </History>\n</Email>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Check Customer_Join_The_Care_Program Email Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request, email sent and body correct\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"",
									"    if(pm.response.code === 200)",
									"    {",
									"        pm.response.to.have.body(\"<h1>200 OK - SENT</h1>\");",
									"    }",
									"    else if(pm.response.code === 202)",
									"    {",
									"        pm.response.to.have.body(\"<h1>202 OK - ACCEPTED</h1>\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appUser = pm.environment.get(\"appUser\");\r",
									"var appPassword = pm.environment.get(\"appPassword\");\r",
									"var ESI_URL = pm.environment.get(\"ESI_URL\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appUser}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Email xmlns=\"urn:esvc:ric:namespace:email/1.0\"\nxmlns:ns2=\"urn:esvc:ric:namespace:customer/1.0\"\n       xmlns:ns3=\"urn:esvc:ric:namespace:warranty/1.0\">\n    <Service>\n        <Template>urn:esvc:{{brand}}:email-template:Customer_Join_The_Care_Program/{{language}}_{{country}}</Template>\n        <XRef>5c11fe62-28f6-48e7-abad-01d94060be0c</XRef>\n        <LogMessage></LogMessage>\n        <CallBackUrl></CallBackUrl>\n        <Delivery>\n            <Synchronous>Synchronous</Synchronous>\n        </Delivery>\n    </Service>\n    <Model>\n        <Head>\n            <From></From>\n            <To>ric.uat.{{brand}}+testemail@hotmail.com</To>\n        </Head>\n        <ns3:Warranty>\n            <ns3:Product>\n                <ns3:Description>Pink Gold, 39 mm, Manual-winding</ns3:Description>\n                <ns3:ImageUrl>https://s3.eu-central-1.amazonaws.com/ccp-quality-asset-products/JL/Q1/29/25/20/email/product.png</ns3:ImageUrl>\n                <ns3:Name>Master Ultra Thin 1907</ns3:Name>\n                <ns3:Reference>Q1292520</ns3:Reference>\n                <ns3:Serial>3080004</ns3:Serial>\n                <ns3:Type>WATCHES</ns3:Type>\n            </ns3:Product>\n            <ns3:EndDate>2019-05-31T00:00:00.000Z</ns3:EndDate>\n            <ns3:ExtensionEndDate>2025-05-31T00:00:00.000Z</ns3:ExtensionEndDate>\n            <ns3:ExtensionRequestDate>2019-07-31T08:04:19.898Z</ns3:ExtensionRequestDate>\n            <ns3:ExtensionStartDate>2019-06-01T00:00:00.000Z</ns3:ExtensionStartDate>\n            <ns3:StartDate>2017-06-01T00:00:00.000Z</ns3:StartDate>\n            <ns3:Uid>98bad131-97b4-4ab4-b58e-33a972832e8a</ns3:Uid>\n            <ns3:CallbackUrl>{{callbackUrl}}</ns3:CallbackUrl>\n        </ns3:Warranty>\n        <ns2:Customer>\n            <ns2:NameAndPhone>\n                <ns2:Gender>0001</ns2:Gender>\n                <ns2:Title>0001</ns2:Title>\n                <ns2:FirstName1>Kaoutar</ns2:FirstName1>\n                <ns2:LastName1>test</ns2:LastName1>\n            </ns2:NameAndPhone>\n            <ns2:CustomerNumber>10896426</ns2:CustomerNumber>\n            <ns2:AccountCreationDate>2019-03-26T15:38:01.000Z</ns2:AccountCreationDate>\n            <ns2:Email>ric.uat.{{brand}}+testemail@hotmail.com</ns2:Email>\n            <ns2:WebsiteCountry>{{country}}</ns2:WebsiteCountry>\n            <ns2:PreferredLanguage>{{language}}</ns2:PreferredLanguage>\n            <ns2:ContactByBrand>true</ns2:ContactByBrand>\n            <ns2:NewsletterAccount>true</ns2:NewsletterAccount>\n        </ns2:Customer>\n    </Model>\n    <Attachments/>\n    <InlineImages/>\n    <History>\n        <Event time=\"2020-04-23T06:42:27.685Z\" name=\"EMAIL_CREATED\">Customer_Join_The_Care_Program - Customer: 10173286</Event>\n    </History>\n</Email>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{ESI_URL}}/svc/email/v1/{{brand}}",
							"protocol": "https",
							"host": [
								"{{ESI_URL}}"
							],
							"path": [
								"svc",
								"email",
								"v1",
								"{{brand}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6 - eCS",
			"item": [
				{
					"name": "6.0 - Initialize Data",
					"item": [
						{
							"name": "Start eCS ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecsActivated = pm.iterationData.get(\"ecsActivated\");\r",
											"\r",
											"if(!ecsActivated){\r",
											"    pm.test.skip( function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    postman.setNextRequest(\"Exit eCS ROTW Tests\");\r",
											"}                                                                                     \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get eCS  Configuration & Initialize Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Initialize needed environments varaiables\r",
											"\r",
											"pm.environment.set(\"sceOrderIdWithPaymentDone\",\"\"); \r",
											"pm.environment.set(\"statusInRegistration\",\"0001\"); \r",
											"pm.environment.set(\"statusInDiagnosis\",\"0008\"); \r",
											"pm.environment.set(\"statusWaitForApproval\",\"0002\"); \r",
											"pm.environment.set(\"statusCostEstimateDeclined\",\"0009\"); \r",
											"pm.environment.set(\"statusCostEstimateAccepted\",\"0011\"); \r",
											"pm.environment.set(\"statusInRepair\",\"0003\"); \r",
											"pm.environment.set(\"statusWaitingForCollection\",\"0004\"); \r",
											"pm.environment.set(\"statusWaitForPayment\",\"0012\"); \r",
											"pm.environment.set(\"statusToBeShipped\",\"0013\"); \r",
											"pm.environment.set(\"skipTest\",false); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.1 - Check Configurations",
					"item": [
						{
							"name": "Get Form Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
											"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
											"            }        \r",
											"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"form",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Footer Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
											"            pm.expect(jsonData.length > 0);   \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].name).not.eql(null);              \r",
											"            pm.expect(jsonData[0].code).not.eql(null);   \r",
											"            pm.expect(jsonData[0].countries > 0); \r",
											"            \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
											"            }        \r",
											"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"footer",
										"country",
										"{{brand}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ServiceOrder Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The service order configuration exists for the brand: \" + brand, function () {   \r",
											"              \r",
											"            pm.expect(jsonData.ecsOnlines).not.eql(null); \r",
											"            pm.expect(jsonData.ecsBoutique).not.eql(null);\r",
											"            pm.expect(jsonData.productFamilies).not.eql(null);\r",
											"            pm.expect(jsonData.howServicesAreMadeUrl).not.eql(null);\r",
											"            pm.expect(jsonData.howServicesAreMadeConfigs).not.eql(null);\r",
											"                            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicAuthConfiguration}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "6.2 - Search preregistration",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email_main_user\");",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email_main_user = pm.iterationData.get(\"email_main_userg\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
											"",
											"pm.environment.set(\"preregistrationId\", preregistrationId);",
											"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email_main_user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Preregistration by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const preRegSchema = JSON.parse(pm.environment.get(\"schemaPreRegistration\"));\r",
											"/*\r",
											"pm.test('Pre-registration Json response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(preRegSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Pre-registration Id \" + pm.environment.get(\"preregistrationId\") + \" is present\", function () {   \r",
											"            pm.expect(jsonData.identifier).not.eql(null);   \r",
											"            pm.expect(jsonData.productType).not.eql(null); \r",
											"            pm.expect(jsonData.customerNumber).not.eql(null); \r",
											"            pm.expect(jsonData.status).not.eql(null);      \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "openid",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}/{{preregistrationId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"preregistration",
										"{{brand}}",
										"{{preregistrationId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all preregistrations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var preregCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    preregCount = jsonData.length\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"preregistrationCountCol\", preregCount); \r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Pre-registration list contains: \" + preregCount + \" pre-registrations\", function () {            \r",
											"            // Check the first item \r",
											"            pm.expect(jsonData[0].identifier).not.eql(null); \r",
											"            pm.expect(jsonData[0].customerNumber).not.eql(null);    \r",
											"            pm.expect(jsonData[0].status).not.eql(null); \r",
											"            // Check the last item \r",
											"            if(preregCount>1){\r",
											"                pm.expect(jsonData[preregCount - 1].identifier).not.eql(null); \r",
											"                pm.expect(jsonData[preregCount - 1].customerNumber).not.eql(null);    \r",
											"                pm.expect(jsonData[preregCount - 1].status).not.eql(null);\r",
											"            }                                  \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "openid",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/preregistration/{{brand}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"preregistration",
										"{{brand}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List of all documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var documentsCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    documentsCount = jsonData.length;\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The preregistration documents list contains \" + documentsCount + \"file(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
											"            \r",
											"            pm.expect(jsonData[0].name).not.eql(null);   \r",
											"            pm.expect(jsonData[0].size).not.eql(null);   \r",
											"            pm.expect(jsonData[0].type).not.eql(null);             \r",
											"            console.log(jsonData[0].name);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "openid",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"document",
										"{{brand}}",
										"{{preregistrationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Document by preregistration id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The document of the preregistration whose identifier is: \" + pm.iterationData.get(\"preregistrationId\") + \" exists\", function () {   \r",
											"            pm.expect(pm.response.headers.has(\"Content-Type\",`application/pdf`)).is.true   \r",
											"            let headerContentDisposition = pm.response.headers.get(\"content-disposition\");     \r",
											"            pm.expect(headerContentDisposition).to.include(\"filename=\");             \r",
											"            pm.expect(headerContentDisposition).to.include(\".pdf\");            \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "openid",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/pre-registration/v1/document/{{brand}}/{{preregistrationId}}/preregistration",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"pre-registration",
										"v1",
										"document",
										"{{brand}}",
										"{{preregistrationId}}",
										"preregistration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "6.3 - Check Service Order Details and Documents",
					"item": [
						{
							"name": "Login internal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var userMail = pm.iterationData.get(\"email_main_user\");",
											"var encoddedEmail = pm.iterationData.get(\"email_main_user\").replace(\"+\",\"%2B\").replace(\"@\",\"%40\");",
											"pm.environment.set(\"encoddedEmail\", encoddedEmail);",
											"",
											"",
											"var jsonResponse; ",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"",
											"            pm.expect(jsonResponse.token).not.eql(null);",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
											"            ",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
											"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);             ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											"",
											"   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var email_main_user = pm.iterationData.get(\"email_main_user\");",
											"var password = pm.iterationData.get(\"password\");",
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"var preregistrationId = pm.iterationData.get(\"preregistrationId\");",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");",
											"",
											"pm.environment.set(\"preregistrationId\", preregistrationId);",
											"pm.environment.set(\"serviceOrderId\", serviceOrderId);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email_main_user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "getServiceOrderConfigurationByBrand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var websiteCountry = pm.iterationData.get(\"countryfooter\");\r",
											"pm.variables.set(\"websiteCountry\", websiteCountry);\r",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthConfiguration}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/configuration/v1/configuration/service-order/{{brand}}/{{websiteCountry}}?language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"configuration",
										"v1",
										"configuration",
										"service-order",
										"{{brand}}",
										"{{websiteCountry}}"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Service Orders for a given customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); // This must be logging the error on console\r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service-Order list contains: \"  + jsonData.length + \" service-order(s)\", function () {    \r",
											"            // Check the first item       \r",
											"            pm.expect(jsonData[0].identifier).not.eql(null);              \r",
											"            pm.expect(jsonData[0].createDate).not.eql(null);   \r",
											"            pm.expect(jsonData[0].serialNumber).not.eql(null); \r",
											"            pm.expect(jsonData[0].productTitle).not.eql(null);   \r",
											"            pm.expect(jsonData[0].status).not.eql(null);  \r",
											"            // Check the last item  \r",
											"            if(jsonData.length>1){\r",
											"                pm.expect(jsonData[jsonData.length-1].identifier).not.eql(null);              \r",
											"                pm.expect(jsonData[jsonData.length-1].createDate).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].serialNumber).not.eql(null); \r",
											"                pm.expect(jsonData[jsonData.length-1].productTitle).not.eql(null);   \r",
											"                pm.expect(jsonData[jsonData.length-1].status).not.eql(null);\r",
											"            }        \r",
											"            console.log(jsonData.length);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search ServiceOrder By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson; \r",
											"try {\r",
											"    responseJson = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"/*\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
											"\r",
											"pm.test('Service Order Json response body Schema is valid', function () {\r",
											"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
											"            pm.response.to.not.be.error;            \r",
											"            pm.response.to.not.have.jsonBody('error');\r",
											"            \r",
											"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
											"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);             \r",
											"            pm.expect(responseJson.serialNumber).not.eql(null);   \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var encoddedEmail = pm.environment.get(\"encoddedEmail\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/search/{{serviceOrderId}}?websiteCountry={{countryfooter}}&email={{encoddedEmail}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}",
										"search",
										"{{serviceOrderId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "email",
											"value": "{{encoddedEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Service Order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson; \r",
											"try {\r",
											"    responseJson = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"/*\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaServiceOrder = JSON.parse(pm.environment.get(\"schemaServiceOrder\"));\r",
											"\r",
											"pm.test('Service Order Json response body Schema is valid', function () {\r",
											"    pm.expect(jsonValidator.validate(schemaServiceOrder, responseJson), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order Identifier \" + pm.environment.get(\"serviceOrderId\") + \" is present\", function () {  \r",
											"            pm.response.to.not.be.error;            \r",
											"            pm.response.to.not.have.jsonBody('error');\r",
											"            \r",
											"            pm.expect(responseJson.identifier).to.eql(pm.environment.get(\"serviceOrderId\"));\r",
											"            pm.environment.set(\"serviceOrderStatus\", responseJson.status);  \r",
											"            //pm.expect(responseJson.preregistrationId).to.eql(pm.environment.get(\"preregistrationId\")); \r",
											"            //pm.expect(responseJson.preregistrationId).not.eql(null); \r",
											"            //pm.expect(responseJson.requestDate).not.eql(null); \r",
											"            pm.expect(responseJson.boutiqueCode).not.eql(null); \r",
											"            pm.expect(responseJson.serialNumber).not.eql(null); \r",
											"            //pm.expect(responseJson.warrantDate).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.costEstimateNumber).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.costEstimateNumber).to.be.a(\"number\");\r",
											"            pm.expect(responseJson.estimate.status).not.eql(null); \r",
											"            pm.expect(responseJson.estimate.estimateLines[0]).not.eql(null); \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"\r",
											"var serviceOrserId = pm.iterationData.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/service-order/{{brand}}/{{serviceOrderId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"service-order",
										"{{brand}}",
										"{{serviceOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display the List of all documents of the service order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"var documentsCount;\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"    documentsCount = jsonData.length\r",
											"    \r",
											"    if (responseCode.code !== 200) {\r",
											"        try {        \r",
											"            jsonMessage = JSON.parse(responseBody.message);  \r",
											"            console.log(jsonMessage);      \r",
											"        }\r",
											"        catch(e) {\r",
											"            console.log(e);\r",
											"        }\r",
											"        return;\r",
											"    }\r",
											"    else {\r",
											"        try {    \r",
											"            pm.test(\"Service order contains \"  + documentsCount + \"document(s) \" + \"among them: \" + jsonData[0].name, function () {            \r",
											"                \r",
											"                pm.expect(jsonData[0].name).not.eql(null);  \r",
											"                pm.expect(jsonData[0].size).not.eql(null); \r",
											"                pm.expect(jsonData[0].type).not.eql(null);  \r",
											"            });   \r",
											"        }\r",
											"        catch(e) {\r",
											"            console.log(e);     \r",
											"            pm.test(\"Fail expected document\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\".pdf\");\r",
											"            });       \r",
											"        }\r",
											"        return; \r",
											"    }\r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/document/{{brand}}/{{serviceOrderId}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"document",
										"{{brand}}",
										"{{serviceOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBoutiqueInformation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var boutiqueCode = pm.iterationData.get(\"boutiqueCode\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The boutique  with code \" + jsonData.code + \" is \" + jsonData.label + \", \" + jsonData.address.address + \", \" + jsonData.address.state + \", \" + jsonData.address.country , function () {   \r",
											"            pm.expect(jsonData.label).not.eql(null);   \r",
											"            pm.expect(jsonData.code).eql(pm.iterationData.get(\"boutiqueCode\"));             \r",
											"            pm.expect(jsonData.address.country).eql(pm.iterationData.get(\"countryfooter\"));    \r",
											"            pm.expect(jsonData.address.address).not.eql(null);             \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "boutiqueCode",
											"value": "{{boutiqueCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/service-order/v1/boutique/{{brand}}/{{boutiqueCode}}?websiteCountry={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"service-order",
										"v1",
										"boutique",
										"{{brand}}",
										"{{boutiqueCode}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getServiceOrderWorkflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {\r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 5 seconds before next request.\");\r",
											"    },3000); \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Service Order workflow with current status: \" + jsonData.current.status + \" exists\", function () {  \r",
											"            //pm.response.to.not.be.error;            \r",
											"            //pm.response.to.not.have.jsonBody('error');  \r",
											"\r",
											"            pm.expect(jsonData.current.status).not.eql(null);          \r",
											"            pm.expect(jsonData.current.subStep).not.eql(null); \r",
											"            pm.expect(jsonData.current.mainStep).not.eql(null); \r",
											"\r",
											"            if (jsonData.future.length > 1)            {\r",
											"                pm.expect(jsonData.future[0].mainStep).not.eql(null);   \r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                pm.expect(jsonData.future.status).not.eql(null);   \r",
											"            } \r",
											"            if (jsonData.past.length > 1)\r",
											"            {\r",
											"                pm.expect(jsonData.past[0].status).not.eql(null);          \r",
											"                pm.expect(jsonData.past[0].subStep).not.eql(null); \r",
											"                pm.expect(jsonData.past[0].mainStep).not.eql(null);\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                pm.expect(jsonData.past.status).not.eql(null);          \r",
											"                pm.expect(jsonData.past.subStep).not.eql(null); \r",
											"                pm.expect(jsonData.past.mainStep).not.eql(null); \r",
											"            }            \r",
											"\r",
											"            //pm.expect(jsonData.serviceOrder.boutiqueCode).not.eql(null); \r",
											"            pm.expect(jsonData.serviceOrder.createDate).not.eql(null);  \r",
											"            pm.expect(jsonData.serviceOrder.identifier).not.eql(null); \r",
											"            //pm.expect(jsonData.serviceOrder.serialNumber).not.eql(null);                   \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var serviceOrderId = pm.iterationData.get(\"serviceOrderId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "openid",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "ccp-proxy",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEcs}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/ecs-workflow/v1/workflow/{{brand}}/{{serviceOrderId}}?websiteCountry={{countryfooter}}&country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"ecs-workflow",
										"v1",
										"workflow",
										"{{brand}}",
										"{{serviceOrderId}}"
									],
									"query": [
										{
											"key": "websiteCountry",
											"value": "{{countryfooter}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Exit eCS ROTW Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var ecsActivated = pm.iterationData.get(\"ecsActivated\");",
											"",
											"if(!ecsActivated){",
											"    pm.test.skip( function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"} ",
											"else{",
											"    pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"        pm.response.to.have.status(401);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "7 - Digital Certificates",
			"item": [
				{
					"name": "Login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var digitalCertificatesActivated = pm.iterationData.get(\"digitalCertificatesActivated\");",
									"",
									"if(!digitalCertificatesActivated){",
									"    postman.setNextRequest(null);",
									"} ",
									"else{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"dc_access_token\", jsonData.access_token);",
									"    });",
									"}",
									"",
									"var email = pm.iterationData.get(\"dc_email\");",
									"",
									"var jsonResponse; ",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {  ",
									"         pm.test(\"CCP token generated and the User whose email: \" + email + \" is logged-in.\", function () {",
									"            jsonResponse = JSON.parse(responseBody); ",
									"",
									"            pm.expect(jsonResponse.token).not.eql(null);",
									"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);",
									"            ",
									"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);",
									"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken); ",
									"            //pm.environment.set(\"ccpLoginToken\",jsonResponse.token);",
									"            //pm.environment.set(\"ccpToken\",jsonResponse.token);              ",
									"        });  ",
									"         ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}",
									"/*",
									"// For data persistence for the regsiter endpoint, create new accounts",
									"const moment = require('moment');",
									"var  timestamp  = moment().format(\"YYYY-MM-DD-hh-mm-ss\");",
									"",
									"var email = pm.environment.get(\"newAccountEmail\");",
									"var lastname = pm.environment.get(\"newAccountLastname\");",
									"",
									"pm.environment.set(\"newAccountEmail\", email.replace(\"timestamp\" ,timestamp));",
									"pm.environment.set(\"newAccountLastname\", lastname.replace(\"timestamp\" ,timestamp));",
									"*/",
									"",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var dc_email = pm.iterationData.get(\"dc_email\");",
									"var password = pm.iterationData.get(\"password\");",
									"var brand = pm.iterationData.get(\"brand\");",
									"var country = pm.iterationData.get(\"countryfooter\");",
									"var language = pm.iterationData.get(\"language\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{dc_email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}",
									"type": "text"
								},
								{
									"key": "brand",
									"value": "{{brand}}",
									"type": "text"
								},
								{
									"key": "language",
									"value": "{{language}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData; ",
									"try {",
									"    jsonData = pm.response.json(); ",
									"} catch (err) {",
									"    console.log(err); ",
									"}",
									"",
									"const Ajv = require('ajv');",
									"const jsonValidator = new Ajv({logger: console});",
									"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
									"",
									"pm.test('Current customer Json response body Schema is valid', function() {",
									"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
									"});",
									"",
									"if (responseCode.code !== 200) {",
									"    try {        ",
									"        jsonMessage = JSON.parse(responseBody.message);  ",
									"        console.log(jsonMessage);      ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return;",
									"}",
									"else {",
									"     try {    ",
									"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
									"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
									"            pm.expect(jsonData.uid).not.eql(null); ",
									"            pm.expect(jsonData.optIn).not.eql(null); ",
									"            pm.expect(jsonData.country).not.eql(null);      ",
									"        });   ",
									"    }",
									"    catch(e) {",
									"        console.log(e);",
									"    }",
									"    return; ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var brand = pm.iterationData.get(\"brand\");",
									"pm.globals.get(\"ccp-login-token\");",
									"pm.globals.get(\"ccp-token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "ccp-login-token={{ccp-login-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{BasicAuthCustomer}}",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ccp-login-token",
									"value": "{{ccp-login-token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"customer",
								"v1",
								"{{brand}}",
								"customer",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get oauth2 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        postman.setEnvironmentVariable(\"dc_access_token\", jsonData.access_token);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "ccp-proxy",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "7188318d-9adf-4d82-8c89-2a1a0832ee87",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://keycloak.quality.richemont.com/auth/realms/apim-ww-test/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"keycloak",
								"quality",
								"richemont",
								"com"
							],
							"path": [
								"auth",
								"realms",
								"apim-ww-test",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auto Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Certificate already claimed\", function () {\r",
									"    setTimeout(function(){\r",
									"        console.log(\"Sleeping for 1 second before next request.\");\r",
									"    }, 3000);\r",
									"    pm.response.to.have.status(412);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var dc_equipment_number = pm.iterationData.get(\"dc_equipment_number\");\r",
									"var dc_equipmentUid = pm.iterationData.get(\"dc_equipmentUid\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dc_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/digitalcert/v1/{{brand}}/certificate/transfer/auto-claim?equipmentUid={{dc_equipmentUid}}&originSystem=0&isGift=false&country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"digitalcert",
								"v1",
								"{{brand}}",
								"certificate",
								"transfer",
								"auto-claim"
							],
							"query": [
								{
									"key": "equipmentUid",
									"value": "{{dc_equipmentUid}}",
									"description": "equipment uid (take it from the database)"
								},
								{
									"key": "customerNumber",
									"value": "{{dc_customer_number}}",
									"description": "customer number (optional)",
									"disabled": true
								},
								{
									"key": "originSystem",
									"value": "0",
									"description": "DARE or BOOSTER"
								},
								{
									"key": "isGift",
									"value": "false"
								},
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the equipment options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"var dc_equipmentUid = pm.iterationData.get(\"dc_equipmentUid\");\r",
									"var serial = pm.iterationData.get(\"dc_serial\");\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); \r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Equipment certificate details: \", function () {   \r",
									"                         \r",
									"            pm.expect(jsonData.isOwner).not.eql(null); \r",
									"            pm.expect(jsonData.claimedDate).not.eql(null);               \r",
									"            pm.expect(jsonData.product.uid).eql(dc_equipmentUid);\r",
									"            pm.expect(jsonData.product.serial).eql(serial);   \r",
									"            pm.expect(jsonData.documents.label).not.eql(null);  \r",
									"            pm.expect(jsonData.status).not.eql(null);   \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dc_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "ccp-token={{ccp-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/digitalcert/v1/{{brand}}/certificate/equipment/{{dc_equipmentUid}}?country={{countryfooter}}&language={{language}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"digitalcert",
								"v1",
								"{{brand}}",
								"certificate",
								"equipment",
								"{{dc_equipmentUid}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{countryfooter}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "customerNumber",
									"value": "{{dc_customer_number}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transfer countdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData; \r",
									"\r",
									"try {\r",
									"    jsonData = pm.response.json(); \r",
									"} catch (err) {\r",
									"    console.log(err); // This must be logging the error on console\r",
									"}\r",
									"if (responseCode.code !== 200) {\r",
									"    try {        \r",
									"        jsonMessage = JSON.parse(responseBody.message);  \r",
									"        console.log(jsonMessage);      \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"     try {    \r",
									"        pm.test(\"Transfer Count Down = \" + jsonData.countdown, function () {                            \r",
									"            pm.expect(jsonData.countdown).not.eql(null); \r",
									"            pm.expect(jsonData.transferStatus).not.eql(null);   \r",
									"        });   \r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(e);\r",
									"    }\r",
									"    return; \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dc_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{ServerModifier}}/digitalcert/v1/{{brand}}/certificate/transfer/{{TransferUid}}/countdown",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"digitalcert",
								"v1",
								"{{brand}}",
								"certificate",
								"transfer",
								"{{TransferUid}}",
								"countdown"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status received is ' + pm.response.code, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dc_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "ccp-token={{ccp-token}}"
							}
						],
						"url": {
							"raw": "https://{{ServerModifier}}/digitalcert/v1/{{brand}}/certificate/document/{{dc_equipment_number}}",
							"protocol": "https",
							"host": [
								"{{ServerModifier}}"
							],
							"path": [
								"digitalcert",
								"v1",
								"{{brand}}",
								"certificate",
								"document",
								"{{dc_equipment_number}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "popImage",
			"value": "/9j/4AAQSkZJRgABAQAAAQABAAD//gAfQ29tcHJlc3NlZCBieSBqcGVnLXJlY29tcHJlc3P/2wCEAAgICAgICAkKCgkMDQwNDBIQDw8QEhsTFRMVExspGR4ZGR4ZKSQsJCEkLCRBMy0tM0FLPzw/S1tRUVtybHKVlckBCAgICAgICQoKCQwNDA0MEhAPDxASGxMVExUTGykZHhkZHhkpJCwkISQsJEEzLS0zQUs/PD9LW1FRW3JscpWVyf/CABEIALQCWAMBIgACEQEDEQH/xAAcAAEAAgIDAQAAAAAAAAAAAAAABgcFCAEDBAL/2gAIAQEAAAAAv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcQv4kkd7JkAAAAAAAAAAAV7mcjTN0+DCz4AAAAAAAAAABXsencbkkEkk/AAAAAAAAAAAcRv4jck+5KAAAAAAAAAAAI70xuSfclAAAAAAAAAAAEc6o3JPuSgAAAAAAAAAB109lPTLPJxG5J9+mJ+bGXF9AAAAAAAAAAqmcxL3sTPIRN4HlnglsKtIAAAAAHDkAAAeevpR6Yh0sZk3olXmjE/9fIAAAAAYehPVsF3gAAA4BzG6qkcatmRAAAAAA1fkN/8Axz9fBz9fPT3cHH38uOwfHX2upz8ah7SyDw4qRdbs+X1xx1u7r+uvs4c/fz1Oe4AGr8iv3VnJ7KQrW68/PP6fsms7r1atRY+uc89EU2RKZrzZ7y6o3N45DrfuwKy8PRkshr3tlXGRqiT2hDqauXurWRSGt9itUbr8Nw+gCMyLsavzScYeg9uedQbNu2jpVbPV2avSiWWdrnnvfjLSgEo89abFNS7Al/brJuz9Gm23LULbfWDbWD5yoJZZ7U/ZnL0Kk0P2E1HsSZZmB293iLalTXYvPal3jX0wqS2bI1R28UHmbN1n2Foa+5NzrnYFaXHKcZ7IlWmxTUvZ/J+XUDZ6W9MX1r2p9OpO2uqu3cDktNyyz2p+zOXorLRSxrE1H2nhdYVvt1Ih1a8zWByiJ3XTWyFQ1xc1CXRhLZpGXQq8dZ7H9Mkpqf2DQGwmcUzBLG7aetjpsPzU5LsdNuIN65XP6JyXfaut+ZyU/wBdr2n2tefuPW+46GtGHTTKWmHDDYCtdgeXIDgcuHIDhy4cjgHLgHIODF03e/0AEQpy3M17QAAAAAAAAMfB632PyAAOIrVOA6gAAAAAAAAPZNrX9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAAAf/aAAgBAxAAAAAAAAAAAAABUAAAAAAAAAAAAAAAAAAUCAAAAAAWAAAUllJUWVFJQEFJQJQEUlllCCoqFlQsAFllIFAAAAAgAAAAAAAAAAAAD//EADgQAAAGAQIEBAMGBgIDAAAAAAECAwQFBgAHVREWFzYSExQVECFBICI1R1BTIzAxMjRgJ3AkQFb/2gAIAQEAAQwA/wCuVr/UkFVElJQAP1Gp26hnu8d7Z7p6kno+o1M3YcQv9PXVTSJKh4/9Fu025TK3goziaRh6pDxUc3aCybrHPBQhyGKMW04cvyHMXJ/rB9qLBQZCFIWKZgEvU4WWjXTQGTdA9GnF1U14CVESyP8Aokjp3Fykgu/cPn3nz2n8bFwsi9RfyAqU0xj1aGEwiI/mnlyMYlWmRKIgMDQI2UhY56s/kAUjtOYqLfoP20g+8/8A0W4drTeUvtWFz808unas1lP7WhP9HuHa07lL7Vhc/NPLp2rNZT+1oT/QxEOIBx+xcO1p7KX2rC5+aeXTtWayn9rQn2AEBEQ4h+vGOUhTGMIAUUX2oUw5cN3y7OM/5Er30QmmzfUqKIcEZVm8jVmVkgZHh6WUbKDcB41Wbyl9qwufmnl07VmsqHyq0Lj2xwMcA+qlGyYuNSoo5xRimbySW/5EsP0QhWwIvtPZhs5cPl3kYU5TlA5RAS/rmo0+ZAraETWFAK8lEtopqhFrpKtpDUNFnKu2qEW5eN291ps2mKK7pEmK0qlS5ROizQxXS2M8s6bWVkUCQ0cERFs2AKCoH5p5MxwS8W8YCoKYJ6XRopkTdS0iuRGk0qIKB1maGOLrTYRIEUHSJsYahovJVo1Xi3LNtYUolzFOW8oskk202sQrkdQSi3n/AK67ZMnzcyDpukuR7psyTVOvByTqMWrNeb1yLTaE4HVk6xASn+XGNlDr6ZQPiE7Jd6yPyTY23zZXN6Gey6kJf2WZqfOVr97v7t7sw9X7LqQr/fZmpMGk2R183lzejiGmMBxA71w9enj61AxXzZxjZM1lrzexxajQ4gRVnpw0UUKvOSLmTWZsmjBEqLVumin+iTvu3tbn2nw+tkb1e4l4qzerkSXhrjqHPORbxyxFVGYuvRtwc+Hz/wD37JaI2sNAWdCJlGU9ebw5VJHKkYNCUq3oF8aV0dCrZbJfIJmLB+VMg1aVGagI96Y3FT9E1N7ve5o/+KSvwMomTgB1ClwhyKAIkOBgwyqZOHjUKXPVIfRZPPVIfRZPCKJqB9xQpvgIgUOIjwAjlsobwprpmNxDjw4/MxgKHERAA9Uh9Fk89Uh9Fk8BdD6LpiIiBQERHgHqkPosnnqkPosngKoDw4LpiP2DLIkESmVIBvUN/wB5PAEBABAeIGOUgeIxgAPUN/3k89Q3/eTwFkTDwBQgi8dIsWq7lY3hTn5t1YJRw+cDlViUoSAj2hScD5JxrOYYLsnifjSrFdTq8edki7VXJiiqSQcVFCkBNVJUOKahThhlUyfI6hS56pD6LJ4UwGADAICAnIHyEwBgGKPHgIDnqG/7yeAuiYeAKkEc9Qh8+KyYZ6pD6LJ56hv+8nhTlOHEpgEPOR/cTzzkf3E8BZEeH8UvwMchA4mMAB6hv+8nnqG/7yeFWSMPAqhBH+Zqb3g9zR4BGRlsEQKAiIgAWBaStUvNyLUDHbaYzJ2VhBooqPlZcalH2BA7pVddFxAtQk5mOZLKKAm6oFLYnQI5cuEjIUuTq9mjX8MZZwysM+0rkYq9cfPK/wC7aiyjlWUdqkjlKFVjp+Akf5JpJGYqNxh13T9w7Zy8W2mmCzFyJwStkUSAnXceguqdOBoVcd15lJPlnIDJ6bxTyJB/W36x1WbdxKVxFnLonSWvMChWZkjRqusdKmUaEmoBs+eC5FayaZsW8c5dxbhwRagW6UaTDOOcOFF2nx1JqbBFk+nkVnBXFGgELLLKNna6xEmTRJgzbNEePlzsGzno8WTwVCksDH2eafsE1znIzoFVJCtX75dyQJbTtAGSEjWXa5l7++epUbiuQUXDUgKOW5Df0+xfLxy+UGLHgd/VKilMsEpewqLPV7dUiQTE8xXlV2atDvQz/wD4EhwB9dqoxmmriQUWXTc19l7vNR7BRY5CRMW2ho9Bi2E4pan1tqZg5niOFyL0erM2cMR2K66it9rTWsPWZGbhcyem9VZSbYsy5XXFW3HlAgXaUYgoq6iNLYwjNMZNdws6tDFOHn5Bi3Op5MXpxX3sOyWUO7BaoQUxASEvEOiqrRt9rbasO2ZWblcydCp8TYIhV4+M5MpMaXRhmap4xy6RXqFvloaUbN1XKqrSdg2VhjxZPDKlTnWXtMw/YprHOVDT+qIxCD184ckLL6eJptW8lWHSxl2iiyrRsddIUlvtrXKroOBbqTDYFEF0HCRVUVSqJ/DU3u97mjSXhCbXy/THs1bdnKbgtp3AJtqscVyffdoua/NrJAPBaOepSTBo8S/skfw97kKk8XlmCTJXynVqql0BsEo9lE3wQ0gWWiI96XNXX6iksxY8f4ekSZQgXx/rh00z8BOQpvhqX3g/yMrN3lqy1SSmkCMdMV3TVnKQjwokXzVzuVrlKvdfhoBqxeqrEVndR2D9mrHwiDhy7olAftX6ErKp+Tljn0K3Gi+XRUVJ1gidsd5VrsytS7lBu0WRHUztB7mkfcDv43juyZzlK8S1eaomm0DttNXqysEowcFEq+qDUy9SWMAcRSOKSqagf1IcpyEOUeIfGefqSczIu1DcRikyIxUcmX+kugVzFyCJg4liHqsbKsnaQ8Dzg8YOTEMpPdkN8NSOzZPKuIcsQeaxf50Pmk/bCvxvvd8xlf8AwGH+GsX+bEZQLnBQMOq0frKJqSmp8N6Y6UURd07p+nso5kUH8uiKCGXPuqZxWo3uWgWyCkygo202fKuK96NcBBewW+GrhAB4sIrI6xMxcgCsOqCDR22fNEHLZQFEfsXRR0lVpgzURBUAEwgUocRi39rpC6a5mblFvX59hY2BHbQ/wvD0khapZYg8SaYRh46skVULwPqbKGkrA1i0iHVIlqGdBFJFOrSgEur/AN2mPXhGOWQaUy3q4RZgc335H8Pe5UO6ITPlwHOHDNXoxUr9hJAA+Xo+6KaOlGv1mY53KMToNJJZitIWW2R794zPOuzGq8dJMWAHfyyz5XUvvB/lM7VhM4AH9A+GrncrXNPYqMdVJmK7FuqN7rQ1WVQex3jSbUmzFssSVRQQB27ZNH6Ioum6ayfLFd2dljOKjI4xzM2SCA6mdoPc0j7gd/G8d2TOQf4LFYAAH9AyRZIyLJyzXDinMxLqEkXDFyTgejzCUzWmKnjAVscuUGaCjhdQqaVVt7W0KvwQZqpp2WNViZ2RaKAIZW3ZH1eh1iCA5LLlbRb9c48C1+NVmJpgzTLxGVQO4i3yCYffp6pG9ohjqDwDNTViJU94UwgA11I6Feh0T/IdYv8AOh80n7YV+N97vmMr/wCAw/w1n+b+JzS6NjndfcHXZoKm1FqSUEuhJxqYpNtPrWNgjhQdH4vcufdUzkT+FR+Xe5pV1H0bLgeRa6dWqbIrIO1E0VDpnKqZLhxPUY5eKrUWyXDgr9hQhFSGIcoGLZ6DJwT33GISOu1jdRq7LsxazafplVX7Glz6b+BkEnbCyaqNjtDtYRNUVqhQZCbcpPJBI6LGxzilbZN/SRS7s1OdSrK1jIP4d4qfNVVl3CDWLQiXK56m6nqvKA7LDvVUrPaV2LFJNvCvXKkO0mIqVYvhh3qgdR3f/wApKZK2Sz2xdlFMIl9GoSUMxl4o8a7KJ0m0BaqDLi9ZtTP2iuo66iXgZ1uSO6jtOp+ffLPpXgyJJPSQkWdwDZZctnPK2GadSIQ7xEIG8uomHYsFa3JHM/1HlDtjkY1p+ResEkYarHeyXq3Lu4uZa0SxXpIN8iTT2des2zODdQj4mWeDSsMM5YnEAPCEtdLmBVCIdHCvTozrJVx7c6Zn+GodgdvW72CbQrww059JVeSVdqQr1crjUqQ8k/p6s+82vPJmFgHc1Kt37x1OITUzLPZD2Z6nkdfnzNgzbHqskY0pf51yzUQjq2/QXqjF7GwLJF4sqo5tlPjbQ1KBx8l0zi7vQ3qizZmZwglqVMrh4Eai6MtLwt/tbJZd75TVHT2DWg4AhHKQpubpS0LOgVVIxUX1elrLSEzxsnCOl2k7P2G3tRjIeDeIo0ulIVhIy65gVfZctN35H60jBp+YnG3yys0CNpKrvl1gjLBeJFqvMMhj4pZQG6CingMYLtKSNqeNVUYR8inTbQ8rMWoxWr8gsM3eZ+VaixioF+2VO5Vqlaaiqi6fqzxJabl3sh7Q7Tyi2VxIIIRS8Q7bHWU8tJVXwCYLvKyNqdtTowj5FPT2deQqZYpzCvhCZim81GO2C4fcaR9qpc2VckcucyN7FWMXemgJIp5pGXl5V6/9pdp51NPGRjdBaCdpLV967byi0zIQEhJvH01qDYkjNWEGePSqenDWGUI9kVCuXf239eg5PiLyMbLCpp1UVOPCO8GQpG9EtKjCXaoqIFMU5QMUQEv63Ly7GEYqvHioEThWrzUSwnlZAghGAAFAAAOAfy7jWUrNFHRAAB1Xr1L1NQ0ZJIKLIMNQ6o+IA+vBA3M9d3uPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H4ra6ugXxqTjLhMarQzQhiRyKjtVq3suo0sBlzj5MXFtIdg3ZNCeFL+bYahDWMvF2iJV3+j8wkYRYPkHJD6Y3IphAI4h86bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAxtpbalhAFU26AQ+kjFA5VJR6ZzjNk0YIEbtUCIpf90f/xABBEAACAgADBQUEBAwGAwAAAAABAgADBBFzEiExQdIQExRRsiJhcXIVIFCRBSMwMkJSYGKBgpKzJDNTcLHRQ3ST/9oACAEBAA0/AP8AbmtyrZV2GaNvTO77zveWzNCyO4UZ1OP2G/CB2NKs8WMRPbtesMzvzMYZH8Us73x2zz7r9SKABnUpjp7FtdYUo44Gfg47OrUOY/YW1syQ4Eow72IGt5rDhVn0PBhWl+HSxwtvNpU2YJcH9hvBWTwiz6HnhGngq/2H8DZPCLPoeeEaeCr/AGH8DZPCLPoeeEaeCr/YIAkk8gJgCa8LbVxe3m0H8t05i2skQ8tsA/cZ4KyeEWfQ88I08FXByLgn7hOQqrIEP810x+VWKtt4128nhAII4EH7dxhHicQQdlKpUgAetg2Z5kkczMLkt+Io3hHnOrGIE9W6fr4azL0GOCCm2Ckw9QQORlnlPoeYiooXAzyziAAIXAQCfr4mwn1GcqsGgf0zFZrRiL9wZ5amTNYwXI8iCeYmCJ8LiQDk9X26w3rYu0J5IxZIx277f9Sw8TOb7AU/1DIzkarjOS3IXn71I6Z3Hc7ex+h8Nmfu0jpnNaUKf8NOZttM/X2Azf1NmYDt0W867BwMHJ2KpBwWtQo+xch3W3llx98r4qakMRNtvxdYCrO7XvtngXy3/YD/AOVSv57xDk1ibgvuLcS08n2yh+9jLGArx9EeoCz503H7F7qn0Twq+rs95yg8j/12e85T5xPnE9xzy7fJWBPZ5mfOJ84h4AMCez5xPnEPABgT9XmC2WU+YdnmZ8wnzCeQYGU1s7n3KM45IrXklY4LO6D2nzd957LV+48iI1xszcAZdnmxAnmpB7PeQM/vnziHmJ8ez5hPcw7ByLCfOJ8wnmJ8Z8Z8ezzM+YT5hPIMD+V7qj0TwyeqATBjz/NqU7ImNQp7g67x2YbDWCso27m0vxKVuQcjkxl9grqD35F2jvsYit3GaK0Hsog42OeQmHAJw9JKIS3BJysqsdXELhKrbCWPdtuKGW5ZlG2TulYQqX45OoaWYYXWv32yomW3VnaGS2W4XusSAwzz4ZgiWYZbhtneCxKy1n4WlRuMorNndu+2HCzEuKgrnM1tyK/UN9ZsQtmh2t0roNhCHImUVLUmZzOygyELq/4s7LArKLSqsx3kQ4Wu22w3bKjMRCttYNmYsHmpmIFNdqcSC29xGtUH4E5fVsXMk8KRMUO8RLHbZRGmG32112HZKREzR+AuHVMLhH2Ch9khM23iX3hGYHflKgdkudpt5zlQqQoD7BGezPwjglFubbgH5LL6mbKw5lSplGMIrRTkudeRlwFKiviofi0YZvsWFFWU2gJtNmcioMuwyOXFvNhL6s6cTL62OVjZlSpgxLINiwqAFERCUDvtq0e0VWVWMSFzOWawWCwGs7J2llF7IrNxIE8Mlltpu2QMxEKW1obcxYPNDGqU2pmDsuRvG78gDkRnHGauhDKR291R6J+JQS8dxV8Xn4SDNZpkFVEwWLOydNswZfUtg/mnh7PTHxFYps5KxO4zBe2AmYNYHMCX4dHI8mI3ynDC3+ewxsaR9yDsU5jMZ5dmxR/bEuoGxQxIOweRIWYDE8DyFnZ9HV/3HlTvnlWSMmaYpDUnsZZbcp9qmjixfzaCxU2UyzzafFJTWHJcid7T654JvUO3xEfD1umGJI3ZZhSQJ+DsQ9DqZTfXbFcN9xzjAEfAjP6luIcj3KDkIuFqA/goEswtqn+KkSm9G+474cFd6DPEjs2qP7k8FXO4tnj7fSvb3y+gTwNPp7O5thxLPuQuCCJaClS7BA2jK7Bb3b/n2ns8W0NFbJhySDkBmASFmAvfDuDCM1or3uZ5i0FxLq1dHHkfqjD8RxyzG1CQAB5nkJYQXquQiuycLKz+dW3kewWiv/5AJMZab/5OCzCAF6695Z3laBFATgFltShhcMizLMHbu07J4ez0zx1Xq7Xo7hj5MhLCJiVt/g4ygYOLqxvyHKYe96iwc7yjZS9Us9vhXmOCzYo/tieDSHs+jq/7jyx7tsvWCT7cubaqK/8AisXlKMkvX/hpmDsOoYZiaSxwAxrQKSBO9p9c8E3qHb4ieCo9A7L6mrYe5hK3IB5MvJhKEFFw99fZWpZmY7gBzMwpGVjnc+cW9invRjmpjYOrP4gZGV4a1j/BZbepbLko3sZZhrEUe8rlPGIv9W7ssspVf6wYmCqBE7i2ePt9K9vfL6BPA0+ns7m2HFuuboGOQAlr5OicKrJhQA5/1E5P2eLaeFq9Il4zUcRWD+mZbm/+IY948Dlchv3g5ZDKV0kuPIuxbL6rAgg8CDEsFqqozekrCNm1LEL1NL/8zDK/BeaGWrkcQ42QnyiBg52xk90bNK66V9lAg55TGMazZ3TDu2uYZv2ZriPEIhZU4rsR0Nd1fcuM0MxmDLDJDlVtjg8w96WFO5cFgpnwPTHuXvriHD5Q1hQxObgrwOZ5wgq/dcXT3gZkGEbkdDkDL7mufm5LnM5LKEVRVUNpzyluwAhrY5BAFmHqFe0qGMMlexCQscWYmyokvZ7kAMShaVVqmYkKSZtvliDWQgzzb2ow2qnP6LrwmRS2sIxSxfcQIlmwUvGRO7PMdouTaxGwShC+17OUeg1lRWymci4bpmMxIIwwBLInycpfaXCd07ZSmhKyQpyJQZc1lgKi50Y7HwAWMpsuNjFmBfflKxlVeBmRDufuwba7BPnboiIXqwK8bDL7WttQ8V5ASoEV2cnH6jwOTXZSNrYl2QuuvGxmJauTvyQeSdjv3jUKcnrb9yIMu9RGUv8AEbMwz7aYVjm9plaFtlBmTsjPICUVlRt1sSdow3taHRDzEv8AYNzKdoSlK0cJm7szcTL7NoJ3bnLIZTDYMZ2uCK37vJYiM2yvE5b8gPMyitlG3WSSWmIxYK3hDkpsyX2sxLqyM+ank0qcglEZqrUPvEqsRO52MyS/MTEXFwndu2zEoFaGz2ULoMpY23UdghAT+nwMtBD2Ocm/qfKDeiAexWfyB4sUG1/UJ+7Y8uyNGLesEoOTQgEEe/7cT72PkJhXyrp5HyTqg/KVZvh38m/6MpfYNTbraYf0LwUn/sVzXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSeSXK5nmQUriH2rMsqqFPJZSgUebeZP5YDJb69zictsGpp7r65r1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU83tB9Gc501AokXgiDIf70/wD/xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/AGR//8QAHxEAAgEEAgMAAAAAAAAAAAAAAAEQESAwQSFAMWBw/9oACAEDAQE/APs6GUzrppQjYoYh2asYoUsQoUKNQopd4z17HHt3/9k=",
			"disabled": true
		},
		{
			"key": "equipmentUid",
			"value": "43008f05-1f4f-4deb-97c0-10fd29d40cbe",
			"disabled": true
		},
		{
			"key": "brand",
			"value": "car",
			"disabled": true
		},
		{
			"key": "email",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "countryfooter",
			"value": "US",
			"disabled": true
		},
		{
			"key": "language",
			"value": "en-us",
			"disabled": true
		},
		{
			"key": "password",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "optIn",
			"value": "true",
			"disabled": true
		},
		{
			"key": "callbackUrl",
			"value": "/portfolio/success",
			"disabled": true
		},
		{
			"key": "titleNew",
			"value": "MR",
			"disabled": true
		},
		{
			"key": "firstnameNew",
			"value": "Test",
			"disabled": true
		},
		{
			"key": "lastnameNew",
			"value": "Test Automation 9008",
			"disabled": true
		},
		{
			"key": "lastname2New",
			"value": "Api",
			"disabled": true
		},
		{
			"key": "emailNew",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "optInNew",
			"value": "true",
			"disabled": true
		},
		{
			"key": "passwordNew",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "countryofresidenceNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "weblanguageNew",
			"value": "en",
			"disabled": true
		},
		{
			"key": "genderNew",
			"value": "0001",
			"disabled": true
		},
		{
			"key": "countryfooterNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "lastNameNew",
			"value": "Test Automation 9006",
			"disabled": true
		},
		{
			"key": "emailTokenConfirmation",
			"value": "767c2e3e-1cf3-4548-8c21-21eb3d468694",
			"disabled": true
		},
		{
			"key": "schemaLogin",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"token\": {\n      \"type\": \"string\"\n    },\n    \"ccpToken\": {\n      \"type\": \"string\"\n    },\n    \"expiresIn\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"token\",\n    \"ccpToken\",\n    \"expiresIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaCurrentCustomer",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"uid\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"phoneNumber\": {\n      \"type\": \"string\"\n    },\n    \"gender\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"country\": {\n      \"type\": \"string\"\n    },\n    \"language\": {\n      \"type\": \"string\"\n    },\n    \"creationDate\": {\n      \"type\": \"string\"\n    },\n    \"optIn\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"customerNumber\",\n    \"uid\",\n    \"email\",    \n    \"gender\",\n    \"title\",\n    \"firstName\",\n    \"lastName\",\n    \"country\",\n    \"language\",\n    \"creationDate\",\n    \"optIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaPreRegistration",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productType\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"isServiceKitNeeded\": {\n      \"type\": \"boolean\"\n    },\n    \"isSameAddress\": {\n      \"type\": \"boolean\"\n    },\n    \"deliveryBillingAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"serviceKitAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"requestDate\": {\n      \"type\": \"null\"\n    },\n    \"repairOrder\": {\n      \"type\": \"null\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"updateDate\": {\n      \"type\": \"string\"\n    },\n    \"fileSize\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"serialNumber\",\n    \"productType\",\n    \"productTitle\",\n    \"customerNumber\",\n    \"description\",\n    \"status\",\n    \"isServiceKitNeeded\",\n    \"isSameAddress\",\n    \"deliveryBillingAddress\",\n    \"serviceKitAddress\",\n    \"requestDate\",\n    \"repairOrder\",\n    \"createDate\",\n    \"updateDate\",\n    \"fileSize\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaServiceOrder",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"shipExpectedDate\": {\n      \"type\": \"null\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"typeOfSite\": {\n      \"type\": \"string\"\n    },\n    \"preregistrationId\": {\n      \"type\": \"null\"\n    },\n    \"customerNumber\": {\n      \"type\": \"null\"\n    },\n    \"billingRequestNumber\": {\n      \"type\": \"null\"\n    },\n    \"requestDate\": {\n      \"type\": \"string\"\n    },\n    \"warrantyDate\": {\n      \"type\": \"null\"\n    },\n    \"warrantyType\": {\n      \"type\": \"null\"\n    },\n    \"boutiqueCode\": {\n      \"type\": \"string\"\n    },\n    \"billingRequests\": {\n      \"type\": \"null\"\n    },\n    \"estimate\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"costEstimateNumber\": {\n          \"type\": \"integer\"\n        },\n        \"status\": {\n          \"type\": \"string\"\n        },\n        \"currency\": {\n          \"type\": \"string\"\n        },\n        \"orderReason\": {\n          \"type\": \"string\"\n        },\n        \"estimateLines\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"lineNumber\": {\n                  \"type\": \"integer\"\n                },\n                \"description\": {\n                  \"type\": \"string\"\n                },\n                \"amountNet\": {\n                  \"type\": \"number\"\n                },\n                \"amountTax\": {\n                  \"type\": \"number\"\n                },\n                \"status\": {\n                  \"type\": \"null\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"lineNumber\",\n                \"description\",\n                \"amountNet\",\n                \"amountTax\",\n                \"status\",\n                \"type\"\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"costEstimateNumber\",\n        \"status\",\n        \"currency\",\n        \"orderReason\",\n        \"estimateLines\"\n      ]\n    },\n    \"currency\": {\n      \"type\": \"null\"\n    },\n    \"validityPeriod\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"createDate\",\n    \"serialNumber\",\n    \"productTitle\",\n    \"shipExpectedDate\",\n    \"status\",\n    \"typeOfSite\",\n    \"preregistrationId\",\n    \"customerNumber\",\n    \"billingRequestNumber\",\n    \"requestDate\",\n    \"warrantyDate\",\n    \"warrantyType\",\n    \"boutiqueCode\",\n    \"billingRequests\",\n    \"estimate\",\n    \"currency\",\n    \"validityPeriod\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "emailUserPrereg",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "emailUserServiceOrder",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "preregistrationIdCol",
			"value": "13364543781",
			"disabled": true
		},
		{
			"key": "serviceOrderIdCol",
			"value": "11965360",
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": 1,
			"disabled": true
		},
		{
			"key": "emailNewUser",
			"value": "ric.uat.car%2BTestAutomation9007%40hotmail.com",
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": null
		}
	]
}