{
	"info": {
		"_postman_id": "36a426c2-c87f-4ac5-88f5-a262dc59a667",
		"name": "003-ccp-alibaba-api-tests CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - High risks tests",
			"item": [
				{
					"name": "1.1 - Customer Microservice",
					"item": [
						{
							"name": "1.1.1 - WeChat Login",
							"item": [
								{
									"name": "retrieveOAuthUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"URL present: \", function () {\r",
													"             pm.expect(pm.response.text()).to.include(\"wechat_redirect\");\r",
													"\r",
													"        });           \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/wechat/oauthUrl",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"wechat",
												"oauthUrl"
											]
										},
										"description": "register customer"
									},
									"response": []
								},
								{
									"name": "login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"URL present: \", function () {\r",
													"             pm.expect(pm.response.text()).to.include(\"wechat_redirect\");\r",
													"\r",
													"        });           \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var encryptedOpenId;\r",
													"\r",
													"switch (brand) {\r",
													"  case \"car\":\r",
													"    encryptedOpenId = pm.environment.get(\"encryptedOpenIdCAR\");    \r",
													"    break;\r",
													"  case \"jlc\":\r",
													"    encryptedOpenId = pm.environment.get(\"encryptedOpenIdJLC\");\r",
													"    break;\r",
													"  case \"iwc\":\r",
													"    encryptedOpenId = pm.environment.get(\"encryptedOpenIdIWC\");\r",
													"    break;\r",
													"  case \"pan\":\r",
													"    encryptedOpenId = pm.environment.get(\"encryptedOpenIdPAN\");\r",
													"    break;  \r",
													"  default:\r",
													"    tests[\"Sorry, No brand designed\"];\r",
													"}\r",
													"pm.environment.set(\"encryptedOpenId\", encryptedOpenId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthCustomer}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/wechat/oauthUrl?encryptedOpenId={{encryptedOpenId}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"wechat",
												"oauthUrl"
											],
											"query": [
												{
													"key": "encryptedOpenId",
													"value": "{{encryptedOpenId}}"
												}
											]
										},
										"description": "register customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "1.1.2 - Check Login Options",
							"item": [
								{
									"name": "1.1.2.1 - Login  By Email & Password",
									"item": [
										{
											"name": "Login By Email & Password (CN)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var email = pm.iterationData.get(\"email\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var userMail = pm.iterationData.get(\"email\").replace(\"%2B\",\"+\").replace(\"%40\",\"@\");\r",
															"pm.environment.set(\"userMail\", userMail);\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose email: \" + userMail + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"value": "{{email}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1.1.2.2 - Login By Phone & Password",
									"item": [
										{
											"name": "Login With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberWithAreaCode}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "1.1.2.3 - Login By Phone & Pincode",
									"item": [
										{
											"name": "Send Login Pincode (CN)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// phone number without area code for example for china 17821264301\r",
															"var phoneNumber = pm.iterationData.get(\"phoneNumber\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200, pincode sent\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    setTimeout(function(){\r",
															"                    console.log(\"Sleeping for 3 seconds before next request.\");\r",
															"    }, 3000);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													}
												],
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/smsCode?phoneNumber={{phoneNumber}}&type=LOGIN&country={{countryfooter}}&language={{language}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"smsCode"
													],
													"query": [
														{
															"key": "phoneNumber",
															"value": "{{phoneNumber}}"
														},
														{
															"key": "type",
															"value": "LOGIN",
															"description": "possible values : LOGIN, PASSWORD_RESET, VERIFY"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "language",
															"value": "{{language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve  Login Pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 1 seconds before next request.\");\r",
															"    }, 1000);\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.environment.get(\"phoneNumberWithAreaCode\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);      \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"        pincode = jsonData.token;\r",
															"        pm.environment.set(\"pincode\", pincode);\r",
															"});  \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"swse_username = pm.environment.get(\"swse_username\");\r",
															"swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{phoneNumberWithAreaCode}}&country={{countryfooter}}&type=LOGIN",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{phoneNumberWithAreaCode}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "LOGIN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Login With Phone & Pincode (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var areaCode = pm.iterationData.get(\"areaCode\");\r",
															"var phoneNumber = pm.iterationData.get(\"phoneNumber\");\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumber + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// phone number without area code for example for china 17821264301\r",
															"var areaCode = pm.iterationData.get(\"areaCode\");\r",
															"var phoneNumber = pm.iterationData.get(\"phoneNumber\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");\r",
															"var pincode = pm.environment.get(\"pincode\");\r",
															"\r",
															"var phoneNumberWithCountryCode = areaCode + phoneNumber;\r",
															"pm.variables.set(\"phoneNumberWithCountryCode\", phoneNumberWithCountryCode);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberWithCountryCode}}",
															"type": "text"
														},
														{
															"key": "pincode",
															"value": "{{pincode}}",
															"description": "use send pin code endpoint to get a new pincode",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "1.1.2.4 - Force phone number",
									"item": [
										{
											"name": "Login With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberWithAreaCode}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve  Login Pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.environment.get(\"phoneNumberWithAreaCode\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);      \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"        pincode = jsonData.token;\r",
															"        pm.environment.set(\"pincode\", pincode);\r",
															"});  \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"swse_username = pm.environment.get(\"swse_username\");\r",
															"swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{phoneNumberWithAreaCode}}&country={{countryfooter}}&type=LOGIN",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{phoneNumberWithAreaCode}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "LOGIN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Force Phone Number (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// phone number without area code for example for china 17821264301\r",
															"var areaCode = pm.iterationData.get(\"areaCode\");\r",
															"var phoneNumber = pm.iterationData.get(\"phoneNumber\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");\r",
															"var pincode = pm.environment.get(\"pincode\");\r",
															"\r",
															"var phoneNumberWithCountryCode = areaCode + phoneNumber;\r",
															"pm.variables.set(\"phoneNumberWithCountryCode\", phoneNumberWithCountryCode);\r",
															"pm.variables.set(\"country\", country);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mobilePhoneNumber\": \"{{phoneNumberWithCountryCode}}\",\r\n    \"mobilePhoneCountry\": \"{{country}}\",\r\n    \"mobilePhoneNumberToken\": \"{{pincode}}\",\r\n    \"language\": \"{{language}}\"\r\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/phoneNumber",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"phoneNumber"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "1.1.3 - Reseting Password",
							"item": [
								{
									"name": "1.1.3.1 - Reset Password By Email - User not connected",
									"item": [
										{
											"name": "Forget Password",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 3 seconds before next request.\");\r",
															"    }, 2000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");\r",
															"var email = pm.iterationData.get(\"email\");\r",
															"pm.globals.get(\"ccp-login-token\");\r",
															"pm.globals.get(\"ccp-token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\":\"{{email}}\",\n\t\"callbackUrl\":\"/profile/create-password\",\n\t\"language\":\"{{language}}\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password/forget?country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"password",
														"forget"
													],
													"query": [
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Reset Password By Email (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"\r",
															" pm.test.skip(\"Status code is 200\", function () {            \r",
															"    pm.response.to.have.status(200);    \r",
															" });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");\r",
															"pm.globals.get(\"ccp-login-token\");\r",
															"pm.globals.get(\"ccp-token\");\r",
															"\r",
															"var email = pm.iterationData.get(\"email\");\r",
															"var emailTokenConfirmation = pm.environment.get(\"emailTokenConfirmation\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"token\": \"{{emailTokenConfirmation}}\",\n\t\"newPassword\": \"{{newPassword}}\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password/reset?country={{countryfooter}}&language={{language}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"password",
														"reset"
													],
													"query": [
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "language",
															"value": "{{language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1.1.3.2 - Reset Password By Phone - User not connected",
									"item": [
										{
											"name": "Retrieve  SWSE Password Reset Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"pm.test(\"Reseting token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"    pincode = jsonData.token;\r",
															"    pm.environment.set(\"pincode\", pincode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"//swse_username = pm.environment.get(\"swse_username\");\r",
															"//swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{phoneNumberWithAreaCode}}&country={{countryfooter}}&type=PASSWORD_RESET",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{phoneNumberWithAreaCode}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "PASSWORD_RESET"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Reset Password By Phone (CN)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"pm.test(\"Status code is 200\", function () {            \r",
															"     pm.response.to.have.status(200);\r",
															"     setTimeout(function(){\r",
															"        console.log(\"Sleeping for 3 seconds before next request.\");\r",
															"    }, 2000);    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"phone\": \"{{phoneNumberWithAreaCode}}\",\n\t\"token\": \"{{pincode}}\",\n\t\"newPassword\": \"{{newPassword}}\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password/reset?country={{countryfooter}}&language={{language}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"password",
														"reset"
													],
													"query": [
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "language",
															"value": "{{language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Login With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
															"//pm.environment.set(\"encodedphone\",encodedphone);\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberWithAreaCode}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1.1.3.3 - Modify Password - User connected",
									"item": [
										{
											"name": "Login With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
															"//pm.environment.set(\"encodedphone\",encodedphone);\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberWithAreaCode}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve New SWSE Password Reset Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"pm.test(\"Reseting token generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"    pincode = jsonData.token;\r",
															"    pm.environment.set(\"pincode\", pincode);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"   // pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"   // pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"//swse_username = pm.environment.get(\"swse_username\");\r",
															"//swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{phoneNumberWithAreaCode}}&country={{countryfooter}}&type=PASSWORD_RESET",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{phoneNumberWithAreaCode}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "PASSWORD_RESET"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify Password with Token  CN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var newPassword = pm.iterationData.get(\"newPassword\");\r",
															"var pincode = pm.environment.get(\"pincode\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "ccp-token={{ccp-token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"newPassword\": \"{{newPassword}}\",\n\t\"token\": \"{{pincode}}\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/password?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"password"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												},
												"description": "Link to the FUS => https://agile.richemont.com/jira/browse/CCP-6065\n\nNo query param is used for this endpoint\n\nA json body is required. Example :\n{\n\t\"newPassword\" : \"myNewPassword1234\",\n\t\"token\" : \"123456\"\n}\n\n"
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "1.1.4 - Check Customer Details",
							"item": [
								{
									"name": "1.1.4.1 - Update Customer Details",
									"item": [
										{
											"name": "Login With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
															"//pm.environment.set(\"encodedphone\",encodedphone);\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberOfUserToUpdate + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneNumberOfUserToUpdate}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"pm.test(\"Reseting token generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"    pincode = jsonData.token;\r",
															"    pm.environment.set(\"pincode\", pincode);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"//swse_username = pm.environment.get(\"swse_username\");\r",
															"//swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{phoneNumberWithAreaCode}}&country={{countryfooter}}&type=LOGIN",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{phoneNumberWithAreaCode}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "LOGIN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Customer (CN)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var emailUserToUpdate = pm.environment.get(\"emailUserToUpdate\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var firstname = \"QA\";\r",
															"var lastname = \"测试自动化\";\r",
															"var customerNumberOfUserToUpdate = pm.iterationData.get(\"customerNumberOfUserToUpdate\");\r",
															"var uidUserToUpdate = pm.iterationData.get(\"uidUserToUpdate\");\r",
															"var areaCode = pm.iterationData.get(\"areaCode\");\r",
															"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"\r",
															"const moment = require('moment');\r",
															"var  timestamp  = moment().format(\"DD_MM_YYYY__hh_mm_ss\");\r",
															"pm.environment.set(\"timestamp\", timestamp);\r",
															"\r",
															"pm.variables.set(\"firstname\", timestamp);\r",
															"pm.variables.set(\"lastname\", lastname);\r",
															"\r",
															"pm.globals.get(\"ccp-login-token\");\r",
															"pm.globals.get(\"ccp-token\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (responseCode.code == 200) {\r",
															"    try {        \r",
															"        pm.test(\"Customer updated \", function () {   \r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
															"        });          \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Cookie",
														"type": "text",
														"value": " ccp-login-token={{ccp-login-token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customerNumber\": {{customerNumberOfUserToUpdate}},\n  \"uid\": \"{{uidUserToUpdate}}\",\n  \"email\": \"{{emailUserToUpdate}}\",\n  \"gender\": \"{{gender}}\",\n  \"title\": \"{{title}}\",\n  \"firstName\": \"{{firstname}}\",\n  \"lastName\": \"{{lastname}}\", \n  \"optIn\": true,\n  \"password\": \"{{password}}\",\n  \"phoneNumber\": \"{{phoneNumberOfUserToUpdate}}\",\n  \"phoneNumberVerificationCode\":\"{{pincode}}\", \n  \"phoneNumberCountry\": \"CN\",\n  \"country\": \"CN\",\n  \"language\": \"zh-cn\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1.1.4.2 - Modify OptIn",
									"item": [
										{
											"name": "Login User Optout With Phone & Password (CN)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
															"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
															"//pm.environment.set(\"encodedphone\",encodedphone);\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberOfUserToUpdate + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var phoneUserOptOut = pm.iterationData.get(\"phoneUserOptOut\");\r",
															"var password = pm.iterationData.get(\"password\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{phoneUserOptOut}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "brand",
															"value": "{{brand}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change To OptIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (responseCode.code == 200) {\r",
															"    try {        \r",
															"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optIn\"), function () {   \r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
															"        });          \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var optIn = pm.iterationData.get(\"optIn\");\r",
															"\r",
															"pm.globals.get(\"ccp-login-token\");\r",
															"pm.globals.get(\"ccp-token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{optIn}}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"optin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check If OptOut was modified",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).eql(true); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Accept-Language",
														"type": "text",
														"value": "en-US,en;q=0.9"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Change To OptOut",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (responseCode.code == 200) {\r",
															"    try {        \r",
															"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optOut\"), function () {   \r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
															"        });          \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var optOut = pm.iterationData.get(\"optOut\");\r",
															"\r",
															"pm.globals.get(\"ccp-login-token\");\r",
															"pm.globals.get(\"ccp-token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{optOut}} "
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"optin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check If OptOut was saved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"/*",
															"const Ajv = require('ajv');",
															"const jsonValidator = new Ajv({logger: console});",
															"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
															"",
															"pm.test('Current customer Json response body Schema is valid', function() {",
															"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
															"});",
															"*/",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).eql(false); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Accept-Language",
														"type": "text",
														"value": "en-US,en;q=0.9"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "1.1.5 - Create New User Account",
							"item": [
								{
									"name": "Generate phone number",
									"item": [
										{
											"name": "Login To RCDC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('User logged-in notification center api. ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err);",
															"}",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {  ",
															"         pm.test(\"Notification center token generated.\", function () {",
															"            jsonResponse = JSON.parse(responseBody); ",
															"           ",
															"            pm.environment.set(\"rcdc_token\",jsonData.data.token.split(\"Bearer \")[1]);                       ",
															"        });  ",
															"         ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rcdcUser = pm.environment.get(\"rcdcUser\");\r",
															"var rcdcPassword = pm.environment.get(\"rcdcPassword\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"username\": \"{{rcdcUser}}\", \"password\": \"{{rcdcPassword}}\"}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/login",
													"host": [
														"{{rcdc_url}}"
													],
													"path": [
														"retail-activation",
														"api",
														"v1",
														"backoffice",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Display phone numbers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Code status: ' + pm.response.code, function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err); \r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);      \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"The total of phone numbers: \" + jsonData.data.length, function () {   \r",
															"            pm.expect(jsonData.meta).eql(null);   \r",
															"            pm.expect(jsonData.data).not.eql(null); \r",
															"            // If max number of phone numbers = 5, delete a phone number from the list\r",
															"            if(jsonData.data.length < 5)\r",
															"            {\r",
															"                postman.setNextRequest(\"Generate new phone number\");\r",
															"            }\r",
															"            else\r",
															"            {\r",
															"                // Retrieve the ID of phone number to be deleted from the list\r",
															"                pm.environment.set(\"phoneNumberID\",jsonData.data[0].id);\r",
															"            }\r",
															"                \r",
															"        });   \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rcdc_token = pm.environment.get(\"rcdc_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{rcdc_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
													"host": [
														"{{rcdc_url}}"
													],
													"path": [
														"retail-activation",
														"api",
														"v1",
														"backoffice",
														"notification",
														"virtual-mobiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete phone number if Max of phone numbers reached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Code status: ' + pm.response.code, function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err); \r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);      \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"New phone number generated: \" + jsonData.data, function () {               \r",
															"            pm.expect(jsonData.data).eql(\"OK\");  \r",
															"            pm.expect(jsonData.meta).eql(null);\r",
															"        });   \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rcdc_token = pm.environment.get(\"rcdc_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{rcdc_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"countryCode\":\"CN\",\"generatedNumber\":1}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles/{{phoneNumberID}}",
													"host": [
														"{{rcdc_url}}"
													],
													"path": [
														"retail-activation",
														"api",
														"v1",
														"backoffice",
														"notification",
														"virtual-mobiles",
														"{{phoneNumberID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate new phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Code status: ' + pm.response.code, function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err); \r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);  \r",
															"        postman.setNextRequest(\"Logout new user\");    \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"New phone number generated: \" + jsonData.data, function () {               \r",
															"            pm.expect(jsonData.data).eql(\"OK\");  \r",
															"            pm.expect(jsonData.meta).eql(null);\r",
															"        });   \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rcdc_token = pm.environment.get(\"rcdc_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{rcdc_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"countryCode\":\"CN\",\"generatedNumber\":1}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
													"host": [
														"{{rcdc_url}}"
													],
													"path": [
														"retail-activation",
														"api",
														"v1",
														"backoffice",
														"notification",
														"virtual-mobiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Code status: ' + pm.response.code, function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData; \r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err); \r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);      \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"New phone number generated: \" + jsonData.data[0].countryCallingCode + jsonData.data[0].mobileNumber , function () {   \r",
															"            pm.expect(jsonData.meta).eql(null);   \r",
															"            pm.expect(jsonData.data).not.eql(null); \r",
															"            pm.environment.set(\"newPhoneNumberCreatedWithoutAreaCode\",jsonData.data[0].mobileNumber);\r",
															"            pm.environment.set(\"newPhoneNumberCreated\",jsonData.data[0].countryCallingCode + jsonData.data[0].mobileNumber); \r",
															"            console.log(\"+86\" + jsonData.data[0].mobileNumber); \r",
															"            setTimeout(function(){\r",
															"                console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"            }, 2000);     \r",
															"        });   \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rcdc_token = pm.environment.get(\"rcdc_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{rcdc_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
													"host": [
														"{{rcdc_url}}"
													],
													"path": [
														"retail-activation",
														"api",
														"v1",
														"backoffice",
														"notification",
														"virtual-mobiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve  Pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.environment.get(\"newPhoneNumberCreated\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"        postman.setNextRequest(\"Logout the new account created\");       \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"        pincode = jsonData.token;\r",
															"        pm.environment.set(\"pincode\", pincode);\r",
															"});  \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"swse_username = pm.environment.get(\"swse_username\");\r",
															"swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{newPhoneNumberCreated}}&country={{countryfooter}}&type=VERIFY",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{newPhoneNumberCreated}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "VERIFY"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Register & Login",
									"item": [
										{
											"name": "Register & Login (CN)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"var  timestamp  = moment().format(\"DD_MM_YYYY__kk_mm_ss\");\r",
															"\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"var standardName =  pm.iterationData.get(\"newAccountLastname\");\r",
															"\r",
															"var newAccountTitle = pm.iterationData.get(\"newAccountTitle\");\r",
															"var newAccountFirstname = pm.iterationData.get(\"newAccountFirstname\");\r",
															"var newAccountLastname2 = pm.iterationData.get(\"newAccountLastname2\");\r",
															"var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");\r",
															"var newAccountpassword = pm.iterationData.get(\"newAccountpassword\");\r",
															"var newAccountcountryofresidence = pm.iterationData.get(\"newAccountcountryofresidence\");\r",
															"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");\r",
															"var newAccountGender = pm.iterationData.get(\"newAccountGender\");\r",
															"var newAccountCountryfooter = pm.iterationData.get(\"newAccountCountryfooter\");\r",
															"var callbackUrAccountCreation = pm.environment.get(\"callbackUrAccountCreation\");\r",
															"\r",
															"var env;\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    env = \"q1\"; \r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    env = \"q2\"; \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    env = \"p1\"; \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    env = \"p2\";\r",
															"    break;  \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"pm.environment.set(\"newAccountLastnameCreated\", standardName.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter).replace(\"language\",newAccountWeblanguage));\r",
															"\r",
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"var newAccountLastnameCreated = pm.environment.get(\"newAccountLastnameCreated\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var skipTest = pm.environment.get(\"skipTest\");\r",
															"\r",
															"(skipTest ? pm.test.skip : pm.test)(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    skipTest = false;\r",
															"});\r",
															"\r",
															"\r",
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"\r",
															"if (responseCode.code == 200) {\r",
															"    try {        \r",
															"        pm.test(\"New Account: \" + pm.environment.get(\"newAccountLastnameCreated\") + \" with the number phone: \" +  newPhoneNumberCreated + \" is created.\", function (){\r",
															"            var skipTest = true;\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);    \r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.token); \r",
															"            setTimeout(function(){\r",
															"                    console.log(\"Sleeping for 5 seconds before next request.\");\r",
															"            }, 5000);\r",
															"            skipTest = false;   \r",
															"        });         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else{\r",
															"   console.log(\"Failed to create the New Account.\"); \r",
															"}\r",
															"\r",
															"pm.environment.set(\"skipTest\", skipTest);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"customerDetails\": {\n\t\t\"title\":\"{{newAccountTitle}}\",\n\t\t\"firstName\":\"{{newAccountFirstname}}\",\n\t\t\"lastName\":\"{{newAccountLastnameCreated}}\",\t\t\t\n\t\t\"optIn\":{{newAccountOptIn}},\n\t\t\"password\":\"{{newAccountpassword}}\",\n\t\t\"country\":\"{{newAccountcountryofresidence}}\",\n\t\t\"language\":\"{{newAccountWeblanguage}}\",\n\t\t\"gender\":\"{{newAccountGender}}\",\n\t\t\"phoneNumber\": \"{{newPhoneNumberCreated}}\",\n        \"phoneNumberCountry\": \"{{newAccountCountryfooter}}\",\n        \"phoneNumberVerificationCode\": \"{{pincode}}\"\n\t},\n\t\"callbackUrl\": \"{{callbackUrAccountCreation}}\",\n\t\"websiteCountry\" : \"{{newAccountCountryfooter}}\"\n}"
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check New Account Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var skipTest = pm.environment.get(\"skipTest\");",
															"",
															"(skipTest ? pm.test.skip : pm.test)('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"    skipTest = false;",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");",
															"        (skipTest ? pm.test.skip : pm.test)(\"The New Customer with ID: \" + jsonData.customerNumber + \" and phone number: \" + newPhoneNumberCreated + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null); ",
															"            pm.environment.set(\"newCustomerNumber\",jsonData.customerNumber);   ",
															"            pm.environment.set(\"newUid\",jsonData.uid);  ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");",
															"            pm.expect(jsonData.optIn).eql(newAccountOptIn); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Accept-Language",
														"type": "text",
														"value": "en-US,en;q=0.9"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{newAccountWeblanguage}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{newAccountWeblanguage}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Logout",
									"item": [
										{
											"name": "Close connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Login & check customer details",
									"item": [
										{
											"name": "Retrieve  Login Pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData; \r",
															"var pincode;\r",
															"var phone = pm.environment.get(\"newPhoneNumberCreated\");\r",
															"\r",
															"try {\r",
															"    jsonData = pm.response.json(); \r",
															"} catch (err) {\r",
															"    console.log(err);\r",
															"}\r",
															"\r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"        postman.setNextRequest(\"Logout new user\");       \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {    \r",
															"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
															"        pincode = jsonData.token;\r",
															"        pm.environment.set(\"pincode\", pincode);\r",
															"});  \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
															"var environment = pm.iterationData.get(\"environment\");\r",
															"\r",
															"var swse_customer_url;\r",
															"var swse_swse_username;\r",
															"var swse_password;\r",
															"\r",
															"\r",
															"switch (environment) {\r",
															"  case \"quality\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;\r",
															"  case \"quality2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
															"    break;\r",
															"  case \"preprod2\":\r",
															"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
															"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
															"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
															"    break;       \r",
															"  default:\r",
															"    tests[\"Sorry, No environment designed\"];\r",
															"}\r",
															"\r",
															"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
															"swse_username = pm.environment.get(\"swse_username\");\r",
															"swse_password = pm.environment.get(\"swse_password\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{swse_authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{newPhoneNumberCreated}}&country={{countryfooter}}&type=LOGIN",
													"protocol": "https",
													"host": [
														"{{swse_customer_url}}"
													],
													"path": [
														"{{brand}}",
														"token",
														"phone"
													],
													"query": [
														{
															"key": "number",
															"value": "{{newPhoneNumberCreated}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														},
														{
															"key": "type",
															"value": "LOGIN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Login With Phone & Pincode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {  \r",
															"    setTimeout(function(){\r",
															"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
															"    }, 2000);  \r",
															"    pm.response.to.have.status(200);    \r",
															"});\r",
															"\r",
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"\r",
															"var jsonResponse; \r",
															"if (responseCode.code !== 200) {\r",
															"    try {        \r",
															"        jsonMessage = JSON.parse(responseBody.message);  \r",
															"        console.log(jsonMessage);\r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"     try {  \r",
															"         pm.test(\"CCP token generated and the User whose phone : \" + newPhoneNumberCreated + \" is logged-in.\", function () {\r",
															"            jsonResponse = JSON.parse(responseBody); \r",
															"\r",
															"            pm.expect(jsonResponse.token).not.eql(null);\r",
															"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
															"            \r",
															"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
															"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
															"        });  \r",
															"         \r",
															"    }\r",
															"    catch(e) {\r",
															"        console.log(e);\r",
															"    }\r",
															"    return; \r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
															"var brand = pm.iterationData.get(\"brand\");\r",
															"var country = pm.iterationData.get(\"countryfooter\");\r",
															"var language = pm.iterationData.get(\"language\");\r",
															"var pincode = pm.environment.get(\"pincode\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "{{BasicAuthCustomer}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "phone",
															"value": "{{newPhoneNumberCreated}}",
															"type": "text"
														},
														{
															"key": "pincode",
															"value": "{{pincode}}",
															"description": "use send pin code endpoint to get a new pincode",
															"type": "text"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}",
															"type": "text"
														},
														{
															"key": "language",
															"value": "{{language}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Current User and check Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData; ",
															"try {",
															"    jsonData = pm.response.json(); ",
															"} catch (err) {",
															"    console.log(err); ",
															"}",
															"",
															"",
															"",
															"if (responseCode.code !== 200) {",
															"    try {        ",
															"        jsonMessage = JSON.parse(responseBody.message);  ",
															"        console.log(jsonMessage);      ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return;",
															"}",
															"else {",
															"     try {    ",
															"        pm.test.skip(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
															"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
															"            pm.expect(jsonData.uid).not.eql(null); ",
															"            pm.expect(jsonData.optIn).not.eql(null); ",
															"            pm.expect(jsonData.country).not.eql(null);      ",
															"        });   ",
															"    }",
															"    catch(e) {",
															"        console.log(e);",
															"    }",
															"    return; ",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var brand = pm.iterationData.get(\"brand\");",
															"var countryfooter = pm.iterationData.get(\"countryfooter\");",
															"var language = pm.iterationData.get(\"language\");",
															"pm.globals.get(\"ccp-login-token\");",
															"pm.globals.get(\"ccp-token\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "ccp-login-token={{ccp-login-token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{BasicAuthCustomer}}",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "en-US,en;q=0.9",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													],
													"query": [
														{
															"key": "language",
															"value": "{{language}}"
														},
														{
															"key": "country",
															"value": "{{countryfooter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout the new account created",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"var brand = pm.iterationData.get(\"brand\");",
															"pm.globals.set(\"ccp-login-token\", null);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "zu;[t8sKY?hssR8F",
															"type": "string"
														},
														{
															"key": "username",
															"value": "internal",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "ccp-login-token={{ccp-login-token}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ccp-login-token",
															"value": "{{ccp-login-token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
													"protocol": "https",
													"host": [
														"{{ServerModifier}}"
													],
													"path": [
														"customer",
														"v1",
														"{{brand}}",
														"customer",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "1.2 - Equipment Microservice",
					"item": [
						{
							"name": "1.2.1 - Extend Warranty",
							"item": [
								{
									"name": "Login With Phone & Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {  \r",
													"    setTimeout(function(){\r",
													"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
													"    }, 2000);  \r",
													"    pm.response.to.have.status(200);    \r",
													"});\r",
													"\r",
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
													"            jsonResponse = JSON.parse(responseBody); \r",
													"\r",
													"            pm.expect(jsonResponse.token).not.eql(null);\r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
													"            \r",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
													"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
													"        });  \r",
													"         \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "phone",
													"value": "{{phoneNumberWithAreaCode}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product By Serial Number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"var serial = pm.iterationData.get(\"serial\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"value": "{{serial}}",
												"type": "text"
											},
											{
												"key": "ccp-login-token",
												"value": "{{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Customer Products",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData; ",
													"var productsCount;",
													"try {",
													"    jsonData = pm.response.json(); ",
													"    productsCount = jsonData.length",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"/*",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const productsSchema = JSON.parse(pm.environment.get(\"schemaProducts\"));",
													"",
													"pm.test('Products Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(productsSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"*/",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"Customer products: \" + productsCount, function () {            ",
													"            // Check the first item ",
													"            pm.expect(jsonData[0].uid).not.eql(null); ",
													"            pm.expect(jsonData[0].eligibilityStatus).not.eql(null);    ",
													"            pm.expect(jsonData[0].extendable).not.eql(null); ",
													"            // Check the last item ",
													"            if(productsCount>1){",
													"                pm.expect(jsonData[productsCount - 1].uid).not.eql(null); ",
													"                pm.expect(jsonData[productsCount - 1].eligibilityStatus).not.eql(null);    ",
													"                pm.expect(jsonData[productsCount - 1].extendable).not.eql(null);",
													"            }                                  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"200\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"customer",
												"products"
											],
											"query": [
												{
													"key": "language",
													"value": "{{language}}"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extend Warranty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);    ",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json(); ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"",
													"const Ajv = require('ajv');",
													"const jsonValidator = new Ajv({logger: console});",
													"const extendWarrantySchema = JSON.parse(pm.environment.get(\"schemaExtendWarranty\"));",
													"",
													"pm.test('Extend warranry Json response body Schema is valid', function() {",
													"    pm.expect(jsonValidator.validate(extendWarrantySchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
													"});",
													"",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"Warranty is extended, the eligibility status is \" + jsonData.extensionRequestEligibilityStatus + \", extension request date: \" + jsonData.extensionRequestDate, function () {   ",
													"            pm.expect(jsonData.uid).not.eql(null);   ",
													"            pm.expect(jsonData.extensionRequestDate).not.eql(null); ",
													"            pm.expect(jsonData.extensionRequestEligibilityStatus).not.eql(null);                 ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"var warrantyUid = pm.iterationData.get(\"warrantyUid\");",
													"pm.globals.get(\"ccp-login-token\");",
													"pm.globals.get(\"ccp-token\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{warrantyUid}}/extend?giftReceiver=true",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{warrantyUid}}",
												"extend"
											],
											"query": [
												{
													"key": "giftReceiver",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1.2.2 - Upload Warranty Card - Sellout Product",
							"item": [
								{
									"name": "Login User Optout With Phone & Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {  \r",
													"    setTimeout(function(){\r",
													"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
													"    }, 2000);  \r",
													"    pm.response.to.have.status(200);    \r",
													"});\r",
													"\r",
													"var phoneNumberOfUserToUpdate = pm.iterationData.get(\"phoneNumberOfUserToUpdate\");\r",
													"//var encodedphone = phoneNumberWithAreaCode.replace(\"+\", \"%2B\");\r",
													"//pm.environment.set(\"encodedphone\",encodedphone);\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberOfUserToUpdate + \" is logged-in.\", function () {\r",
													"            jsonResponse = JSON.parse(responseBody); \r",
													"\r",
													"            pm.expect(jsonResponse.token).not.eql(null);\r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
													"            \r",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
													"            pm.globals.set(\"ccp-token\",jsonResponse.ccpToken);              \r",
													"        });  \r",
													"         \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phoneUserOptOut = pm.iterationData.get(\"phoneUserOptOut\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "phone",
													"value": "{{phoneUserOptOut}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Warranty Card Picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"pm.globals.get(\"ccp-token\");\r",
													"\r",
													"var sellOutEquipmentUid = pm.iterationData.get(\"sellOutEquipmentUid\");\r",
													"var popImage = pm.environment.get(\"popImage\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											},
											{
												"key": "Transfer-Encoding",
												"value": "chunked",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-login-token={{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-token={{ccp-token}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "ccp-info-country={{countryfooter}}",
												"type": "text"
											},
											{
												"key": "wechat-browser",
												"value": "false",
												"type": "text"
											},
											{
												"key": "raf_ns",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{popImage}}\r\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{sellOutEquipmentUid}}/proofofpurchase?language={{language}}&country={{countryfooter}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{sellOutEquipmentUid}}",
												"proofofpurchase"
											],
											"query": [
												{
													"key": "language",
													"value": "{{language}}"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.set(\"ccp-login-token\", null);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "zu;[t8sKY?hssR8F",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "ccp-login-token",
													"value": "{{ccp-login-token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"current"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "1.3 - Microservice POS",
					"item": [
						{
							"name": "1.3.1 - External extension request - Booster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaExternalExtension = JSON.parse(pm.environment.get(\"schemaExternalExtension\"));\r",
											"\r",
											"pm.test('External extension Request  response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(schemaExternalExtension, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthBooster}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"systemId\": 2,\r\n    \"posId\": \"PN/30/06JL/202016\",\r\n    \"brand\": \"{{brand}}\",\r\n    \"product\": {\r\n        \"reference\":\"CRWSTA0030\",\r\n        \"serial\":\"3170583299ZX\",\r\n        \"hash\":\"\",\r\n        \"isGift\": false\r\n    },\r\n    \"customer\": {\r\n        \"externalId\":\"1233000202\",\r\n        \"authGroup\":\"WWJL\",\r\n        \"title\":\"0002\",\r\n        \"gender\":\"0001\",\r\n        \"firstName\":\"Test\",\r\n        \"lastName\":\"Test\",\r\n        \"fullName\":\"\",\r\n        \"optIn\": true,\r\n        \"email\":\"\",\r\n        \"phoneNumber\":\"\",\r\n        \"country\":\"CH\",\r\n        \"language\":\"fr\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipmentpos/v1/extend",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipmentpos",
										"v1",
										"extend"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 - External extension request - Dare",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"const Ajv = require('ajv');\r",
											"const jsonValidator = new Ajv({logger: console});\r",
											"const schemaExternalExtension = JSON.parse(pm.environment.get(\"schemaExternalExtension\"));\r",
											"\r",
											"pm.test('External extension Request  response body Schema is valid', function() {\r",
											"    pm.expect(jsonValidator.validate(schemaExternalExtension, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthDare}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"systemId\": 2,\r\n    \"posId\": \"PN/30/06JL/202016\",\r\n    \"brand\": \"{{brand}}\",\r\n    \"product\": {\r\n        \"reference\":\"CRWSTA0030\",\r\n        \"serial\":\"3170583299ZX\",\r\n        \"hash\":\"\",\r\n        \"isGift\": false\r\n    },\r\n    \"customer\": {\r\n        \"externalId\":\"1233000202\",\r\n        \"authGroup\":\"WWJL\",\r\n        \"title\":\"0002\",\r\n        \"gender\":\"0001\",\r\n        \"firstName\":\"Test\",\r\n        \"lastName\":\"Test\",\r\n        \"fullName\":\"\",\r\n        \"optIn\": true,\r\n        \"email\":\"\",\r\n        \"phoneNumber\":\"\",\r\n        \"country\":\"CH\",\r\n        \"language\":\"fr\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipmentpos/v1/extend",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipmentpos",
										"v1",
										"extend"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2 - Medium risks tests",
			"item": [
				{
					"name": "2.1 - Microservice Customer",
					"item": [
						{
							"name": "2.1.1 - Check Customer Portfolio",
							"item": [
								{
									"name": "Login With Phone & Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {  \r",
													"    setTimeout(function(){\r",
													"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
													"    }, 2000);  \r",
													"    pm.response.to.have.status(200);    \r",
													"});\r",
													"\r",
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
													"            jsonResponse = JSON.parse(responseBody); \r",
													"\r",
													"            pm.expect(jsonResponse.token).not.eql(null);\r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
													"            \r",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
													"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
													"        });  \r",
													"         \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "phone",
													"value": "{{phoneNumberWithAreaCode}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var uid = pm.iterationData.get(\"uid\");\r",
													"\r",
													"var EQP_UID = pm.environment.get(\"EQP_UID\");\r",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-login-token={{ccp-login-token}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "ccp-token={{ccp-token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/internal/collection/startprogram/{{equipmentUid}}/{{uid}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"internal",
												"collection",
												"startprogram",
												"{{equipmentUid}}",
												"{{uid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product By Serial Number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"var serial = pm.iterationData.get(\"serial\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"   ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"value": "{{serial}}",
												"type": "text"
											},
											{
												"key": "ccp-login-token",
												"value": "{{ccp-login-token}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{BasicAuthEquipment}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2.2 - Check Configurations",
					"item": [
						{
							"name": "Country",
							"item": [
								{
									"name": "getFormCountries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); // This must be logging the error on console\r",
													"}\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Form countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
													"            pm.expect(jsonData.length > 0);   \r",
													"            // Check the first item       \r",
													"            pm.expect(jsonData[0].name).not.eql(null);              \r",
													"            pm.expect(jsonData[0].isoCode).not.eql(null);   \r",
													"            pm.expect(jsonData[0].phonePrefix).not.eql(null); \r",
													"            \r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
													"                pm.expect(jsonData[jsonData.length-1].isoCode).not.eql(null);   \r",
													"                pm.expect(jsonData[jsonData.length-1].phonePrefix).not.eql(null);                 \r",
													"            }        \r",
													"            console.log(\"Form countries list= \"  + jsonData.length);             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/form/country",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"form",
												"country"
											]
										}
									},
									"response": []
								},
								{
									"name": "getFooterCountries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); // This must be logging the error on console\r",
													"}\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Footer countries list contains: \"  + jsonData.length + \" countries\", function () { \r",
													"            pm.expect(jsonData.length > 0);   \r",
													"            // Check the first item       \r",
													"            pm.expect(jsonData[0].name).not.eql(null);              \r",
													"            pm.expect(jsonData[0].code).not.eql(null);   \r",
													"            pm.expect(jsonData[0].countries > 0); \r",
													"            \r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].name).not.eql(null);              \r",
													"                pm.expect(jsonData[jsonData.length-1].code).not.eql(null);   \r",
													"                pm.expect(jsonData[jsonData.length-1].countries > 0);                 \r",
													"            }        \r",
													"            console.log(\"Footer countries list= \"  + jsonData.length);             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/footer/country/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"footer",
												"country",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enrich",
							"item": [
								{
									"name": "SearchPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Enrich search path configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.fieldPathMap.PRODUCT_NAME).not.eql(null); \r",
													"            pm.expect(jsonData.fieldPathMap.COMMERCIAL_REFERENCE).not.eql(null); \r",
													"            pm.expect(jsonData.assetConfig.targetUrl).not.eql(null);                             \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"//pm.globals.get(\"ccp-login-token\");\r",
													"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/search-path/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"search-path",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "App configuration",
							"item": [
								{
									"name": "getAppConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"App configuration exists for the brand: \" + jsonData.brand.name, function () {   \r",
													"            pm.expect(jsonData.brand.shortName).eql(brand);   \r",
													"            pm.expect(jsonData.app.landingPage).not.eql(null); \r",
													"            pm.expect(jsonData.assetsPaths.appPath).not.eql(null);                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/application/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"application",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "RWF",
							"item": [
								{
									"name": "getRWFConfig",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"RWF configuration exists for the brand: \" + jsonData.maison, function () {   \r",
													"            pm.expect(jsonData.maison).not.eql(null);   \r",
													"            pm.expect(jsonData.campaignCode).not.eql(null); \r",
													"            pm.expect(jsonData.termsUrl).not.eql(null); \r",
													"            pm.expect(jsonData.favoriteUrl).not.eql(null);                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthConfiguration}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/rwf/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"rwf",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Image Manager",
							"item": [
								{
									"name": "getBrandImageConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Brand image configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.cropBottomPercent > 0); \r",
													"            pm.expect(jsonData.cropTopPercent > 0);                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/image-manager/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"image-manager",
												"{{brand}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "getDeviceConfiguration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Devices configuration exists for the brand: \" + jsonData.length + \" devices\", function () {   \r",
													"            pm.expect(jsonData[0].device).to.be.oneOf([\"desktop-large\", \"mobile\",\"email\", \"desktop\"]);     \r",
													"            pm.expect(jsonData[0].transformations[0].transformation).not.eql(null);\r",
													"            pm.expect(jsonData[0].transformations[0].height).not.eql(null);\r",
													"            //pm.expect(jsonData[0].transformations[0].extensions[0].extension).not.eql(null);  \r",
													"\r",
													"            // Check the last item  \r",
													"            if(jsonData.length>1){\r",
													"                pm.expect(jsonData[jsonData.length-1].device).to.be.oneOf([\"desktop-large\", \"mobile\",\"email\", \"desktop\"]);            \r",
													"                pm.expect(jsonData[jsonData.length-1].transformations[0].transformation).not.eql(null); \r",
													"                pm.expect(jsonData[jsonData.length-1].transformations[0].height).not.eql(null);  \r",
													"                //pm.expect(jsonData[jsonData.length-1].transformations[0].extensions[0].extension).not.eql(null);                 \r",
													"            }                            \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/image-manager/devices",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"image-manager",
												"devices"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Warranty extension",
							"item": [
								{
									"name": "getWarrantyExtension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"\r",
													"var jsonData; \r",
													"try {\r",
													"    jsonData = pm.response.json(); \r",
													"} catch (err) {\r",
													"    console.log(err); \r",
													"}\r",
													"\r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);      \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {    \r",
													"        pm.test(\"Warranty extension configuration exists for the brand: \" + jsonData.brand, function () {   \r",
													"            pm.expect(jsonData.brand).eql(brand);   \r",
													"            pm.expect(jsonData.warrantyExtensionEligibilityConfig).not.eql(null);\r",
													"            pm.expect(jsonData.timestamp).not.eql(null);                       \r",
													"        });   \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BasicAuthConfiguration}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/configuration/v1/configuration/warranty-extension/{{brand}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"configuration",
												"v1",
												"configuration",
												"warranty-extension",
												"{{brand}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "2.3 - Microservice Equipment",
					"item": [
						{
							"name": "2.3.1 - Check Products and Warranty",
							"item": [
								{
									"name": "Login With Phone & Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status received is ' + pm.response.code, function () {  \r",
													"    setTimeout(function(){\r",
													"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
													"    }, 2000);  \r",
													"    pm.response.to.have.status(200);    \r",
													"});\r",
													"\r",
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"\r",
													"var jsonResponse; \r",
													"if (responseCode.code !== 200) {\r",
													"    try {        \r",
													"        jsonMessage = JSON.parse(responseBody.message);  \r",
													"        console.log(jsonMessage);\r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"     try {  \r",
													"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
													"            jsonResponse = JSON.parse(responseBody); \r",
													"\r",
													"            pm.expect(jsonResponse.token).not.eql(null);\r",
													"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
													"            \r",
													"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
													"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
													"        });  \r",
													"         \r",
													"    }\r",
													"    catch(e) {\r",
													"        console.log(e);\r",
													"    }\r",
													"    return; \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
													"var password = pm.iterationData.get(\"password\");\r",
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var country = pm.iterationData.get(\"countryfooter\");\r",
													"var language = pm.iterationData.get(\"language\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthCustomer}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "phone",
													"value": "{{phoneNumberWithAreaCode}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "language",
													"value": "{{language}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{countryfooter}}",
													"type": "text"
												},
												{
													"key": "brand",
													"value": "{{brand}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"customer",
												"v1",
												"{{brand}}",
												"customer",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Product By Serial Number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");",
													"pm.globals.get(\"ccp-login-token\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"   ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});",
													"",
													"var jsonData; ",
													"try {",
													"    jsonData = pm.response.json();     ",
													"} catch (err) {",
													"    console.log(err); ",
													"}",
													"if (responseCode.code !== 200) {",
													"    try {        ",
													"        jsonMessage = JSON.parse(responseBody.message);  ",
													"        console.log(jsonMessage);      ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"    }",
													"    return;",
													"}",
													"else {",
													"     try {    ",
													"        pm.test(\"The product with serial number: \" + jsonData[0].serial + \" is present\", function () { ",
													"            pm.expect(jsonData[0].serial).not.eql(null);            ",
													"            var EQP_UID = jsonData[0].uid;",
													"            var WAR_UID = jsonData[0].warranty.uid; ",
													"            pm.environment.set(\"EQP_UID\",EQP_UID);",
													"            pm.environment.set(\"WAR_UID\",WAR_UID);  ",
													"        });   ",
													"    }",
													"    catch(e) {",
													"        console.log(e);",
													"        pm.test(\"Fail expected document\", function () {",
													"            pm.expect(pm.response.text()).to.include(\"serial\");",
													"        }); ",
													"    }",
													"    return; ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Mbk4]7]DfUD%xC]b",
													"type": "string"
												},
												{
													"key": "username",
													"value": "internal",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "serial",
												"type": "text",
												"value": "{{serial}}"
											},
											{
												"key": "ccp-login-token",
												"type": "text",
												"value": "{{ccp-login-token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product?serial={{serial}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product"
											],
											"query": [
												{
													"key": "serial",
													"value": "{{serial}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Product By Uid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test.skip(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var uid = pm.iterationData.get(\"uid\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{uid}}?country={{countryfooter}}&language={{language}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"product",
												"{{uid}}"
											],
											"query": [
												{
													"key": "country",
													"value": "{{countryfooter}}"
												},
												{
													"key": "language",
													"value": "{{language}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Warranty By Uid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var brand = pm.iterationData.get(\"brand\");\r",
													"var uid = pm.iterationData.get(\"uid\");\r",
													"var warrantyUid = pm.iterationData.get(\"warrantyUid\");\r",
													"pm.globals.get(\"ccp-login-token\");\r",
													"var EQP_UID = pm.environment.get(\"EQP_UID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{BasicAuthEquipment}}"
											}
										],
										"url": {
											"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{warrantyUid}}",
											"protocol": "https",
											"host": [
												"{{ServerModifier}}"
											],
											"path": [
												"equipment",
												"v1",
												"{{brand}}",
												"warranty",
												"{{warrantyUid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2.4 - BI Gateway",
					"item": [
						{
							"name": "GET Batch psuh to BI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/*\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.text();     \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(jsonData, function () { \r",
											"            pm.expect(jsonData).to.include(\"Total customers to proces\");  \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);        \r",
											"    }\r",
											"    return; \r",
											"}\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"pm.globals.get(\"ccp-login-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BasicBiGateway}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/bi-adapter/v1/{{brand}}/process?from=2019-01-01&to=2020-11-30",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"bi-adapter",
										"v1",
										"{{brand}}",
										"process"
									],
									"query": [
										{
											"key": "from",
											"value": "2019-01-01"
										},
										{
											"key": "to",
											"value": "2020-11-30"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "3 - Low risks tests",
			"item": [
				{
					"name": "3.1 - Check Customer Collection",
					"item": [
						{
							"name": "Login With Phone & Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose phone : \" + phoneNumberWithAreaCode + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var phoneNumberWithAreaCode = pm.iterationData.get(\"phoneNumberWithAreaCode\");\r",
											"var password = pm.iterationData.get(\"password\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "phone",
											"value": "{{phoneNumberWithAreaCode}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "brand",
											"value": "{{brand}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Link Customer To Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "equipmentUid",
											"value": "{{equipmentUidToAdd}}",
											"type": "text"
										},
										{
											"key": "giftReceiver",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product By Uid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUidToAdd}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\" :  \"{{ccp-login-token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}?gift=true",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "gift",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Equipment From Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection",
										"{{equipmentUidToAdd}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check That Product Was Removed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"var productsCount;",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");",
											"try {",
											"    jsonData = pm.response.json(); ",
											"    productsCount = jsonData.length",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"pm.test(\"Product removed from customer collection.\", function () {    ",
											"    if(productsCount > 0)",
											"    {",
											"        for(var i=0; i< jsonData.length; i++)",
											"        {",
											"            pm.expect(jsonData[i].uid).not.eql(equipmentUidToAdd);",
											"        }",
											"    }            ",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"customer",
										"products"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Close connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "4 - E2E Scenario",
			"item": [
				{
					"name": "Generate phone number",
					"item": [
						{
							"name": "Login To RCDC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('User logged-in notification center api. ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err);",
											"}",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {  ",
											"         pm.test(\"Notification center token generated.\", function () {",
											"            jsonResponse = JSON.parse(responseBody); ",
											"           ",
											"            pm.environment.set(\"rcdc_token\",jsonData.data.token.split(\"Bearer \")[1]);                       ",
											"        });  ",
											"         ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rcdcUser = pm.environment.get(\"rcdcUser\");\r",
											"var rcdcPassword = pm.environment.get(\"rcdcPassword\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"{{rcdcUser}}\", \"password\": \"{{rcdcPassword}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/login",
									"host": [
										"{{rcdc_url}}"
									],
									"path": [
										"retail-activation",
										"api",
										"v1",
										"backoffice",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display phone numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code status: ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"The total of phone numbers: \" + jsonData.data.length, function () {   \r",
											"            pm.expect(jsonData.meta).eql(null);   \r",
											"            pm.expect(jsonData.data).not.eql(null); \r",
											"            // If max number of phone numbers = 5, delete a phone number from the list\r",
											"            if(jsonData.data.length < 5)\r",
											"            {\r",
											"                postman.setNextRequest(\"Generate new phone number\");\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                // Retrieve the ID of phone number to be deleted from the list\r",
											"                pm.environment.set(\"phoneNumberID\",jsonData.data[0].id);\r",
											"            }\r",
											"                \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rcdc_token = pm.environment.get(\"rcdc_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{rcdc_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
									"host": [
										"{{rcdc_url}}"
									],
									"path": [
										"retail-activation",
										"api",
										"v1",
										"backoffice",
										"notification",
										"virtual-mobiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete phone number if Max of phone numbers reached",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code status: ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"New phone number generated: \" + jsonData.data, function () {               \r",
											"            pm.expect(jsonData.data).eql(\"OK\");  \r",
											"            pm.expect(jsonData.meta).eql(null);\r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rcdc_token = pm.environment.get(\"rcdc_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{rcdc_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"countryCode\":\"CN\",\"generatedNumber\":1}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles/{{phoneNumberID}}",
									"host": [
										"{{rcdc_url}}"
									],
									"path": [
										"retail-activation",
										"api",
										"v1",
										"backoffice",
										"notification",
										"virtual-mobiles",
										"{{phoneNumberID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate new phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code status: ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);  \r",
											"        postman.setNextRequest(\"Logout new user\");    \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"New phone number generated: \" + jsonData.data, function () {               \r",
											"            pm.expect(jsonData.data).eql(\"OK\");  \r",
											"            pm.expect(jsonData.meta).eql(null);\r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rcdc_token = pm.environment.get(\"rcdc_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{rcdc_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"countryCode\":\"CN\",\"generatedNumber\":1}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
									"host": [
										"{{rcdc_url}}"
									],
									"path": [
										"retail-activation",
										"api",
										"v1",
										"backoffice",
										"notification",
										"virtual-mobiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code status: ' + pm.response.code, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData; \r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err); \r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);      \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"New phone number generated: \" + jsonData.data[0].countryCallingCode + jsonData.data[0].mobileNumber , function () {   \r",
											"            pm.expect(jsonData.meta).eql(null);   \r",
											"            pm.expect(jsonData.data).not.eql(null); \r",
											"            pm.environment.set(\"newPhoneNumberCreatedWithoutAreaCode\",jsonData.data[0].mobileNumber);\r",
											"            pm.environment.set(\"newPhoneNumberCreated\",jsonData.data[0].countryCallingCode + jsonData.data[0].mobileNumber); \r",
											"            console.log(\"+86\" + jsonData.data[0].mobileNumber);  \r",
											"            setTimeout(function(){\r",
											"                console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"            }, 2000);     \r",
											"        });   \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rcdc_token = pm.environment.get(\"rcdc_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{rcdc_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rcdc_url}}/retail-activation/api/v1/backoffice/notification/virtual-mobiles",
									"host": [
										"{{rcdc_url}}"
									],
									"path": [
										"retail-activation",
										"api",
										"v1",
										"backoffice",
										"notification",
										"virtual-mobiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve  Pincode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData; \r",
											"var pincode;\r",
											"var phone = pm.environment.get(\"newPhoneNumberCreated\");\r",
											"\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err);\r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"        postman.setNextRequest(\"Logout new user\");       \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token,\r",
											"        function () {\r",
											"            setTimeout(function(){\r",
											"            console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"        }, 2000);\r",
											"        pincode = jsonData.token;\r",
											"        pm.environment.set(\"pincode\", pincode);\r",
											"});  \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"var brand = pm.collectionVariables.get(\"brand\");\r",
											"pm.environment.set(\"brand\", brand);\r",
											"var environment = pm.collectionVariables.get(\"environment\");\r",
											"pm.environment.set(\"environment\", environment);\r",
											"\r",
											"var swse_customer_url;\r",
											"var swse_swse_username;\r",
											"var swse_password;\r",
											"\r",
											"\r",
											"switch (environment) {\r",
											"  case \"quality\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
											"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
											"    break;\r",
											"  case \"preprod\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
											"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
											"    break;\r",
											"  case \"quality2\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    //pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
											"    //pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
											"    break;\r",
											"  case \"preprod2\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    //pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
											"    //pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
											"    break;       \r",
											"  default:\r",
											"    tests[\"Sorry, No environment designed\"];\r",
											"}\r",
											"\r",
											"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
											"//swse_username = pm.environment.get(\"swse_username\");\r",
											"//swse_password = pm.environment.get(\"swse_password\");\r",
											"\r",
											"setTimeout(function(){\r",
											"    console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{swse_authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{newPhoneNumberCreated}}&country={{countryfooter}}&type=VERIFY",
									"protocol": "https",
									"host": [
										"{{swse_customer_url}}"
									],
									"path": [
										"{{brand}}",
										"token",
										"phone"
									],
									"query": [
										{
											"key": "number",
											"value": "{{newPhoneNumberCreated}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "type",
											"value": "VERIFY"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register & Login",
					"item": [
						{
							"name": "Register & Login (CN)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var  timestamp  = moment().format(\"DD_MM_YYYY__kk_mm_ss\");\r",
											"\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var environment = pm.iterationData.get(\"environment\");\r",
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"var standardName =  pm.iterationData.get(\"newAccountLastname\");\r",
											"\r",
											"var newAccountTitle = pm.iterationData.get(\"newAccountTitle\");\r",
											"var newAccountFirstname = pm.iterationData.get(\"newAccountFirstname\");\r",
											"var newAccountLastname2 = pm.iterationData.get(\"newAccountLastname2\");\r",
											"var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");\r",
											"var newAccountpassword = pm.iterationData.get(\"newAccountpassword\");\r",
											"var newAccountcountryofresidence = pm.iterationData.get(\"newAccountcountryofresidence\");\r",
											"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");\r",
											"var newAccountGender = pm.iterationData.get(\"newAccountGender\");\r",
											"var newAccountCountryfooter = pm.iterationData.get(\"newAccountCountryfooter\");\r",
											"var callbackUrAccountCreation = pm.environment.get(\"callbackUrAccountCreation\");\r",
											"\r",
											"var env;\r",
											"switch (environment) {\r",
											"  case \"quality\":\r",
											"    env = \"q1\"; \r",
											"    break;\r",
											"  case \"quality2\":\r",
											"    env = \"q2\"; \r",
											"    break;\r",
											"  case \"preprod\":\r",
											"    env = \"p1\"; \r",
											"    break;\r",
											"  case \"preprod2\":\r",
											"    env = \"p2\";\r",
											"    break;  \r",
											"  default:\r",
											"    tests[\"Sorry, No environment designed\"];\r",
											"}\r",
											"pm.environment.set(\"newAccountLastnameCreated\", standardName.replace(\"timestamp\" ,timestamp).replace(\"brand\",brand).replace(\"env\",env).replace(\"country\",newAccountCountryfooter).replace(\"language\",newAccountWeblanguage));\r",
											"\r",
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"var newAccountLastnameCreated = pm.environment.get(\"newAccountLastnameCreated\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var skipTest = pm.environment.get(\"skipTest\");\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    skipTest = false;\r",
											"});\r",
											"\r",
											"\r",
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"New Account: \" + pm.environment.get(\"newAccountLastnameCreated\") + \" with the number phone: \" +  newPhoneNumberCreated + \" is created.\", function (){\r",
											"            var skipTest = true;\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);    \r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token); \r",
											"            setTimeout(function(){\r",
											"                    console.log(\"Sleeping for 5 seconds before next request.\");\r",
											"            }, 5000);\r",
											"\r",
											"            postman.setNextRequest(\"Check New Account Details\");\r",
											"            skipTest = false;   \r",
											"        });         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else{\r",
											"   console.log(\"Failed to create the New Account.\"); \r",
											"}\r",
											"\r",
											"pm.environment.set(\"skipTest\", skipTest);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"customerDetails\": {\n\t\t\"title\":\"{{newAccountTitle}}\",\n\t\t\"firstName\":\"{{newAccountFirstname}}\",\n\t\t\"lastName\":\"{{newAccountLastnameCreated}}\",\t\t\t\n\t\t\"optIn\":{{newAccountOptIn}},\n\t\t\"password\":\"{{newAccountpassword}}\",\n\t\t\"country\":\"{{newAccountcountryofresidence}}\",\n\t\t\"language\":\"{{newAccountWeblanguage}}\",\n\t\t\"gender\":\"{{newAccountGender}}\",\n\t\t\"phoneNumber\": \"{{newPhoneNumberCreated}}\",\n        \"phoneNumberCountry\": \"{{newAccountCountryfooter}}\",\n        \"phoneNumberVerificationCode\": \"{{pincode}}\"\n\t},\n\t\"callbackUrl\": \"{{callbackUrAccountCreation}}\",\n\t\"websiteCountry\" : \"{{newAccountCountryfooter}}\"\n}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check New Account Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"    skipTest = false;",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");",
											"        (skipTest ? pm.test.skip : pm.test)(\"The New Customer with ID: \" + jsonData.customerNumber + \" and phone number: \" + newPhoneNumberCreated + \" is present\", function () {   ",
											"            pm.expect(jsonData.customerNumber).not.eql(null); ",
											"            pm.environment.set(\"newCustomerNumber\",jsonData.customerNumber);   ",
											"            pm.environment.set(\"newUid\",jsonData.uid);  ",
											"            pm.expect(jsonData.uid).not.eql(null); ",
											"            var newAccountOptIn = pm.iterationData.get(\"newAccountOptIn\");",
											"            pm.expect(jsonData.optIn).eql(newAccountOptIn); ",
											"            pm.expect(jsonData.country).not.eql(null);      ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var newAccountWeblanguage = pm.iterationData.get(\"newAccountWeblanguage\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "en-US,en;q=0.9"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{newAccountWeblanguage}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{newAccountWeblanguage}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Customer",
					"item": [
						{
							"name": "Change To OptOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optOut\"), function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var optOut = pm.iterationData.get(\"optOut\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{optOut}} "
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"optin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check If OptOut was modified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () { ",
											"            pm.expect(jsonData.optIn).eql(false);                  ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "en-US,en;q=0.9"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change To OptIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (responseCode.code == 200) {\r",
											"    try {        \r",
											"        pm.test(\"OptIn updated, actual value is: \" + pm.iterationData.get(\"optIn\"), function () {   \r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);                        \r",
											"        });          \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var optIn = pm.iterationData.get(\"optIn\");\r",
											"\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{optIn}}"
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/optin",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"optin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check If OptIn was saved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"/*",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const currentCustomerSchema = JSON.parse(pm.environment.get(\"schemaCurrentCustomer\"));",
											"",
											"pm.test('Current customer Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(currentCustomerSchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"*/",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {  ",
											"            pm.expect(jsonData.optIn).eql(true);                   ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "en-US,en;q=0.9"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add  product to the collection",
					"item": [
						{
							"name": "Link Customer To Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "equipmentUid",
											"value": "{{equipmentUidToAdd}}",
											"type": "text"
										},
										{
											"key": "giftReceiver",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product By Uid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUidToAdd}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Extend Warranty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);    ",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"const Ajv = require('ajv');",
											"const jsonValidator = new Ajv({logger: console});",
											"const extendWarrantySchema = JSON.parse(pm.environment.get(\"schemaExtendWarranty\"));",
											"",
											"pm.test('Extend warranry Json response body Schema is valid', function() {",
											"    pm.expect(jsonValidator.validate(extendWarrantySchema, jsonData), JSON.stringify(jsonValidator.errors)).to.be.true;",
											"});",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"Warranty is extended, the eligibility status is \" + jsonData.extensionRequestEligibilityStatus + \", extension request date: \" + jsonData.extensionRequestDate, function () {   ",
											"            pm.expect(jsonData.uid).not.eql(null);   ",
											"            pm.expect(jsonData.extensionRequestDate).not.eql(null); ",
											"            pm.expect(jsonData.extensionRequestEligibilityStatus).not.eql(null);                 ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var warrantyUid = pm.iterationData.get(\"warrantyUid\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthEquipment}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/warranty/{{warrantyUid}}/extend?giftReceiver=true",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"warranty",
										"{{warrantyUid}}",
										"extend"
									],
									"query": [
										{
											"key": "giftReceiver",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\" :  \"{{ccp-login-token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}?gift=true",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "gift",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove product from collection",
					"item": [
						{
							"name": "Remove Equipment From Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection/{{equipmentUidToAdd}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection",
										"{{equipmentUidToAdd}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check That Product Was Removed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"var productsCount;",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");",
											"try {",
											"    jsonData = pm.response.json(); ",
											"    productsCount = jsonData.length",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"pm.test(\"Product removed from customer collection.\", function () {    ",
											"    if(productsCount > 0)",
											"    {",
											"        for(var i=0; i< jsonData.length; i++)",
											"        {",
											"            pm.expect(jsonData[i].uid).not.eql(equipmentUidToAdd);",
											"        }",
											"    }            ",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-token={{ccp-token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/customer/products?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"customer",
										"products"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add  new product to the collection",
					"item": [
						{
							"name": "Link Customer To Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var equipmentUid = \"139770ab-8361-4ecc-ba7c-00c2d27bddd4\";\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"pm.globals.get(\"ccp-token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "equipmentUid",
											"value": "{{equipmentUidToAdd}}",
											"type": "text"
										},
										{
											"key": "giftReceiver",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/collection",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product By Uid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUidToAdd}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Close connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login & check customer details",
					"item": [
						{
							"name": "Retrieve  Login Pincode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData; \r",
											"var pincode;\r",
											"var phone = pm.environment.get(\"newPhoneNumberCreated\");\r",
											"\r",
											"try {\r",
											"    jsonData = pm.response.json(); \r",
											"} catch (err) {\r",
											"    console.log(err);\r",
											"}\r",
											"\r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"        postman.setNextRequest(\"Logout new user\");       \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {    \r",
											"        pm.test(\"Login token sent generated for the phone: \" + phone + \", pincode: \"+ jsonData.token, function () {\r",
											"        pincode = jsonData.token;\r",
											"        pm.environment.set(\"pincode\", pincode);\r",
											"});  \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");\r",
											"var environment = pm.iterationData.get(\"environment\");\r",
											"\r",
											"var swse_customer_url;\r",
											"var swse_swse_username;\r",
											"var swse_password;\r",
											"\r",
											"\r",
											"switch (environment) {\r",
											"  case \"quality\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
											"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
											"    break;\r",
											"  case \"preprod\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
											"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
											"    break;\r",
											"  case \"quality2\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-qua-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    pm.environment.set(\"swse_username\", \"s-cnpdgq.ccp-all-ccp@richemont.com\"); \r",
											"    pm.environment.set(\"swse_password\", \"3KePem4MCMNq\");     \r",
											"    break;\r",
											"  case \"preprod2\":\r",
											"    pm.environment.set(\"swse_customer_url\", \"swse-api-val-cn.digital.rccad.net/swse/customer/v1\");\r",
											"    pm.environment.set(\"swse_username\", \"s-cnpdgv.ccp-all-ccp@richemont.com\"); \r",
											"    pm.environment.set(\"swse_password\", \"5DrBbGW26htw\");\r",
											"    break;       \r",
											"  default:\r",
											"    tests[\"Sorry, No environment designed\"];\r",
											"}\r",
											"\r",
											"swse_customer_url = pm.environment.get(\"swse_customer_url\");\r",
											"swse_username = pm.environment.get(\"swse_username\");\r",
											"swse_password = pm.environment.get(\"swse_password\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{swse_authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{swse_customer_url}}/{{brand}}/token/phone?number={{newPhoneNumberCreated}}&country={{countryfooter}}&type=LOGIN",
									"protocol": "https",
									"host": [
										"{{swse_customer_url}}"
									],
									"path": [
										"{{brand}}",
										"token",
										"phone"
									],
									"query": [
										{
											"key": "number",
											"value": "{{newPhoneNumberCreated}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "type",
											"value": "LOGIN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Phone & Pincode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {  \r",
											"    setTimeout(function(){\r",
											"        console.log(\"Sleeping for 2 seconds before next request.\");\r",
											"    }, 2000);  \r",
											"    pm.response.to.have.status(200);    \r",
											"});\r",
											"\r",
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"\r",
											"var jsonResponse; \r",
											"if (responseCode.code !== 200) {\r",
											"    try {        \r",
											"        jsonMessage = JSON.parse(responseBody.message);  \r",
											"        console.log(jsonMessage);\r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"     try {  \r",
											"         pm.test(\"CCP token generated and the User whose phone : \" + newPhoneNumberCreated + \" is logged-in.\", function () {\r",
											"            jsonResponse = JSON.parse(responseBody); \r",
											"\r",
											"            pm.expect(jsonResponse.token).not.eql(null);\r",
											"            pm.expect(pm.response.headers.get(\"ccp_logging_id\")).not.eql(null);\r",
											"            \r",
											"            pm.globals.set(\"ccp-login-token\",jsonResponse.token);\r",
											"            pm.globals.set(\"ccp-token\",jsonResponse.token);              \r",
											"        });  \r",
											"         \r",
											"    }\r",
											"    catch(e) {\r",
											"        console.log(e);\r",
											"    }\r",
											"    return; \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var newPhoneNumberCreated =  pm.environment.get(\"newPhoneNumberCreated\");\r",
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var country = pm.iterationData.get(\"countryfooter\");\r",
											"var language = pm.iterationData.get(\"language\");\r",
											"var pincode = pm.environment.get(\"pincode\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthCustomer}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "phone",
											"value": "{{newPhoneNumberCreated}}",
											"type": "text"
										},
										{
											"key": "pincode",
											"value": "{{pincode}}",
											"description": "use send pin code endpoint to get a new pincode",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}",
											"type": "text"
										},
										{
											"key": "language",
											"value": "{{language}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/login",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Current User and check Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData; ",
											"try {",
											"    jsonData = pm.response.json(); ",
											"} catch (err) {",
											"    console.log(err); ",
											"}",
											"",
											"",
											"",
											"if (responseCode.code !== 200) {",
											"    try {        ",
											"        jsonMessage = JSON.parse(responseBody.message);  ",
											"        console.log(jsonMessage);      ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return;",
											"}",
											"else {",
											"     try {    ",
											"        pm.test(\"The Customer with ID \" + jsonData.customerNumber + \" is present\", function () {   ",
											"            pm.expect(jsonData.customerNumber).not.eql(null);   ",
											"            pm.expect(jsonData.uid).not.eql(null); ",
											"            pm.expect(jsonData.optIn).not.eql(null); ",
											"            pm.expect(jsonData.country).not.eql(null);      ",
											"        });   ",
											"    }",
											"    catch(e) {",
											"        console.log(e);",
											"    }",
											"    return; ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");",
											"var countryfooter = pm.iterationData.get(\"countryfooter\");",
											"var language = pm.iterationData.get(\"language\");",
											"pm.globals.get(\"ccp-login-token\");",
											"pm.globals.get(\"ccp-token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "ccp-login-token={{ccp-login-token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BasicAuthCustomer}}",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current?language={{language}}&country={{countryfooter}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "country",
											"value": "{{countryfooter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product By Uid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var brand = pm.iterationData.get(\"brand\");\r",
											"var equipmentUidToAdd = pm.iterationData.get(\"equipmentUidToAdd\");\r",
											"pm.globals.get(\"ccp-login-token\");\r",
											"//var EQP_UID = pm.environment.get(\"EQP_UID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BasicAuthEquipment}}"
									}
								],
								"url": {
									"raw": "https://{{ServerModifier}}/equipment/v1/{{brand}}/product/{{equipmentUidToAdd}}?country={{countryfooter}}&language={{language}}",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"equipment",
										"v1",
										"{{brand}}",
										"product",
										"{{equipmentUidToAdd}}"
									],
									"query": [
										{
											"key": "country",
											"value": "{{countryfooter}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status received is ' + pm.response.code + \", user disconnected\" , function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var brand = pm.iterationData.get(\"brand\");",
											"pm.globals.set(\"ccp-login-token\", null);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "zu;[t8sKY?hssR8F",
											"type": "string"
										},
										{
											"key": "username",
											"value": "internal",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "ccp-login-token={{ccp-login-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ccp-login-token",
											"value": "{{ccp-login-token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{ServerModifier}}/customer/v1/{{brand}}/customer/current",
									"protocol": "https",
									"host": [
										"{{ServerModifier}}"
									],
									"path": [
										"customer",
										"v1",
										"{{brand}}",
										"customer",
										"current"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "popImage",
			"value": "/9j/4AAQSkZJRgABAQAAAQABAAD//gAfQ29tcHJlc3NlZCBieSBqcGVnLXJlY29tcHJlc3P/2wCEAAgICAgICAkKCgkMDQwNDBIQDw8QEhsTFRMVExspGR4ZGR4ZKSQsJCEkLCRBMy0tM0FLPzw/S1tRUVtybHKVlckBCAgICAgICQoKCQwNDA0MEhAPDxASGxMVExUTGykZHhkZHhkpJCwkISQsJEEzLS0zQUs/PD9LW1FRW3JscpWVyf/CABEIALQCWAMBIgACEQEDEQH/xAAcAAEAAgIDAQAAAAAAAAAAAAAABgcFCAEDBAL/2gAIAQEAAAAAv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcQv4kkd7JkAAAAAAAAAAAV7mcjTN0+DCz4AAAAAAAAAABXsencbkkEkk/AAAAAAAAAAAcRv4jck+5KAAAAAAAAAAAI70xuSfclAAAAAAAAAAAEc6o3JPuSgAAAAAAAAAB109lPTLPJxG5J9+mJ+bGXF9AAAAAAAAAAqmcxL3sTPIRN4HlnglsKtIAAAAAHDkAAAeevpR6Yh0sZk3olXmjE/9fIAAAAAYehPVsF3gAAA4BzG6qkcatmRAAAAAA1fkN/8Axz9fBz9fPT3cHH38uOwfHX2upz8ah7SyDw4qRdbs+X1xx1u7r+uvs4c/fz1Oe4AGr8iv3VnJ7KQrW68/PP6fsms7r1atRY+uc89EU2RKZrzZ7y6o3N45DrfuwKy8PRkshr3tlXGRqiT2hDqauXurWRSGt9itUbr8Nw+gCMyLsavzScYeg9uedQbNu2jpVbPV2avSiWWdrnnvfjLSgEo89abFNS7Al/brJuz9Gm23LULbfWDbWD5yoJZZ7U/ZnL0Kk0P2E1HsSZZmB293iLalTXYvPal3jX0wqS2bI1R28UHmbN1n2Foa+5NzrnYFaXHKcZ7IlWmxTUvZ/J+XUDZ6W9MX1r2p9OpO2uqu3cDktNyyz2p+zOXorLRSxrE1H2nhdYVvt1Ih1a8zWByiJ3XTWyFQ1xc1CXRhLZpGXQq8dZ7H9Mkpqf2DQGwmcUzBLG7aetjpsPzU5LsdNuIN65XP6JyXfaut+ZyU/wBdr2n2tefuPW+46GtGHTTKWmHDDYCtdgeXIDgcuHIDhy4cjgHLgHIODF03e/0AEQpy3M17QAAAAAAAAMfB632PyAAOIrVOA6gAAAAAAAAPZNrX9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAAAf/aAAgBAxAAAAAAAAAAAAABUAAAAAAAAAAAAAAAAAAUCAAAAAAWAAAUllJUWVFJQEFJQJQEUlllCCoqFlQsAFllIFAAAAAgAAAAAAAAAAAAD//EADgQAAAGAQIEBAMGBgIDAAAAAAECAwQFBgAHVREWFzYSExQVECFBICI1R1BTIzAxMjRgJ3AkQFb/2gAIAQEAAQwA/wCuVr/UkFVElJQAP1Gp26hnu8d7Z7p6kno+o1M3YcQv9PXVTSJKh4/9Fu025TK3goziaRh6pDxUc3aCybrHPBQhyGKMW04cvyHMXJ/rB9qLBQZCFIWKZgEvU4WWjXTQGTdA9GnF1U14CVESyP8Aokjp3Fykgu/cPn3nz2n8bFwsi9RfyAqU0xj1aGEwiI/mnlyMYlWmRKIgMDQI2UhY56s/kAUjtOYqLfoP20g+8/8A0W4drTeUvtWFz808unas1lP7WhP9HuHa07lL7Vhc/NPLp2rNZT+1oT/QxEOIBx+xcO1p7KX2rC5+aeXTtWayn9rQn2AEBEQ4h+vGOUhTGMIAUUX2oUw5cN3y7OM/5Er30QmmzfUqKIcEZVm8jVmVkgZHh6WUbKDcB41Wbyl9qwufmnl07VmsqHyq0Lj2xwMcA+qlGyYuNSoo5xRimbySW/5EsP0QhWwIvtPZhs5cPl3kYU5TlA5RAS/rmo0+ZAraETWFAK8lEtopqhFrpKtpDUNFnKu2qEW5eN291ps2mKK7pEmK0qlS5ROizQxXS2M8s6bWVkUCQ0cERFs2AKCoH5p5MxwS8W8YCoKYJ6XRopkTdS0iuRGk0qIKB1maGOLrTYRIEUHSJsYahovJVo1Xi3LNtYUolzFOW8oskk202sQrkdQSi3n/AK67ZMnzcyDpukuR7psyTVOvByTqMWrNeb1yLTaE4HVk6xASn+XGNlDr6ZQPiE7Jd6yPyTY23zZXN6Gey6kJf2WZqfOVr97v7t7sw9X7LqQr/fZmpMGk2R183lzejiGmMBxA71w9enj61AxXzZxjZM1lrzexxajQ4gRVnpw0UUKvOSLmTWZsmjBEqLVumin+iTvu3tbn2nw+tkb1e4l4qzerkSXhrjqHPORbxyxFVGYuvRtwc+Hz/wD37JaI2sNAWdCJlGU9ebw5VJHKkYNCUq3oF8aV0dCrZbJfIJmLB+VMg1aVGagI96Y3FT9E1N7ve5o/+KSvwMomTgB1ClwhyKAIkOBgwyqZOHjUKXPVIfRZPPVIfRZPCKJqB9xQpvgIgUOIjwAjlsobwprpmNxDjw4/MxgKHERAA9Uh9Fk89Uh9Fk8BdD6LpiIiBQERHgHqkPosnnqkPosngKoDw4LpiP2DLIkESmVIBvUN/wB5PAEBABAeIGOUgeIxgAPUN/3k89Q3/eTwFkTDwBQgi8dIsWq7lY3hTn5t1YJRw+cDlViUoSAj2hScD5JxrOYYLsnifjSrFdTq8edki7VXJiiqSQcVFCkBNVJUOKahThhlUyfI6hS56pD6LJ4UwGADAICAnIHyEwBgGKPHgIDnqG/7yeAuiYeAKkEc9Qh8+KyYZ6pD6LJ56hv+8nhTlOHEpgEPOR/cTzzkf3E8BZEeH8UvwMchA4mMAB6hv+8nnqG/7yeFWSMPAqhBH+Zqb3g9zR4BGRlsEQKAiIgAWBaStUvNyLUDHbaYzJ2VhBooqPlZcalH2BA7pVddFxAtQk5mOZLKKAm6oFLYnQI5cuEjIUuTq9mjX8MZZwysM+0rkYq9cfPK/wC7aiyjlWUdqkjlKFVjp+Akf5JpJGYqNxh13T9w7Zy8W2mmCzFyJwStkUSAnXceguqdOBoVcd15lJPlnIDJ6bxTyJB/W36x1WbdxKVxFnLonSWvMChWZkjRqusdKmUaEmoBs+eC5FayaZsW8c5dxbhwRagW6UaTDOOcOFF2nx1JqbBFk+nkVnBXFGgELLLKNna6xEmTRJgzbNEePlzsGzno8WTwVCksDH2eafsE1znIzoFVJCtX75dyQJbTtAGSEjWXa5l7++epUbiuQUXDUgKOW5Df0+xfLxy+UGLHgd/VKilMsEpewqLPV7dUiQTE8xXlV2atDvQz/wD4EhwB9dqoxmmriQUWXTc19l7vNR7BRY5CRMW2ho9Bi2E4pan1tqZg5niOFyL0erM2cMR2K66it9rTWsPWZGbhcyem9VZSbYsy5XXFW3HlAgXaUYgoq6iNLYwjNMZNdws6tDFOHn5Bi3Op5MXpxX3sOyWUO7BaoQUxASEvEOiqrRt9rbasO2ZWblcydCp8TYIhV4+M5MpMaXRhmap4xy6RXqFvloaUbN1XKqrSdg2VhjxZPDKlTnWXtMw/YprHOVDT+qIxCD184ckLL6eJptW8lWHSxl2iiyrRsddIUlvtrXKroOBbqTDYFEF0HCRVUVSqJ/DU3u97mjSXhCbXy/THs1bdnKbgtp3AJtqscVyffdoua/NrJAPBaOepSTBo8S/skfw97kKk8XlmCTJXynVqql0BsEo9lE3wQ0gWWiI96XNXX6iksxY8f4ekSZQgXx/rh00z8BOQpvhqX3g/yMrN3lqy1SSmkCMdMV3TVnKQjwokXzVzuVrlKvdfhoBqxeqrEVndR2D9mrHwiDhy7olAftX6ErKp+Tljn0K3Gi+XRUVJ1gidsd5VrsytS7lBu0WRHUztB7mkfcDv43juyZzlK8S1eaomm0DttNXqysEowcFEq+qDUy9SWMAcRSOKSqagf1IcpyEOUeIfGefqSczIu1DcRikyIxUcmX+kugVzFyCJg4liHqsbKsnaQ8Dzg8YOTEMpPdkN8NSOzZPKuIcsQeaxf50Pmk/bCvxvvd8xlf8AwGH+GsX+bEZQLnBQMOq0frKJqSmp8N6Y6UURd07p+nso5kUH8uiKCGXPuqZxWo3uWgWyCkygo202fKuK96NcBBewW+GrhAB4sIrI6xMxcgCsOqCDR22fNEHLZQFEfsXRR0lVpgzURBUAEwgUocRi39rpC6a5mblFvX59hY2BHbQ/wvD0khapZYg8SaYRh46skVULwPqbKGkrA1i0iHVIlqGdBFJFOrSgEur/AN2mPXhGOWQaUy3q4RZgc335H8Pe5UO6ITPlwHOHDNXoxUr9hJAA+Xo+6KaOlGv1mY53KMToNJJZitIWW2R794zPOuzGq8dJMWAHfyyz5XUvvB/lM7VhM4AH9A+GrncrXNPYqMdVJmK7FuqN7rQ1WVQex3jSbUmzFssSVRQQB27ZNH6Ioum6ayfLFd2dljOKjI4xzM2SCA6mdoPc0j7gd/G8d2TOQf4LFYAAH9AyRZIyLJyzXDinMxLqEkXDFyTgejzCUzWmKnjAVscuUGaCjhdQqaVVt7W0KvwQZqpp2WNViZ2RaKAIZW3ZH1eh1iCA5LLlbRb9c48C1+NVmJpgzTLxGVQO4i3yCYffp6pG9ohjqDwDNTViJU94UwgA11I6Feh0T/IdYv8AOh80n7YV+N97vmMr/wCAw/w1n+b+JzS6NjndfcHXZoKm1FqSUEuhJxqYpNtPrWNgjhQdH4vcufdUzkT+FR+Xe5pV1H0bLgeRa6dWqbIrIO1E0VDpnKqZLhxPUY5eKrUWyXDgr9hQhFSGIcoGLZ6DJwT33GISOu1jdRq7LsxazafplVX7Glz6b+BkEnbCyaqNjtDtYRNUVqhQZCbcpPJBI6LGxzilbZN/SRS7s1OdSrK1jIP4d4qfNVVl3CDWLQiXK56m6nqvKA7LDvVUrPaV2LFJNvCvXKkO0mIqVYvhh3qgdR3f/wApKZK2Sz2xdlFMIl9GoSUMxl4o8a7KJ0m0BaqDLi9ZtTP2iuo66iXgZ1uSO6jtOp+ffLPpXgyJJPSQkWdwDZZctnPK2GadSIQ7xEIG8uomHYsFa3JHM/1HlDtjkY1p+ResEkYarHeyXq3Lu4uZa0SxXpIN8iTT2des2zODdQj4mWeDSsMM5YnEAPCEtdLmBVCIdHCvTozrJVx7c6Zn+GodgdvW72CbQrww059JVeSVdqQr1crjUqQ8k/p6s+82vPJmFgHc1Kt37x1OITUzLPZD2Z6nkdfnzNgzbHqskY0pf51yzUQjq2/QXqjF7GwLJF4sqo5tlPjbQ1KBx8l0zi7vQ3qizZmZwglqVMrh4Eai6MtLwt/tbJZd75TVHT2DWg4AhHKQpubpS0LOgVVIxUX1elrLSEzxsnCOl2k7P2G3tRjIeDeIo0ulIVhIy65gVfZctN35H60jBp+YnG3yys0CNpKrvl1gjLBeJFqvMMhj4pZQG6CingMYLtKSNqeNVUYR8inTbQ8rMWoxWr8gsM3eZ+VaixioF+2VO5Vqlaaiqi6fqzxJabl3sh7Q7Tyi2VxIIIRS8Q7bHWU8tJVXwCYLvKyNqdtTowj5FPT2deQqZYpzCvhCZim81GO2C4fcaR9qpc2VckcucyN7FWMXemgJIp5pGXl5V6/9pdp51NPGRjdBaCdpLV967byi0zIQEhJvH01qDYkjNWEGePSqenDWGUI9kVCuXf239eg5PiLyMbLCpp1UVOPCO8GQpG9EtKjCXaoqIFMU5QMUQEv63Ly7GEYqvHioEThWrzUSwnlZAghGAAFAAAOAfy7jWUrNFHRAAB1Xr1L1NQ0ZJIKLIMNQ6o+IA+vBA3M9d3uPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H5zXWd8j85rrO+R+c11nfI/Oa6zvkfnNdZ3yPzmus75H4ra6ugXxqTjLhMarQzQhiRyKjtVq3suo0sBlzj5MXFtIdg3ZNCeFL+bYahDWMvF2iJV3+j8wkYRYPkHJD6Y3IphAI4h86bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAzptctsDOm1y2wM6bXLbAxtpbalhAFU26AQ+kjFA5VJR6ZzjNk0YIEbtUCIpf90f/xABBEAACAgADBQUEBAwGAwAAAAABAgADBBFzEiExQdIQExRRsiJhcXIVIFCRBSMwMkJSYGKBgpKzJDNTcLHRQ3ST/9oACAEBAA0/AP8AbmtyrZV2GaNvTO77zveWzNCyO4UZ1OP2G/CB2NKs8WMRPbtesMzvzMYZH8Us73x2zz7r9SKABnUpjp7FtdYUo44Gfg47OrUOY/YW1syQ4Eow72IGt5rDhVn0PBhWl+HSxwtvNpU2YJcH9hvBWTwiz6HnhGngq/2H8DZPCLPoeeEaeCr/AGH8DZPCLPoeeEaeCr/YIAkk8gJgCa8LbVxe3m0H8t05i2skQ8tsA/cZ4KyeEWfQ88I08FXByLgn7hOQqrIEP810x+VWKtt4128nhAII4EH7dxhHicQQdlKpUgAetg2Z5kkczMLkt+Io3hHnOrGIE9W6fr4azL0GOCCm2Ckw9QQORlnlPoeYiooXAzyziAAIXAQCfr4mwn1GcqsGgf0zFZrRiL9wZ5amTNYwXI8iCeYmCJ8LiQDk9X26w3rYu0J5IxZIx277f9Sw8TOb7AU/1DIzkarjOS3IXn71I6Z3Hc7ex+h8Nmfu0jpnNaUKf8NOZttM/X2Azf1NmYDt0W867BwMHJ2KpBwWtQo+xch3W3llx98r4qakMRNtvxdYCrO7XvtngXy3/YD/AOVSv57xDk1ibgvuLcS08n2yh+9jLGArx9EeoCz503H7F7qn0Twq+rs95yg8j/12e85T5xPnE9xzy7fJWBPZ5mfOJ84h4AMCez5xPnEPABgT9XmC2WU+YdnmZ8wnzCeQYGU1s7n3KM45IrXklY4LO6D2nzd957LV+48iI1xszcAZdnmxAnmpB7PeQM/vnziHmJ8ez5hPcw7ByLCfOJ8wnmJ8Z8Z8ezzM+YT5hPIMD+V7qj0TwyeqATBjz/NqU7ImNQp7g67x2YbDWCso27m0vxKVuQcjkxl9grqD35F2jvsYit3GaK0Hsog42OeQmHAJw9JKIS3BJysqsdXELhKrbCWPdtuKGW5ZlG2TulYQqX45OoaWYYXWv32yomW3VnaGS2W4XusSAwzz4ZgiWYZbhtneCxKy1n4WlRuMorNndu+2HCzEuKgrnM1tyK/UN9ZsQtmh2t0roNhCHImUVLUmZzOygyELq/4s7LArKLSqsx3kQ4Wu22w3bKjMRCttYNmYsHmpmIFNdqcSC29xGtUH4E5fVsXMk8KRMUO8RLHbZRGmG32112HZKREzR+AuHVMLhH2Ch9khM23iX3hGYHflKgdkudpt5zlQqQoD7BGezPwjglFubbgH5LL6mbKw5lSplGMIrRTkudeRlwFKiviofi0YZvsWFFWU2gJtNmcioMuwyOXFvNhL6s6cTL62OVjZlSpgxLINiwqAFERCUDvtq0e0VWVWMSFzOWawWCwGs7J2llF7IrNxIE8Mlltpu2QMxEKW1obcxYPNDGqU2pmDsuRvG78gDkRnHGauhDKR291R6J+JQS8dxV8Xn4SDNZpkFVEwWLOydNswZfUtg/mnh7PTHxFYps5KxO4zBe2AmYNYHMCX4dHI8mI3ynDC3+ewxsaR9yDsU5jMZ5dmxR/bEuoGxQxIOweRIWYDE8DyFnZ9HV/3HlTvnlWSMmaYpDUnsZZbcp9qmjixfzaCxU2UyzzafFJTWHJcid7T654JvUO3xEfD1umGJI3ZZhSQJ+DsQ9DqZTfXbFcN9xzjAEfAjP6luIcj3KDkIuFqA/goEswtqn+KkSm9G+474cFd6DPEjs2qP7k8FXO4tnj7fSvb3y+gTwNPp7O5thxLPuQuCCJaClS7BA2jK7Bb3b/n2ns8W0NFbJhySDkBmASFmAvfDuDCM1or3uZ5i0FxLq1dHHkfqjD8RxyzG1CQAB5nkJYQXquQiuycLKz+dW3kewWiv/5AJMZab/5OCzCAF6695Z3laBFATgFltShhcMizLMHbu07J4ez0zx1Xq7Xo7hj5MhLCJiVt/g4ygYOLqxvyHKYe96iwc7yjZS9Us9vhXmOCzYo/tieDSHs+jq/7jyx7tsvWCT7cubaqK/8AisXlKMkvX/hpmDsOoYZiaSxwAxrQKSBO9p9c8E3qHb4ieCo9A7L6mrYe5hK3IB5MvJhKEFFw99fZWpZmY7gBzMwpGVjnc+cW9invRjmpjYOrP4gZGV4a1j/BZbepbLko3sZZhrEUe8rlPGIv9W7ssspVf6wYmCqBE7i2ePt9K9vfL6BPA0+ns7m2HFuuboGOQAlr5OicKrJhQA5/1E5P2eLaeFq9Il4zUcRWD+mZbm/+IY948Dlchv3g5ZDKV0kuPIuxbL6rAgg8CDEsFqqozekrCNm1LEL1NL/8zDK/BeaGWrkcQ42QnyiBg52xk90bNK66V9lAg55TGMazZ3TDu2uYZv2ZriPEIhZU4rsR0Nd1fcuM0MxmDLDJDlVtjg8w96WFO5cFgpnwPTHuXvriHD5Q1hQxObgrwOZ5wgq/dcXT3gZkGEbkdDkDL7mufm5LnM5LKEVRVUNpzyluwAhrY5BAFmHqFe0qGMMlexCQscWYmyokvZ7kAMShaVVqmYkKSZtvliDWQgzzb2ow2qnP6LrwmRS2sIxSxfcQIlmwUvGRO7PMdouTaxGwShC+17OUeg1lRWymci4bpmMxIIwwBLInycpfaXCd07ZSmhKyQpyJQZc1lgKi50Y7HwAWMpsuNjFmBfflKxlVeBmRDufuwba7BPnboiIXqwK8bDL7WttQ8V5ASoEV2cnH6jwOTXZSNrYl2QuuvGxmJauTvyQeSdjv3jUKcnrb9yIMu9RGUv8AEbMwz7aYVjm9plaFtlBmTsjPICUVlRt1sSdow3taHRDzEv8AYNzKdoSlK0cJm7szcTL7NoJ3bnLIZTDYMZ2uCK37vJYiM2yvE5b8gPMyitlG3WSSWmIxYK3hDkpsyX2sxLqyM+ank0qcglEZqrUPvEqsRO52MyS/MTEXFwndu2zEoFaGz2ULoMpY23UdghAT+nwMtBD2Ocm/qfKDeiAexWfyB4sUG1/UJ+7Y8uyNGLesEoOTQgEEe/7cT72PkJhXyrp5HyTqg/KVZvh38m/6MpfYNTbraYf0LwUn/sVzXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSa6TXSeSXK5nmQUriH2rMsqqFPJZSgUebeZP5YDJb69zictsGpp7r65r1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU16uqa9XVNerqmvV1TXq6pr1dU83tB9Gc501AokXgiDIf70/wD/xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/AGR//8QAHxEAAgEEAgMAAAAAAAAAAAAAAAEQESAwQSFAMWBw/9oACAEDAQE/APs6GUzrppQjYoYh2asYoUsQoUKNQopd4z17HHt3/9k=",
			"disabled": true
		},
		{
			"key": "equipmentUid",
			"value": "43008f05-1f4f-4deb-97c0-10fd29d40cbe",
			"disabled": true
		},
		{
			"key": "brand",
			"value": "car",
			"disabled": true
		},
		{
			"key": "email",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "countryfooter",
			"value": "US",
			"disabled": true
		},
		{
			"key": "language",
			"value": "en-us",
			"disabled": true
		},
		{
			"key": "password",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "optIn",
			"value": "true",
			"disabled": true
		},
		{
			"key": "callbackUrl",
			"value": "/portfolio/success",
			"disabled": true
		},
		{
			"key": "titleNew",
			"value": "MR",
			"disabled": true
		},
		{
			"key": "firstnameNew",
			"value": "Test",
			"disabled": true
		},
		{
			"key": "lastnameNew",
			"value": "Test Automation 9008",
			"disabled": true
		},
		{
			"key": "lastname2New",
			"value": "Api",
			"disabled": true
		},
		{
			"key": "emailNew",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "optInNew",
			"value": "true",
			"disabled": true
		},
		{
			"key": "passwordNew",
			"value": "Test1234",
			"disabled": true
		},
		{
			"key": "countryofresidenceNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "weblanguageNew",
			"value": "en",
			"disabled": true
		},
		{
			"key": "genderNew",
			"value": "0001",
			"disabled": true
		},
		{
			"key": "countryfooterNew",
			"value": "CH",
			"disabled": true
		},
		{
			"key": "lastNameNew",
			"value": "Test Automation 9006",
			"disabled": true
		},
		{
			"key": "emailTokenConfirmation",
			"value": "767c2e3e-1cf3-4548-8c21-21eb3d468694",
			"disabled": true
		},
		{
			"key": "schemaLogin",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"token\": {\n      \"type\": \"string\"\n    },\n    \"ccpToken\": {\n      \"type\": \"string\"\n    },\n    \"expiresIn\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"token\",\n    \"ccpToken\",\n    \"expiresIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaCurrentCustomer",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"uid\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"phoneNumber\": {\n      \"type\": \"string\"\n    },\n    \"gender\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"country\": {\n      \"type\": \"string\"\n    },\n    \"language\": {\n      \"type\": \"string\"\n    },\n    \"creationDate\": {\n      \"type\": \"string\"\n    },\n    \"optIn\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"customerNumber\",\n    \"uid\",\n    \"email\",    \n    \"gender\",\n    \"title\",\n    \"firstName\",\n    \"lastName\",\n    \"country\",\n    \"language\",\n    \"creationDate\",\n    \"optIn\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaPreRegistration",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productType\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"customerNumber\": {\n      \"type\": \"integer\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"isServiceKitNeeded\": {\n      \"type\": \"boolean\"\n    },\n    \"isSameAddress\": {\n      \"type\": \"boolean\"\n    },\n    \"deliveryBillingAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"serviceKitAddress\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"null\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"province\": {\n          \"type\": \"null\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"district\": {\n          \"type\": \"null\"\n        },\n        \"address\": {\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"label\",\n        \"title\",\n        \"lastName\",\n        \"firstName\",\n        \"province\",\n        \"city\",\n        \"district\",\n        \"address\",\n        \"country\"\n      ]\n    },\n    \"requestDate\": {\n      \"type\": \"null\"\n    },\n    \"repairOrder\": {\n      \"type\": \"null\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"updateDate\": {\n      \"type\": \"string\"\n    },\n    \"fileSize\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"serialNumber\",\n    \"productType\",\n    \"productTitle\",\n    \"customerNumber\",\n    \"description\",\n    \"status\",\n    \"isServiceKitNeeded\",\n    \"isSameAddress\",\n    \"deliveryBillingAddress\",\n    \"serviceKitAddress\",\n    \"requestDate\",\n    \"repairOrder\",\n    \"createDate\",\n    \"updateDate\",\n    \"fileSize\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "schemaServiceOrder",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"integer\"\n    },\n    \"createDate\": {\n      \"type\": \"string\"\n    },\n    \"serialNumber\": {\n      \"type\": \"string\"\n    },\n    \"productTitle\": {\n      \"type\": \"string\"\n    },\n    \"shipExpectedDate\": {\n      \"type\": \"null\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"typeOfSite\": {\n      \"type\": \"string\"\n    },\n    \"preregistrationId\": {\n      \"type\": \"null\"\n    },\n    \"customerNumber\": {\n      \"type\": \"null\"\n    },\n    \"billingRequestNumber\": {\n      \"type\": \"null\"\n    },\n    \"requestDate\": {\n      \"type\": \"string\"\n    },\n    \"warrantyDate\": {\n      \"type\": \"null\"\n    },\n    \"warrantyType\": {\n      \"type\": \"null\"\n    },\n    \"boutiqueCode\": {\n      \"type\": \"string\"\n    },\n    \"billingRequests\": {\n      \"type\": \"null\"\n    },\n    \"estimate\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"costEstimateNumber\": {\n          \"type\": \"integer\"\n        },\n        \"status\": {\n          \"type\": \"string\"\n        },\n        \"currency\": {\n          \"type\": \"string\"\n        },\n        \"orderReason\": {\n          \"type\": \"string\"\n        },\n        \"estimateLines\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"lineNumber\": {\n                  \"type\": \"integer\"\n                },\n                \"description\": {\n                  \"type\": \"string\"\n                },\n                \"amountNet\": {\n                  \"type\": \"number\"\n                },\n                \"amountTax\": {\n                  \"type\": \"number\"\n                },\n                \"status\": {\n                  \"type\": \"null\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"lineNumber\",\n                \"description\",\n                \"amountNet\",\n                \"amountTax\",\n                \"status\",\n                \"type\"\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"costEstimateNumber\",\n        \"status\",\n        \"currency\",\n        \"orderReason\",\n        \"estimateLines\"\n      ]\n    },\n    \"currency\": {\n      \"type\": \"null\"\n    },\n    \"validityPeriod\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"createDate\",\n    \"serialNumber\",\n    \"productTitle\",\n    \"shipExpectedDate\",\n    \"status\",\n    \"typeOfSite\",\n    \"preregistrationId\",\n    \"customerNumber\",\n    \"billingRequestNumber\",\n    \"requestDate\",\n    \"warrantyDate\",\n    \"warrantyType\",\n    \"boutiqueCode\",\n    \"billingRequests\",\n    \"estimate\",\n    \"currency\",\n    \"validityPeriod\"\n  ]\n}",
			"disabled": true
		},
		{
			"key": "emailUserPrereg",
			"value": "ric.uat.car%2BTestAutomation9008%40hotmail.com",
			"disabled": true
		},
		{
			"key": "emailUserServiceOrder",
			"value": "ric.uat.car%2Btestccprow200101%40hotmail.com",
			"disabled": true
		},
		{
			"key": "preregistrationIdCol",
			"value": "13364543781",
			"disabled": true
		},
		{
			"key": "serviceOrderIdCol",
			"value": "11965360",
			"disabled": true
		},
		{
			"key": "preregistrationCountCol",
			"value": 1,
			"disabled": true
		},
		{
			"key": "emailNewUser",
			"value": "ric.uat.car%2BTestAutomation9007%40hotmail.com",
			"disabled": true
		}
	]
}